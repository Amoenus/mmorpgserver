// Generated by the rpc compiler.  DO NOT EDIT!
using System;
using System.Collections;
using System.IO;
using Scorpion;
using System.Collections.Generic;
using ProtoBuf;
using DataContract;

#pragma warning disable 0162,0108
namespace RankServerService
{

    public interface IRankService
    {
        /// <summary>
        /// </summary>
        IEnumerator PrepareDataForEnterGame(Coroutine coroutine, RankService _this, PrepareDataForEnterGameInMessage msg);
        /// <summary>
        /// </summary>
        IEnumerator PrepareDataForCreateCharacter(Coroutine coroutine, RankService _this, PrepareDataForCreateCharacterInMessage msg);
        /// <summary>
        /// </summary>
        IEnumerator PrepareDataForCommonUse(Coroutine coroutine, RankService _this, PrepareDataForCommonUseInMessage msg);
        /// <summary>
        /// </summary>
        IEnumerator PrepareDataForLogout(Coroutine coroutine, RankService _this, PrepareDataForLogoutInMessage msg);
        /// <summary>
        /// 检查客户端是否已经连接到对应服务器
        /// </summary>
        IEnumerator CheckConnected(Coroutine coroutine, RankService _this, CheckConnectedInMessage msg);
        /// <summary>
        /// 检查相应客户端连接是否已经断开
        /// </summary>
        IEnumerator CheckLost(Coroutine coroutine, RankService _this, CheckLostInMessage msg);
        /// <summary>
        /// 查询服务器状态
        /// </summary>
        IEnumerator QueryStatus(Coroutine coroutine, RankService _this, QueryStatusInMessage msg);
        /// <summary>
        /// 修改等级数据
        /// </summary>
        IEnumerator CharacterChangeLevel(Coroutine coroutine, RankService _this, CharacterChangeLevelInMessage msg);
        /// <summary>
        /// 修改其他数据
        /// </summary>
        IEnumerator CharacterChangeData(Coroutine coroutine, RankService _this, CharacterChangeDataInMessage msg);
        /// <summary>
        /// 获取某个玩家的天梯对手
        /// </summary>
        IEnumerator Rank_GetP1vP1List(Coroutine coroutine, RankService _this, Rank_GetP1vP1ListInMessage msg);
        /// <summary>
        /// 查询一个玩家的名次是否改变
        /// </summary>
        IEnumerator CompareRank(Coroutine coroutine, RankService _this, CompareRankInMessage msg);
        /// <summary>
        /// 天梯结果有改变
        /// </summary>
        IEnumerator RankP1vP1FightOver(Coroutine coroutine, RankService _this, RankP1vP1FightOverInMessage msg);
        /// <summary>
        /// 广博GM命令
        /// </summary>
        IEnumerator ServerGMCommand(Coroutine coroutine, RankService _this, ServerGMCommandInMessage msg);
        /// <summary>
        /// 查询服务器状态，是否可以进入
        /// </summary>
        IEnumerator ReadyToEnter(Coroutine coroutine, RankService _this, ReadyToEnterInMessage msg);
        /// <summary>
        /// 玩家的排行榜数据修改
        /// </summary>
        IEnumerator SSCharacterChangeDataList(Coroutine coroutine, RankService _this, SSCharacterChangeDataListInMessage msg);
        /// <summary>
        /// 更新服务器
        /// </summary>
        IEnumerator UpdateServer(Coroutine coroutine, RankService _this, UpdateServerInMessage msg);
        /// <summary>
        /// 获取rank数据
        /// </summary>
        IEnumerator GetRankValue(Coroutine coroutine, RankService _this, GetRankValueInMessage msg);
        /// <summary>
        /// 获取排行榜数据
        /// </summary>
        IEnumerator SSGetServerRankData(Coroutine coroutine, RankService _this, SSGetServerRankDataInMessage msg);
        /// <summary>
        /// 运营活动获取排行榜数据
        /// </summary>
        IEnumerator SSGetRankDataByServerId(Coroutine coroutine, RankService _this, SSGetRankDataByServerIdInMessage msg);
        /// <summary>
        /// 通知某个角色开始 链接各游戏服务器了
        /// </summary>
        IEnumerator SSNotifyCharacterOnConnet(Coroutine coroutine, RankService _this, SSNotifyCharacterOnConnetInMessage msg);
        /// <summary>
        /// 通知服务器玩家掉线了
        /// </summary>
        IEnumerator BSNotifyCharacterOnLost(Coroutine coroutine, RankService _this, BSNotifyCharacterOnLostInMessage msg);
        /// <summary>
        /// GM相关 begin  逻辑包放GM工具前
        /// </summary>
        IEnumerator GMCommand(Coroutine coroutine, RankService _this, GMCommandInMessage msg);
        /// <summary>
        /// GM相关 end
        /// 通知修改玩家名字
        /// </summary>
        IEnumerator NodifyModifyPlayerName(Coroutine coroutine, RankService _this, NodifyModifyPlayerNameInMessage msg);
        IEnumerator OnServerStart(Coroutine coroutine, RankService _this);
        IEnumerator OnServerStop(Coroutine coroutine, RankService _this);
    }

    public abstract class RankService : ServerAgentBase
    {

        protected static IRankService mImpl;
        public static IRankCharacterProxy mProxyImpl;
        public void SetServiceImpl(IRankService impl)
        {
            mImpl = impl;
        }
        public void SetProxyImpl(IRankCharacterProxy proxyImpl)
        {
            mProxyImpl = proxyImpl;
        }
        public abstract RankCharacterProxy NewCharacterIn(ulong characterId, ulong clientId);
        public Dictionary<ulong, RankCharacterProxy> Proxys = new Dictionary<ulong, RankCharacterProxy>();
        protected override object GetRequestData(uint p, byte[] list)
        {
            switch(p)
            {
            case 6000:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Rank_PrepareDataForEnterGame_ARG_int32_serverId__>(ms);
                }
                break;
            case 6001:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Rank_PrepareDataForCreateCharacter_ARG_int32_type__>(ms);
                }
                break;
            case 6002:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Rank_PrepareDataForCommonUse_ARG_uint32_placeholder__>(ms);
                }
                break;
            case 6003:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Rank_PrepareDataForLogout_ARG_uint32_placeholder__>(ms);
                }
                break;
            case 6030:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Rank_SBGetAllOnlineCharacterInServer_ARG_int32_serverId__>(ms);
                }
                break;
            case 6031:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Rank_CheckConnected_ARG_uint64_characterId__>(ms);
                }
                break;
            case 6032:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Rank_CheckLost_ARG_uint64_characterId__>(ms);
                }
                break;
            case 6033:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Rank_QueryStatus_ARG_uint32_placeholder__>(ms);
                }
                break;
            case 6040:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Rank_QueryBrokerStatus_ARG_uint32_placeholder__>(ms);
                }
                break;
            case 6041:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Rank_CharacterChangeLevel_ARG_int32_serverId_uint64_guid_string_name_int32_level_int32_exp__>(ms);
                }
                break;
            case 6042:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Rank_CharacterChangeData_ARG_int32_rankType_int32_serverId_uint64_guid_string_name_int64_value__>(ms);
                }
                break;
            case 6043:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Rank_GetRankList_ARG_int32_serverId_int32_rankType__>(ms);
                }
                break;
            case 6044:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Rank_Rank_GetP1vP1List_ARG_int32_serverId_uint64_characterId_string_name__>(ms);
                }
                break;
            case 6045:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Rank_CompareRank_ARG_int32_serverId_uint64_characterId_int32_rank__>(ms);
                }
                break;
            case 6046:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Rank_RankP1vP1FightOver_ARG_int32_serverId_uint64_characterId_uint64_pvpCharacterId_int32_result_string_name_string_pvpName__>(ms);
                }
                break;
            case 6047:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Rank_GMRank_ARG_string_commond__>(ms);
                }
                break;
            case 6048:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Rank_ServerGMCommand_ARG_string_cmd_string_param__>(ms);
                }
                break;
            case 6049:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Rank_ReadyToEnter_ARG_int32_placeholder__>(ms);
                }
                break;
            case 6050:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Rank_SSCharacterChangeDataList_ARG_RankChangeDataList_changes__>(ms);
                }
                break;
            case 6051:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Rank_UpdateServer_ARG_int32_placeholder__>(ms);
                }
                break;
            case 6052:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Rank_GetRankValue_ARG_int32_serverId_int32_rankType_int32_idx__>(ms);
                }
                break;
            case 6053:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Rank_ApplyServerActivityData_ARG_int32_serverId__>(ms);
                }
                break;
            case 6054:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Rank_SSGetServerRankData_ARG_int32_serverId_int32_ranktype__>(ms);
                }
                break;
            case 6055:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Rank_SSGetRankDataByServerId_ARG_Int32Array_serverList_int64_time_int32_ranktype__>(ms);
                }
                break;
            case 6500:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Rank_SBCleanClientCharacterData_ARG_uint64_clientId_uint64_characterId__>(ms);
                }
                break;
            case 6501:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Rank_SSNotifyCharacterOnConnet_ARG_uint64_clientId_uint64_characterId__>(ms);
                }
                break;
            case 6503:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Rank_BSNotifyCharacterOnLost_ARG_uint64_clientId_uint64_characterId__>(ms);
                }
                break;
            case 6504:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Rank_GetFightRankList_ARG_int32_serverId_int32_rankType__>(ms);
                }
                break;
            case 6900:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Rank_GMCommand_ARG_StringArray_commonds__>(ms);
                }
                break;
            case 6901:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Rank_NodifyModifyPlayerName_ARG_int32_serverId_uint64_guid_string_modifyName__>(ms);
                }
                break;
            default:
                break;
            }

            return null;
        }

        public override IEnumerator OnClientConnected(Coroutine coroutine, string target, ulong clientId, ulong characterId, uint packId)
        {
            if (target != "client")
            {
                return null;
            }

            var proxy = NewCharacterIn(characterId, clientId);
            if (proxy != null)
            {
                Proxys[characterId] = proxy;
                return mProxyImpl.OnConnected(coroutine, proxy, packId);
            }
            return null;
        }
        public override IEnumerator OnClientLost(Coroutine coroutine, string target, ulong clientId, ulong characterId, uint packId)
        {
            if (target != "client")
            {
                yield break;
            }
            RankCharacterProxy proxy = null;
            if (Proxys.TryGetValue(characterId, out proxy))
            {
                var co = CoroutineFactory.NewSubroutine(mProxyImpl.OnLost, coroutine, proxy, packId);
                if (co.MoveNext())
                {
                    yield return co;
                }
                Proxys.Remove(characterId);
            }
        }
        public void CharacterId2ClientId(IEnumerable<ulong> ids, List<ulong> known, List<ulong> unknown)
        {
            foreach (var id in ids)
            {
                RankCharacterProxy proxy;
                if (Proxys.TryGetValue(id, out proxy))
                {
                    known.Add(((RankCharacterProxy)proxy).ClientId);
                }
                else
                {
                    unknown.Add(id);
                }
            }
        }
        /// <summary>
        /// 获取排行榜数据
        /// </summary>
        public IEnumerator GetRankList(Coroutine coroutine, GetRankListInMessage msg)
        {
            RankCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.GetRankList(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// GM命令
        /// </summary>
        public IEnumerator GMRank(Coroutine coroutine, GMRankInMessage msg)
        {
            RankCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.GMRank(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 请求某个开服活动榜的数据
        /// </summary>
        public IEnumerator ApplyServerActivityData(Coroutine coroutine, ApplyServerActivityDataInMessage msg)
        {
            RankCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.ApplyServerActivityData(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 获取主城战力排行榜数据
        /// </summary>
        public IEnumerator GetFightRankList(Coroutine coroutine, GetFightRankListInMessage msg)
        {
            RankCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.GetFightRankList(coroutine, proxy, msg);
            }
            return null;
        }

        protected override void DispatchMessage(MessageRecievedEvent evt)
        {
            switch (evt.Message.FuncId)
            {
                case 6000:
                {
                    var msg = new PrepareDataForEnterGameInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.PrepareDataForEnterGame(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 6001:
                {
                    var msg = new PrepareDataForCreateCharacterInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.PrepareDataForCreateCharacter(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 6002:
                {
                    var msg = new PrepareDataForCommonUseInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.PrepareDataForCommonUse(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 6003:
                {
                    var msg = new PrepareDataForLogoutInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.PrepareDataForLogout(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 6031:
                {
                    var msg = new CheckConnectedInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.CheckConnected(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 6032:
                {
                    var msg = new CheckLostInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.CheckLost(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 6033:
                {
                    var msg = new QueryStatusInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.QueryStatus(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 6041:
                {
                    var msg = new CharacterChangeLevelInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.CharacterChangeLevel(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 6042:
                {
                    var msg = new CharacterChangeDataInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.CharacterChangeData(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 6043:
                {
                    var msg = new GetRankListInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => GetRankList(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 6044:
                {
                    var msg = new Rank_GetP1vP1ListInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.Rank_GetP1vP1List(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 6045:
                {
                    var msg = new CompareRankInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.CompareRank(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 6046:
                {
                    var msg = new RankP1vP1FightOverInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.RankP1vP1FightOver(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 6047:
                {
                    var msg = new GMRankInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => GMRank(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 6048:
                {
                    var msg = new ServerGMCommandInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.ServerGMCommand(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 6049:
                {
                    var msg = new ReadyToEnterInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.ReadyToEnter(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 6050:
                {
                    var msg = new SSCharacterChangeDataListInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.SSCharacterChangeDataList(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 6051:
                {
                    var msg = new UpdateServerInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.UpdateServer(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 6052:
                {
                    var msg = new GetRankValueInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.GetRankValue(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 6053:
                {
                    var msg = new ApplyServerActivityDataInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => ApplyServerActivityData(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 6054:
                {
                    var msg = new SSGetServerRankDataInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.SSGetServerRankData(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 6055:
                {
                    var msg = new SSGetRankDataByServerIdInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.SSGetRankDataByServerId(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 6501:
                {
                    var msg = new SSNotifyCharacterOnConnetInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.SSNotifyCharacterOnConnet(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 6503:
                {
                    var msg = new BSNotifyCharacterOnLostInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.BSNotifyCharacterOnLost(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 6504:
                {
                    var msg = new GetFightRankListInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => GetFightRankList(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 6900:
                {
                    var msg = new GMCommandInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.GMCommand(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 6901:
                {
                    var msg = new NodifyModifyPlayerNameInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.NodifyModifyPlayerName(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                default:
                    break;
            }
        }
    }
    public class PrepareDataForEnterGameInMessage : InMessage
    {
        public PrepareDataForEnterGameInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Rank_PrepareDataForEnterGame_ARG_int32_serverId__;

            mResponse = new __RPC_Rank_PrepareDataForEnterGame_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Rank_PrepareDataForEnterGame_ARG_int32_serverId__ Request { get; private set; }

        private __RPC_Rank_PrepareDataForEnterGame_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public PrepareDataForEnterGameInMessage Clone()
        { 
            return new PrepareDataForEnterGameInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class PrepareDataForCreateCharacterInMessage : InMessage
    {
        public PrepareDataForCreateCharacterInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Rank_PrepareDataForCreateCharacter_ARG_int32_type__;

            mResponse = new __RPC_Rank_PrepareDataForCreateCharacter_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Rank_PrepareDataForCreateCharacter_ARG_int32_type__ Request { get; private set; }

        private __RPC_Rank_PrepareDataForCreateCharacter_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public PrepareDataForCreateCharacterInMessage Clone()
        { 
            return new PrepareDataForCreateCharacterInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class PrepareDataForCommonUseInMessage : InMessage
    {
        public PrepareDataForCommonUseInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Rank_PrepareDataForCommonUse_ARG_uint32_placeholder__;

            mResponse = new __RPC_Rank_PrepareDataForCommonUse_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Rank_PrepareDataForCommonUse_ARG_uint32_placeholder__ Request { get; private set; }

        private __RPC_Rank_PrepareDataForCommonUse_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public PrepareDataForCommonUseInMessage Clone()
        { 
            return new PrepareDataForCommonUseInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class PrepareDataForLogoutInMessage : InMessage
    {
        public PrepareDataForLogoutInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Rank_PrepareDataForLogout_ARG_uint32_placeholder__;

            mResponse = new __RPC_Rank_PrepareDataForLogout_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Rank_PrepareDataForLogout_ARG_uint32_placeholder__ Request { get; private set; }

        private __RPC_Rank_PrepareDataForLogout_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public PrepareDataForLogoutInMessage Clone()
        { 
            return new PrepareDataForLogoutInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SBGetAllOnlineCharacterInServerInMessage : InMessage
    {
        public SBGetAllOnlineCharacterInServerInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Rank_SBGetAllOnlineCharacterInServer_ARG_int32_serverId__;

            mResponse = new __RPC_Rank_SBGetAllOnlineCharacterInServer_RET_Uint64Array__();
            mResponse.ReturnValue = new Uint64Array();
        }


        public __RPC_Rank_SBGetAllOnlineCharacterInServer_ARG_int32_serverId__ Request { get; private set; }

        private __RPC_Rank_SBGetAllOnlineCharacterInServer_RET_Uint64Array__ mResponse;
        public Uint64Array Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public SBGetAllOnlineCharacterInServerInMessage Clone()
        { 
            return new SBGetAllOnlineCharacterInServerInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class CheckConnectedInMessage : InMessage
    {
        public CheckConnectedInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Rank_CheckConnected_ARG_uint64_characterId__;

            mResponse = new __RPC_Rank_CheckConnected_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Rank_CheckConnected_ARG_uint64_characterId__ Request { get; private set; }

        private __RPC_Rank_CheckConnected_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public CheckConnectedInMessage Clone()
        { 
            return new CheckConnectedInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class CheckLostInMessage : InMessage
    {
        public CheckLostInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Rank_CheckLost_ARG_uint64_characterId__;

            mResponse = new __RPC_Rank_CheckLost_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Rank_CheckLost_ARG_uint64_characterId__ Request { get; private set; }

        private __RPC_Rank_CheckLost_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public CheckLostInMessage Clone()
        { 
            return new CheckLostInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class QueryStatusInMessage : InMessage
    {
        public QueryStatusInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Rank_QueryStatus_ARG_uint32_placeholder__;

            mResponse = new __RPC_Rank_QueryStatus_RET_RankServerStatus__();
            mResponse.ReturnValue = new RankServerStatus();
        }


        public __RPC_Rank_QueryStatus_ARG_uint32_placeholder__ Request { get; private set; }

        private __RPC_Rank_QueryStatus_RET_RankServerStatus__ mResponse;
        public RankServerStatus Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public QueryStatusInMessage Clone()
        { 
            return new QueryStatusInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class QueryBrokerStatusInMessage : InMessage
    {
        public QueryBrokerStatusInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Rank_QueryBrokerStatus_ARG_uint32_placeholder__;

            mResponse = new __RPC_Rank_QueryBrokerStatus_RET_CommonBrokerStatus__();
            mResponse.ReturnValue = new CommonBrokerStatus();
        }


        public __RPC_Rank_QueryBrokerStatus_ARG_uint32_placeholder__ Request { get; private set; }

        private __RPC_Rank_QueryBrokerStatus_RET_CommonBrokerStatus__ mResponse;
        public CommonBrokerStatus Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public QueryBrokerStatusInMessage Clone()
        { 
            return new QueryBrokerStatusInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class CharacterChangeLevelInMessage : InMessage
    {
        public CharacterChangeLevelInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Rank_CharacterChangeLevel_ARG_int32_serverId_uint64_guid_string_name_int32_level_int32_exp__;

        }


        public __RPC_Rank_CharacterChangeLevel_ARG_int32_serverId_uint64_guid_string_name_int32_level_int32_exp__ Request { get; private set; }

        public CharacterChangeLevelInMessage Clone()
        { 
            return new CharacterChangeLevelInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class CharacterChangeDataInMessage : InMessage
    {
        public CharacterChangeDataInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Rank_CharacterChangeData_ARG_int32_rankType_int32_serverId_uint64_guid_string_name_int64_value__;

        }


        public __RPC_Rank_CharacterChangeData_ARG_int32_rankType_int32_serverId_uint64_guid_string_name_int64_value__ Request { get; private set; }

        public CharacterChangeDataInMessage Clone()
        { 
            return new CharacterChangeDataInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class GetRankListInMessage : InMessage
    {
        public GetRankListInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Rank_GetRankList_ARG_int32_serverId_int32_rankType__;

            mResponse = new __RPC_Rank_GetRankList_RET_RankList__();
            mResponse.ReturnValue = new RankList();
        }


        public __RPC_Rank_GetRankList_ARG_int32_serverId_int32_rankType__ Request { get; private set; }

        private __RPC_Rank_GetRankList_RET_RankList__ mResponse;
        public RankList Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public GetRankListInMessage Clone()
        { 
            return new GetRankListInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class Rank_GetP1vP1ListInMessage : InMessage
    {
        public Rank_GetP1vP1ListInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Rank_Rank_GetP1vP1List_ARG_int32_serverId_uint64_characterId_string_name__;

            mResponse = new __RPC_Rank_Rank_GetP1vP1List_RET_CharacterLadderDataInfo__();
            mResponse.ReturnValue = new CharacterLadderDataInfo();
        }


        public __RPC_Rank_Rank_GetP1vP1List_ARG_int32_serverId_uint64_characterId_string_name__ Request { get; private set; }

        private __RPC_Rank_Rank_GetP1vP1List_RET_CharacterLadderDataInfo__ mResponse;
        public CharacterLadderDataInfo Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public Rank_GetP1vP1ListInMessage Clone()
        { 
            return new Rank_GetP1vP1ListInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class CompareRankInMessage : InMessage
    {
        public CompareRankInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Rank_CompareRank_ARG_int32_serverId_uint64_characterId_int32_rank__;

            mResponse = new __RPC_Rank_CompareRank_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Rank_CompareRank_ARG_int32_serverId_uint64_characterId_int32_rank__ Request { get; private set; }

        private __RPC_Rank_CompareRank_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public CompareRankInMessage Clone()
        { 
            return new CompareRankInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class RankP1vP1FightOverInMessage : InMessage
    {
        public RankP1vP1FightOverInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Rank_RankP1vP1FightOver_ARG_int32_serverId_uint64_characterId_uint64_pvpCharacterId_int32_result_string_name_string_pvpName__;

        }


        public __RPC_Rank_RankP1vP1FightOver_ARG_int32_serverId_uint64_characterId_uint64_pvpCharacterId_int32_result_string_name_string_pvpName__ Request { get; private set; }

        public RankP1vP1FightOverInMessage Clone()
        { 
            return new RankP1vP1FightOverInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class GMRankInMessage : InMessage
    {
        public GMRankInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Rank_GMRank_ARG_string_commond__;

            mResponse = new __RPC_Rank_GMRank_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Rank_GMRank_ARG_string_commond__ Request { get; private set; }

        private __RPC_Rank_GMRank_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public GMRankInMessage Clone()
        { 
            return new GMRankInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class ServerGMCommandInMessage : InMessage
    {
        public ServerGMCommandInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Rank_ServerGMCommand_ARG_string_cmd_string_param__;

        }


        public __RPC_Rank_ServerGMCommand_ARG_string_cmd_string_param__ Request { get; private set; }

        public ServerGMCommandInMessage Clone()
        { 
            return new ServerGMCommandInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class ReadyToEnterInMessage : InMessage
    {
        public ReadyToEnterInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Rank_ReadyToEnter_ARG_int32_placeholder__;

            mResponse = new __RPC_Rank_ReadyToEnter_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Rank_ReadyToEnter_ARG_int32_placeholder__ Request { get; private set; }

        private __RPC_Rank_ReadyToEnter_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public ReadyToEnterInMessage Clone()
        { 
            return new ReadyToEnterInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SSCharacterChangeDataListInMessage : InMessage
    {
        public SSCharacterChangeDataListInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Rank_SSCharacterChangeDataList_ARG_RankChangeDataList_changes__;
            if (Request.Changes == null) throw new ArgumentNullException("Changes is null.");

        }


        public __RPC_Rank_SSCharacterChangeDataList_ARG_RankChangeDataList_changes__ Request { get; private set; }

        public SSCharacterChangeDataListInMessage Clone()
        { 
            return new SSCharacterChangeDataListInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class UpdateServerInMessage : InMessage
    {
        public UpdateServerInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Rank_UpdateServer_ARG_int32_placeholder__;

        }


        public __RPC_Rank_UpdateServer_ARG_int32_placeholder__ Request { get; private set; }

        public UpdateServerInMessage Clone()
        { 
            return new UpdateServerInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class GetRankValueInMessage : InMessage
    {
        public GetRankValueInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Rank_GetRankValue_ARG_int32_serverId_int32_rankType_int32_idx__;

            mResponse = new __RPC_Rank_GetRankValue_RET_int64__();
            mResponse.ReturnValue = new long();
        }


        public __RPC_Rank_GetRankValue_ARG_int32_serverId_int32_rankType_int32_idx__ Request { get; private set; }

        private __RPC_Rank_GetRankValue_RET_int64__ mResponse;
        public long Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public GetRankValueInMessage Clone()
        { 
            return new GetRankValueInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class ApplyServerActivityDataInMessage : InMessage
    {
        public ApplyServerActivityDataInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Rank_ApplyServerActivityData_ARG_int32_serverId__;

            mResponse = new __RPC_Rank_ApplyServerActivityData_RET_ServerActivityDatas__();
            mResponse.ReturnValue = new ServerActivityDatas();
        }


        public __RPC_Rank_ApplyServerActivityData_ARG_int32_serverId__ Request { get; private set; }

        private __RPC_Rank_ApplyServerActivityData_RET_ServerActivityDatas__ mResponse;
        public ServerActivityDatas Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public ApplyServerActivityDataInMessage Clone()
        { 
            return new ApplyServerActivityDataInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SSGetServerRankDataInMessage : InMessage
    {
        public SSGetServerRankDataInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Rank_SSGetServerRankData_ARG_int32_serverId_int32_ranktype__;

            mResponse = new __RPC_Rank_SSGetServerRankData_RET_RankList__();
            mResponse.ReturnValue = new RankList();
        }


        public __RPC_Rank_SSGetServerRankData_ARG_int32_serverId_int32_ranktype__ Request { get; private set; }

        private __RPC_Rank_SSGetServerRankData_RET_RankList__ mResponse;
        public RankList Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public SSGetServerRankDataInMessage Clone()
        { 
            return new SSGetServerRankDataInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SSGetRankDataByServerIdInMessage : InMessage
    {
        public SSGetRankDataByServerIdInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Rank_SSGetRankDataByServerId_ARG_Int32Array_serverList_int64_time_int32_ranktype__;
            if (Request.ServerList == null) throw new ArgumentNullException("ServerList is null.");

            mResponse = new __RPC_Rank_SSGetRankDataByServerId_RET_MsgRankData__();
            mResponse.ReturnValue = new MsgRankData();
        }


        public __RPC_Rank_SSGetRankDataByServerId_ARG_Int32Array_serverList_int64_time_int32_ranktype__ Request { get; private set; }

        private __RPC_Rank_SSGetRankDataByServerId_RET_MsgRankData__ mResponse;
        public MsgRankData Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public SSGetRankDataByServerIdInMessage Clone()
        { 
            return new SSGetRankDataByServerIdInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SBCleanClientCharacterDataInMessage : InMessage
    {
        public SBCleanClientCharacterDataInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Rank_SBCleanClientCharacterData_ARG_uint64_clientId_uint64_characterId__;

        }


        public __RPC_Rank_SBCleanClientCharacterData_ARG_uint64_clientId_uint64_characterId__ Request { get; private set; }

        public SBCleanClientCharacterDataInMessage Clone()
        { 
            return new SBCleanClientCharacterDataInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class SSNotifyCharacterOnConnetInMessage : InMessage
    {
        public SSNotifyCharacterOnConnetInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Rank_SSNotifyCharacterOnConnet_ARG_uint64_clientId_uint64_characterId__;

            mResponse = new __RPC_Rank_SSNotifyCharacterOnConnet_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Rank_SSNotifyCharacterOnConnet_ARG_uint64_clientId_uint64_characterId__ Request { get; private set; }

        private __RPC_Rank_SSNotifyCharacterOnConnet_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public SSNotifyCharacterOnConnetInMessage Clone()
        { 
            return new SSNotifyCharacterOnConnetInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class BSNotifyCharacterOnLostInMessage : InMessage
    {
        public BSNotifyCharacterOnLostInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Rank_BSNotifyCharacterOnLost_ARG_uint64_clientId_uint64_characterId__;

        }


        public __RPC_Rank_BSNotifyCharacterOnLost_ARG_uint64_clientId_uint64_characterId__ Request { get; private set; }

        public BSNotifyCharacterOnLostInMessage Clone()
        { 
            return new BSNotifyCharacterOnLostInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class GetFightRankListInMessage : InMessage
    {
        public GetFightRankListInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Rank_GetFightRankList_ARG_int32_serverId_int32_rankType__;

            mResponse = new __RPC_Rank_GetFightRankList_RET_RankList__();
            mResponse.ReturnValue = new RankList();
        }


        public __RPC_Rank_GetFightRankList_ARG_int32_serverId_int32_rankType__ Request { get; private set; }

        private __RPC_Rank_GetFightRankList_RET_RankList__ mResponse;
        public RankList Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public GetFightRankListInMessage Clone()
        { 
            return new GetFightRankListInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class GMCommandInMessage : InMessage
    {
        public GMCommandInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Rank_GMCommand_ARG_StringArray_commonds__;
            if (Request.Commonds == null) throw new ArgumentNullException("Commonds is null.");

            mResponse = new __RPC_Rank_GMCommand_RET_Int32Array__();
            mResponse.ReturnValue = new Int32Array();
        }


        public __RPC_Rank_GMCommand_ARG_StringArray_commonds__ Request { get; private set; }

        private __RPC_Rank_GMCommand_RET_Int32Array__ mResponse;
        public Int32Array Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public GMCommandInMessage Clone()
        { 
            return new GMCommandInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class NodifyModifyPlayerNameInMessage : InMessage
    {
        public NodifyModifyPlayerNameInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Rank_NodifyModifyPlayerName_ARG_int32_serverId_uint64_guid_string_modifyName__;

        }


        public __RPC_Rank_NodifyModifyPlayerName_ARG_int32_serverId_uint64_guid_string_modifyName__ Request { get; private set; }

        public NodifyModifyPlayerNameInMessage Clone()
        { 
            return new NodifyModifyPlayerNameInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public interface IRankCharacterProxy
    {
        /// <summary>
        /// 获取排行榜数据
        /// </summary>
        IEnumerator GetRankList(Coroutine coroutine, RankCharacterProxy _this, GetRankListInMessage msg);
        /// <summary>
        /// GM命令
        /// </summary>
        IEnumerator GMRank(Coroutine coroutine, RankCharacterProxy _this, GMRankInMessage msg);
        /// <summary>
        /// 请求某个开服活动榜的数据
        /// </summary>
        IEnumerator ApplyServerActivityData(Coroutine coroutine, RankCharacterProxy _this, ApplyServerActivityDataInMessage msg);
        /// <summary>
        /// 获取主城战力排行榜数据
        /// </summary>
        IEnumerator GetFightRankList(Coroutine coroutine, RankCharacterProxy _this, GetFightRankListInMessage msg);
        IEnumerator OnConnected(Coroutine coroutine, RankCharacterProxy _this, uint packId);
        IEnumerator OnLost(Coroutine coroutine, RankCharacterProxy _this, uint packId);
        bool OnSyncRequested(RankCharacterProxy _this, ulong characterId, uint syncId);
    }

    public class RankCharacterProxy
    {
        public ulong CharacterId { get; private set; }
        public ulong ClientId { get; private set; }
        public RankService Service { get; private set; }

        public RankCharacterProxy(RankService service, ulong characterId, ulong clientId)
        {
            CharacterId = characterId;
            ClientId = clientId;
            Service = service;
            mSyncCenter.ServiceType = ServiceType.Logic;
        }

        private DataSyncCenter mSyncCenter = new DataSyncCenter();
        public DataSyncCenter SyncCenter { get { return mSyncCenter; } }

        public void Sync()
        {
            Service.Sync(ClientId, mSyncCenter);
        }

        public object Wait(Coroutine coroutine, TimeSpan timeSpan)
        {
            return Service.Wait(coroutine, timeSpan);
        }
    }
}
