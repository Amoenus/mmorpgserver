// Generated by the rpc compiler.  DO NOT EDIT!
using System;
using System.Collections;
using System.IO;
using Scorpion;
using System.Collections.Generic;
using ProtoBuf;
using DataContract;

#pragma warning disable 0162,0108
namespace GameMasterServerService
{

    public interface IGameMasterService
    {
        /// <summary>
        /// 检查客户端是否已经连接到对应服务器
        /// </summary>
        IEnumerator CheckConnected(Coroutine coroutine, GameMasterService _this, CheckConnectedInMessage msg);
        /// <summary>
        /// </summary>
        IEnumerator Login(Coroutine coroutine, GameMasterService _this, LoginInMessage msg);
        /// <summary>
        /// 通过角色名称查找角色信息
        /// </summary>
        IEnumerator GetPlayerDataByCharacterName(Coroutine coroutine, GameMasterService _this, GetPlayerDataByCharacterNameInMessage msg);
        /// <summary>
        /// </summary>
        IEnumerator GetPlayerDataByCharacterId(Coroutine coroutine, GameMasterService _this, GetPlayerDataByCharacterIdInMessage msg);
        /// <summary>
        /// </summary>
        IEnumerator GetPlayerDataByPlayerName(Coroutine coroutine, GameMasterService _this, GetPlayerDataByPlayerNameInMessage msg);
        /// <summary>
        /// </summary>
        IEnumerator GetPlayerDataByPlayerId(Coroutine coroutine, GameMasterService _this, GetPlayerDataByPlayerIdInMessage msg);
        /// <summary>
        /// </summary>
        IEnumerator GetCharacterDataById(Coroutine coroutine, GameMasterService _this, GetCharacterDataByIdInMessage msg);
        /// <summary>
        /// </summary>
        IEnumerator SendMailsById(Coroutine coroutine, GameMasterService _this, SendMailsByIdInMessage msg);
        /// <summary>
        /// </summary>
        IEnumerator SendMailsByName(Coroutine coroutine, GameMasterService _this, SendMailsByNameInMessage msg);
        /// <summary>
        /// </summary>
        IEnumerator SendMailsToServers(Coroutine coroutine, GameMasterService _this, SendMailsToServersInMessage msg);
        /// <summary>
        /// </summary>
        IEnumerator GetWaitingMails(Coroutine coroutine, GameMasterService _this, GetWaitingMailsInMessage msg);
        /// <summary>
        /// </summary>
        IEnumerator DelWaitingMails(Coroutine coroutine, GameMasterService _this, DelWaitingMailsInMessage msg);
        /// <summary>
        /// </summary>
        IEnumerator GetWaitingBroadcasts(Coroutine coroutine, GameMasterService _this, GetWaitingBroadcastsInMessage msg);
        /// <summary>
        /// </summary>
        IEnumerator DelWaitingBroadcasts(Coroutine coroutine, GameMasterService _this, DelWaitingBroadcastsInMessage msg);
        /// <summary>
        /// </summary>
        IEnumerator KickCharacter(Coroutine coroutine, GameMasterService _this, KickCharacterInMessage msg);
        /// <summary>
        /// </summary>
        IEnumerator Broadcast(Coroutine coroutine, GameMasterService _this, BroadcastInMessage msg);
        /// <summary>
        /// </summary>
        IEnumerator CreateGmAccount(Coroutine coroutine, GameMasterService _this, CreateGmAccountInMessage msg);
        /// <summary>
        /// </summary>
        IEnumerator UpdateServer(Coroutine coroutine, GameMasterService _this, UpdateServerInMessage msg);
        /// <summary>
        /// </summary>
        IEnumerator UpdateServerAll(Coroutine coroutine, GameMasterService _this, UpdateServerAllInMessage msg);
        /// <summary>
        /// </summary>
        IEnumerator ReloadTable(Coroutine coroutine, GameMasterService _this, ReloadTableInMessage msg);
        /// <summary>
        /// 修改角色的Flag
        /// </summary>
        IEnumerator SetFlag(Coroutine coroutine, GameMasterService _this, SetFlagInMessage msg);
        /// <summary>
        /// 修改角色的Exdata
        /// </summary>
        IEnumerator SetExdata(Coroutine coroutine, GameMasterService _this, SetExdataInMessage msg);
        /// <summary>
        /// 获得某角色某天的日志，date format "yyyy-MM-dd"
        /// </summary>
        IEnumerator GetLog(Coroutine coroutine, GameMasterService _this, GetLogInMessage msg);
        /// <summary>
        /// 角色转服
        /// </summary>
        IEnumerator ChangeServer(Coroutine coroutine, GameMasterService _this, ChangeServerInMessage msg);
        /// <summary>
        /// gm命令
        /// </summary>
        IEnumerator GMCommand(Coroutine coroutine, GameMasterService _this, GMCommandInMessage msg);
        /// <summary>
        /// </summary>
        IEnumerator CharacterConnected(Coroutine coroutine, GameMasterService _this, CharacterConnectedInMessage msg);
        /// <summary>
        /// gm server接受命令的接口
        /// </summary>
        IEnumerator GenGiftCode(Coroutine coroutine, GameMasterService _this, GenGiftCodeInMessage msg);
        /// <summary>
        /// </summary>
        IEnumerator GetServerCharacterCount(Coroutine coroutine, GameMasterService _this, GetServerCharacterCountInMessage msg);
        /// <summary>
        /// </summary>
        IEnumerator GetCharacterLogicDbInfo(Coroutine coroutine, GameMasterService _this, GetCharacterLogicDbInfoInMessage msg);
        /// <summary>
        /// 动态激活活动
        /// </summary>
        IEnumerator AddAutoActvity(Coroutine coroutine, GameMasterService _this, AddAutoActvityInMessage msg);
        /// <summary>
        /// 获取排行榜数据
        /// </summary>
        IEnumerator GetServerRankData(Coroutine coroutine, GameMasterService _this, GetServerRankDataInMessage msg);
        /// <summary>
        /// 获取玩家副本次数
        /// </summary>
        IEnumerator GetTodayFunbenCount(Coroutine coroutine, GameMasterService _this, GetTodayFunbenCountInMessage msg);
        /// <summary>
        /// 玩家禁言
        /// </summary>
        IEnumerator Silence(Coroutine coroutine, GameMasterService _this, SilenceInMessage msg);
        /// <summary>
        /// 封账号
        /// </summary>
        IEnumerator LockAccount(Coroutine coroutine, GameMasterService _this, LockAccountInMessage msg);
        /// <summary>
        /// 查找账号下的角色
        /// </summary>
        IEnumerator GetServerCharacter(Coroutine coroutine, GameMasterService _this, GetServerCharacterInMessage msg);
        /// <summary>
        /// </summary>
        IEnumerator SendQuestion(Coroutine coroutine, GameMasterService _this, SendQuestionInMessage msg);
        /// <summary>
        /// </summary>
        IEnumerator TakeOldPlayerReward(Coroutine coroutine, GameMasterService _this, TakeOldPlayerRewardInMessage msg);
        /// <summary>
        /// </summary>
        IEnumerator UseGiftCode(Coroutine coroutine, GameMasterService _this, UseGiftCodeInMessage msg);
        IEnumerator OnServerStart(Coroutine coroutine, GameMasterService _this);
        IEnumerator OnServerStop(Coroutine coroutine, GameMasterService _this);
    }

    public abstract class GameMasterService : ServerAgentBase
    {

        protected static IGameMasterService mImpl;
        public static IGameMasterCharacterProxy mProxyImpl;
        public void SetServiceImpl(IGameMasterService impl)
        {
            mImpl = impl;
        }
        public void SetProxyImpl(IGameMasterCharacterProxy proxyImpl)
        {
            mProxyImpl = proxyImpl;
        }
        public abstract GameMasterCharacterProxy NewCharacterIn(ulong characterId, ulong clientId);
        public Dictionary<ulong, GameMasterCharacterProxy> Proxys = new Dictionary<ulong, GameMasterCharacterProxy>();
        protected override object GetRequestData(uint p, byte[] list)
        {
            switch(p)
            {
            case 9000:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_GameMaster_CheckConnected_ARG_uint64_characterId__>(ms);
                }
                break;
            case 9001:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_GameMaster_Login_ARG_string_name_string_password__>(ms);
                }
                break;
            case 9002:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_GameMaster_GetPlayerDataByCharacterName_ARG_string_name__>(ms);
                }
                break;
            case 9003:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_GameMaster_GetPlayerDataByCharacterId_ARG_uint64_id__>(ms);
                }
                break;
            case 9004:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_GameMaster_GetPlayerDataByPlayerName_ARG_string_name__>(ms);
                }
                break;
            case 9005:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_GameMaster_GetPlayerDataByPlayerId_ARG_uint64_id__>(ms);
                }
                break;
            case 9006:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_GameMaster_GetCharacterDataById_ARG_uint64_characterId__>(ms);
                }
                break;
            case 9008:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_GameMaster_SendMailsById_ARG_Uint64Array_ids_string_title_string_content_Dict_int_int_Data_items_int64_time__>(ms);
                }
                break;
            case 9009:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_GameMaster_SendMailsByName_ARG_StringArray_names_string_title_string_content_Dict_int_int_Data_items_int64_time__>(ms);
                }
                break;
            case 9010:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_GameMaster_SendMailsToServers_ARG_Uint32Array_servers_string_title_string_content_Dict_int_int_Data_items_int64_time__>(ms);
                }
                break;
            case 9011:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_GameMaster_GetWaitingMails_ARG_int32_placeholder__>(ms);
                }
                break;
            case 9012:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_GameMaster_DelWaitingMails_ARG_Uint64Array_ids__>(ms);
                }
                break;
            case 9013:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_GameMaster_GetWaitingBroadcasts_ARG_int32_placeholder__>(ms);
                }
                break;
            case 9014:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_GameMaster_DelWaitingBroadcasts_ARG_Uint64Array_ids__>(ms);
                }
                break;
            case 9015:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_GameMaster_KickCharacter_ARG_uint64_characterId_string_name__>(ms);
                }
                break;
            case 9016:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_GameMaster_Broadcast_ARG_string_content_Uint32Array_servers_int64_time__>(ms);
                }
                break;
            case 9017:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_GameMaster_CreateGmAccount_ARG_string_name_string_pwd_int32_priority__>(ms);
                }
                break;
            case 9018:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_GameMaster_UpdateServer_ARG_int32_placeholder__>(ms);
                }
                break;
            case 9019:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_GameMaster_UpdateServerAll_ARG_int32_placeholder__>(ms);
                }
                break;
            case 9020:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_GameMaster_ReloadTable_ARG_string_tableName__>(ms);
                }
                break;
            case 9021:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_GameMaster_SetFlag_ARG_uint64_characterId_Dict_int_int_Data_changes__>(ms);
                }
                break;
            case 9022:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_GameMaster_SetExdata_ARG_uint64_characterId_Dict_int_int_Data_changes__>(ms);
                }
                break;
            case 9023:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_GameMaster_GetLog_ARG_uint64_characterId_string_date__>(ms);
                }
                break;
            case 9024:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_GameMaster_ChangeServer_ARG_uint64_characterId_int32_serverId__>(ms);
                }
                break;
            case 9026:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_GameMaster_GMCommand_ARG_uint64_id_string_command__>(ms);
                }
                break;
            case 9027:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_GameMaster_CharacterConnected_ARG_uint64_id_int32_serverType__>(ms);
                }
                break;
            case 9028:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_GameMaster_GenGiftCode_ARG_int32_type_int32_count_int32_channelId__>(ms);
                }
                break;
            case 9029:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_GameMaster_GetServerCharacterCount_ARG_uint64_id_int32_serverType__>(ms);
                }
                break;
            case 9030:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_GameMaster_GetCharacterLogicDbInfo_ARG_uint64_characterId__>(ms);
                }
                break;
            case 9031:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_GameMaster_AddAutoActvity_ARG_int32_fubenId_int64_startTime_int64_endTime_int32_count__>(ms);
                }
                break;
            case 9032:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_GameMaster_GetServerRankData_ARG_int32_serverId_int32_ranktype__>(ms);
                }
                break;
            case 9033:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_GameMaster_GetTodayFunbenCount_ARG_int32_serverId_uint64_characterId_int32_selecttype__>(ms);
                }
                break;
            case 9034:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_GameMaster_Silence_ARG_uint64_characterId_uint32_mask__>(ms);
                }
                break;
            case 9035:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_GameMaster_LockAccount_ARG_uint64_playerId_int64_endTime__>(ms);
                }
                break;
            case 9036:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_GameMaster_GetServerCharacter_ARG_string_accoutName__>(ms);
                }
                break;
            case 9037:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_GameMaster_SendQuestion_ARG_MailQuestion_mail__>(ms);
                }
                break;
            case 9038:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_GameMaster_TakeOldPlayerReward_ARG_uint64_clientId__>(ms);
                }
                break;
            case 9039:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_GameMaster_UseGiftCode_ARG_string_code_int32_channelId__>(ms);
                }
                break;
            default:
                break;
            }

            return null;
        }

        public override IEnumerator OnClientConnected(Coroutine coroutine, string target, ulong clientId, ulong characterId, uint packId)
        {
            if (target != "client")
            {
                return null;
            }

            var proxy = NewCharacterIn(characterId, clientId);
            if (proxy != null)
            {
                Proxys[characterId] = proxy;
                return mProxyImpl.OnConnected(coroutine, proxy, packId);
            }
            return null;
        }
        public override IEnumerator OnClientLost(Coroutine coroutine, string target, ulong clientId, ulong characterId, uint packId)
        {
            if (target != "client")
            {
                yield break;
            }
            GameMasterCharacterProxy proxy = null;
            if (Proxys.TryGetValue(characterId, out proxy))
            {
                var co = CoroutineFactory.NewSubroutine(mProxyImpl.OnLost, coroutine, proxy, packId);
                if (co.MoveNext())
                {
                    yield return co;
                }
                Proxys.Remove(characterId);
            }
        }
        public void CharacterId2ClientId(IEnumerable<ulong> ids, List<ulong> known, List<ulong> unknown)
        {
            foreach (var id in ids)
            {
                GameMasterCharacterProxy proxy;
                if (Proxys.TryGetValue(id, out proxy))
                {
                    known.Add(((GameMasterCharacterProxy)proxy).ClientId);
                }
                else
                {
                    unknown.Add(id);
                }
            }
        }

        protected override void DispatchMessage(MessageRecievedEvent evt)
        {
            switch (evt.Message.FuncId)
            {
                case 9000:
                {
                    var msg = new CheckConnectedInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.CheckConnected(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 9001:
                {
                    var msg = new LoginInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.Login(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 9002:
                {
                    var msg = new GetPlayerDataByCharacterNameInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.GetPlayerDataByCharacterName(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 9003:
                {
                    var msg = new GetPlayerDataByCharacterIdInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.GetPlayerDataByCharacterId(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 9004:
                {
                    var msg = new GetPlayerDataByPlayerNameInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.GetPlayerDataByPlayerName(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 9005:
                {
                    var msg = new GetPlayerDataByPlayerIdInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.GetPlayerDataByPlayerId(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 9006:
                {
                    var msg = new GetCharacterDataByIdInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.GetCharacterDataById(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 9008:
                {
                    var msg = new SendMailsByIdInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.SendMailsById(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 9009:
                {
                    var msg = new SendMailsByNameInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.SendMailsByName(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 9010:
                {
                    var msg = new SendMailsToServersInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.SendMailsToServers(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 9011:
                {
                    var msg = new GetWaitingMailsInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.GetWaitingMails(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 9012:
                {
                    var msg = new DelWaitingMailsInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.DelWaitingMails(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 9013:
                {
                    var msg = new GetWaitingBroadcastsInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.GetWaitingBroadcasts(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 9014:
                {
                    var msg = new DelWaitingBroadcastsInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.DelWaitingBroadcasts(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 9015:
                {
                    var msg = new KickCharacterInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.KickCharacter(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 9016:
                {
                    var msg = new BroadcastInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.Broadcast(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 9017:
                {
                    var msg = new CreateGmAccountInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.CreateGmAccount(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 9018:
                {
                    var msg = new UpdateServerInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.UpdateServer(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 9019:
                {
                    var msg = new UpdateServerAllInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.UpdateServerAll(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 9020:
                {
                    var msg = new ReloadTableInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.ReloadTable(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 9021:
                {
                    var msg = new SetFlagInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.SetFlag(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 9022:
                {
                    var msg = new SetExdataInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.SetExdata(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 9023:
                {
                    var msg = new GetLogInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.GetLog(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 9024:
                {
                    var msg = new ChangeServerInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.ChangeServer(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 9026:
                {
                    var msg = new GMCommandInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.GMCommand(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 9027:
                {
                    var msg = new CharacterConnectedInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.CharacterConnected(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 9028:
                {
                    var msg = new GenGiftCodeInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.GenGiftCode(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 9029:
                {
                    var msg = new GetServerCharacterCountInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.GetServerCharacterCount(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 9030:
                {
                    var msg = new GetCharacterLogicDbInfoInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.GetCharacterLogicDbInfo(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 9031:
                {
                    var msg = new AddAutoActvityInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.AddAutoActvity(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 9032:
                {
                    var msg = new GetServerRankDataInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.GetServerRankData(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 9033:
                {
                    var msg = new GetTodayFunbenCountInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.GetTodayFunbenCount(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 9034:
                {
                    var msg = new SilenceInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.Silence(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 9035:
                {
                    var msg = new LockAccountInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.LockAccount(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 9036:
                {
                    var msg = new GetServerCharacterInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.GetServerCharacter(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 9037:
                {
                    var msg = new SendQuestionInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.SendQuestion(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 9038:
                {
                    var msg = new TakeOldPlayerRewardInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.TakeOldPlayerReward(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 9039:
                {
                    var msg = new UseGiftCodeInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.UseGiftCode(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                default:
                    break;
            }
        }
    }
    public class CheckConnectedInMessage : InMessage
    {
        public CheckConnectedInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_GameMaster_CheckConnected_ARG_uint64_characterId__;

            mResponse = new __RPC_GameMaster_CheckConnected_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_GameMaster_CheckConnected_ARG_uint64_characterId__ Request { get; private set; }

        private __RPC_GameMaster_CheckConnected_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public CheckConnectedInMessage Clone()
        { 
            return new CheckConnectedInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class LoginInMessage : InMessage
    {
        public LoginInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_GameMaster_Login_ARG_string_name_string_password__;

            mResponse = new __RPC_GameMaster_Login_RET_GMAccount__();
            mResponse.ReturnValue = new GMAccount();
        }


        public __RPC_GameMaster_Login_ARG_string_name_string_password__ Request { get; private set; }

        private __RPC_GameMaster_Login_RET_GMAccount__ mResponse;
        public GMAccount Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public LoginInMessage Clone()
        { 
            return new LoginInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class GetPlayerDataByCharacterNameInMessage : InMessage
    {
        public GetPlayerDataByCharacterNameInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_GameMaster_GetPlayerDataByCharacterName_ARG_string_name__;

            mResponse = new __RPC_GameMaster_GetPlayerDataByCharacterName_RET_GMPlayerInfoMsg__();
            mResponse.ReturnValue = new GMPlayerInfoMsg();
        }


        public __RPC_GameMaster_GetPlayerDataByCharacterName_ARG_string_name__ Request { get; private set; }

        private __RPC_GameMaster_GetPlayerDataByCharacterName_RET_GMPlayerInfoMsg__ mResponse;
        public GMPlayerInfoMsg Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public GetPlayerDataByCharacterNameInMessage Clone()
        { 
            return new GetPlayerDataByCharacterNameInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class GetPlayerDataByCharacterIdInMessage : InMessage
    {
        public GetPlayerDataByCharacterIdInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_GameMaster_GetPlayerDataByCharacterId_ARG_uint64_id__;

            mResponse = new __RPC_GameMaster_GetPlayerDataByCharacterId_RET_GMPlayerInfoMsg__();
            mResponse.ReturnValue = new GMPlayerInfoMsg();
        }


        public __RPC_GameMaster_GetPlayerDataByCharacterId_ARG_uint64_id__ Request { get; private set; }

        private __RPC_GameMaster_GetPlayerDataByCharacterId_RET_GMPlayerInfoMsg__ mResponse;
        public GMPlayerInfoMsg Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public GetPlayerDataByCharacterIdInMessage Clone()
        { 
            return new GetPlayerDataByCharacterIdInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class GetPlayerDataByPlayerNameInMessage : InMessage
    {
        public GetPlayerDataByPlayerNameInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_GameMaster_GetPlayerDataByPlayerName_ARG_string_name__;

            mResponse = new __RPC_GameMaster_GetPlayerDataByPlayerName_RET_GMPlayerInfoMsg__();
            mResponse.ReturnValue = new GMPlayerInfoMsg();
        }


        public __RPC_GameMaster_GetPlayerDataByPlayerName_ARG_string_name__ Request { get; private set; }

        private __RPC_GameMaster_GetPlayerDataByPlayerName_RET_GMPlayerInfoMsg__ mResponse;
        public GMPlayerInfoMsg Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public GetPlayerDataByPlayerNameInMessage Clone()
        { 
            return new GetPlayerDataByPlayerNameInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class GetPlayerDataByPlayerIdInMessage : InMessage
    {
        public GetPlayerDataByPlayerIdInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_GameMaster_GetPlayerDataByPlayerId_ARG_uint64_id__;

            mResponse = new __RPC_GameMaster_GetPlayerDataByPlayerId_RET_GMPlayerInfoMsg__();
            mResponse.ReturnValue = new GMPlayerInfoMsg();
        }


        public __RPC_GameMaster_GetPlayerDataByPlayerId_ARG_uint64_id__ Request { get; private set; }

        private __RPC_GameMaster_GetPlayerDataByPlayerId_RET_GMPlayerInfoMsg__ mResponse;
        public GMPlayerInfoMsg Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public GetPlayerDataByPlayerIdInMessage Clone()
        { 
            return new GetPlayerDataByPlayerIdInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class GetCharacterDataByIdInMessage : InMessage
    {
        public GetCharacterDataByIdInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_GameMaster_GetCharacterDataById_ARG_uint64_characterId__;

            mResponse = new __RPC_GameMaster_GetCharacterDataById_RET_GMCharacterDetailInfo__();
            mResponse.ReturnValue = new GMCharacterDetailInfo();
        }


        public __RPC_GameMaster_GetCharacterDataById_ARG_uint64_characterId__ Request { get; private set; }

        private __RPC_GameMaster_GetCharacterDataById_RET_GMCharacterDetailInfo__ mResponse;
        public GMCharacterDetailInfo Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public GetCharacterDataByIdInMessage Clone()
        { 
            return new GetCharacterDataByIdInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SendMailsByIdInMessage : InMessage
    {
        public SendMailsByIdInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_GameMaster_SendMailsById_ARG_Uint64Array_ids_string_title_string_content_Dict_int_int_Data_items_int64_time__;
            if (Request.Ids == null) throw new ArgumentNullException("Ids is null.");
            if (Request.Items == null) throw new ArgumentNullException("Items is null.");

            mResponse = new __RPC_GameMaster_SendMailsById_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_GameMaster_SendMailsById_ARG_Uint64Array_ids_string_title_string_content_Dict_int_int_Data_items_int64_time__ Request { get; private set; }

        private __RPC_GameMaster_SendMailsById_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public SendMailsByIdInMessage Clone()
        { 
            return new SendMailsByIdInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SendMailsByNameInMessage : InMessage
    {
        public SendMailsByNameInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_GameMaster_SendMailsByName_ARG_StringArray_names_string_title_string_content_Dict_int_int_Data_items_int64_time__;
            if (Request.Names == null) throw new ArgumentNullException("Names is null.");
            if (Request.Items == null) throw new ArgumentNullException("Items is null.");

            mResponse = new __RPC_GameMaster_SendMailsByName_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_GameMaster_SendMailsByName_ARG_StringArray_names_string_title_string_content_Dict_int_int_Data_items_int64_time__ Request { get; private set; }

        private __RPC_GameMaster_SendMailsByName_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public SendMailsByNameInMessage Clone()
        { 
            return new SendMailsByNameInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SendMailsToServersInMessage : InMessage
    {
        public SendMailsToServersInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_GameMaster_SendMailsToServers_ARG_Uint32Array_servers_string_title_string_content_Dict_int_int_Data_items_int64_time__;
            if (Request.Servers == null) throw new ArgumentNullException("Servers is null.");
            if (Request.Items == null) throw new ArgumentNullException("Items is null.");

            mResponse = new __RPC_GameMaster_SendMailsToServers_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_GameMaster_SendMailsToServers_ARG_Uint32Array_servers_string_title_string_content_Dict_int_int_Data_items_int64_time__ Request { get; private set; }

        private __RPC_GameMaster_SendMailsToServers_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public SendMailsToServersInMessage Clone()
        { 
            return new SendMailsToServersInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class GetWaitingMailsInMessage : InMessage
    {
        public GetWaitingMailsInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_GameMaster_GetWaitingMails_ARG_int32_placeholder__;

            mResponse = new __RPC_GameMaster_GetWaitingMails_RET_GmMailList__();
            mResponse.ReturnValue = new GmMailList();
        }


        public __RPC_GameMaster_GetWaitingMails_ARG_int32_placeholder__ Request { get; private set; }

        private __RPC_GameMaster_GetWaitingMails_RET_GmMailList__ mResponse;
        public GmMailList Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public GetWaitingMailsInMessage Clone()
        { 
            return new GetWaitingMailsInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class DelWaitingMailsInMessage : InMessage
    {
        public DelWaitingMailsInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_GameMaster_DelWaitingMails_ARG_Uint64Array_ids__;
            if (Request.Ids == null) throw new ArgumentNullException("Ids is null.");

            mResponse = new __RPC_GameMaster_DelWaitingMails_RET_GmMailList__();
            mResponse.ReturnValue = new GmMailList();
        }


        public __RPC_GameMaster_DelWaitingMails_ARG_Uint64Array_ids__ Request { get; private set; }

        private __RPC_GameMaster_DelWaitingMails_RET_GmMailList__ mResponse;
        public GmMailList Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public DelWaitingMailsInMessage Clone()
        { 
            return new DelWaitingMailsInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class GetWaitingBroadcastsInMessage : InMessage
    {
        public GetWaitingBroadcastsInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_GameMaster_GetWaitingBroadcasts_ARG_int32_placeholder__;

            mResponse = new __RPC_GameMaster_GetWaitingBroadcasts_RET_GmBroadcastList__();
            mResponse.ReturnValue = new GmBroadcastList();
        }


        public __RPC_GameMaster_GetWaitingBroadcasts_ARG_int32_placeholder__ Request { get; private set; }

        private __RPC_GameMaster_GetWaitingBroadcasts_RET_GmBroadcastList__ mResponse;
        public GmBroadcastList Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public GetWaitingBroadcastsInMessage Clone()
        { 
            return new GetWaitingBroadcastsInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class DelWaitingBroadcastsInMessage : InMessage
    {
        public DelWaitingBroadcastsInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_GameMaster_DelWaitingBroadcasts_ARG_Uint64Array_ids__;
            if (Request.Ids == null) throw new ArgumentNullException("Ids is null.");

            mResponse = new __RPC_GameMaster_DelWaitingBroadcasts_RET_GmBroadcastList__();
            mResponse.ReturnValue = new GmBroadcastList();
        }


        public __RPC_GameMaster_DelWaitingBroadcasts_ARG_Uint64Array_ids__ Request { get; private set; }

        private __RPC_GameMaster_DelWaitingBroadcasts_RET_GmBroadcastList__ mResponse;
        public GmBroadcastList Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public DelWaitingBroadcastsInMessage Clone()
        { 
            return new DelWaitingBroadcastsInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class KickCharacterInMessage : InMessage
    {
        public KickCharacterInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_GameMaster_KickCharacter_ARG_uint64_characterId_string_name__;

            mResponse = new __RPC_GameMaster_KickCharacter_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_GameMaster_KickCharacter_ARG_uint64_characterId_string_name__ Request { get; private set; }

        private __RPC_GameMaster_KickCharacter_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public KickCharacterInMessage Clone()
        { 
            return new KickCharacterInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class BroadcastInMessage : InMessage
    {
        public BroadcastInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_GameMaster_Broadcast_ARG_string_content_Uint32Array_servers_int64_time__;
            if (Request.Servers == null) throw new ArgumentNullException("Servers is null.");

            mResponse = new __RPC_GameMaster_Broadcast_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_GameMaster_Broadcast_ARG_string_content_Uint32Array_servers_int64_time__ Request { get; private set; }

        private __RPC_GameMaster_Broadcast_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public BroadcastInMessage Clone()
        { 
            return new BroadcastInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class CreateGmAccountInMessage : InMessage
    {
        public CreateGmAccountInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_GameMaster_CreateGmAccount_ARG_string_name_string_pwd_int32_priority__;

            mResponse = new __RPC_GameMaster_CreateGmAccount_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_GameMaster_CreateGmAccount_ARG_string_name_string_pwd_int32_priority__ Request { get; private set; }

        private __RPC_GameMaster_CreateGmAccount_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public CreateGmAccountInMessage Clone()
        { 
            return new CreateGmAccountInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class UpdateServerInMessage : InMessage
    {
        public UpdateServerInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_GameMaster_UpdateServer_ARG_int32_placeholder__;

        }


        public __RPC_GameMaster_UpdateServer_ARG_int32_placeholder__ Request { get; private set; }

        public UpdateServerInMessage Clone()
        { 
            return new UpdateServerInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class UpdateServerAllInMessage : InMessage
    {
        public UpdateServerAllInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_GameMaster_UpdateServerAll_ARG_int32_placeholder__;

            mResponse = new __RPC_GameMaster_UpdateServerAll_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_GameMaster_UpdateServerAll_ARG_int32_placeholder__ Request { get; private set; }

        private __RPC_GameMaster_UpdateServerAll_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public UpdateServerAllInMessage Clone()
        { 
            return new UpdateServerAllInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class ReloadTableInMessage : InMessage
    {
        public ReloadTableInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_GameMaster_ReloadTable_ARG_string_tableName__;

            mResponse = new __RPC_GameMaster_ReloadTable_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_GameMaster_ReloadTable_ARG_string_tableName__ Request { get; private set; }

        private __RPC_GameMaster_ReloadTable_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public ReloadTableInMessage Clone()
        { 
            return new ReloadTableInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SetFlagInMessage : InMessage
    {
        public SetFlagInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_GameMaster_SetFlag_ARG_uint64_characterId_Dict_int_int_Data_changes__;
            if (Request.Changes == null) throw new ArgumentNullException("Changes is null.");

            mResponse = new __RPC_GameMaster_SetFlag_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_GameMaster_SetFlag_ARG_uint64_characterId_Dict_int_int_Data_changes__ Request { get; private set; }

        private __RPC_GameMaster_SetFlag_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public SetFlagInMessage Clone()
        { 
            return new SetFlagInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SetExdataInMessage : InMessage
    {
        public SetExdataInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_GameMaster_SetExdata_ARG_uint64_characterId_Dict_int_int_Data_changes__;
            if (Request.Changes == null) throw new ArgumentNullException("Changes is null.");

            mResponse = new __RPC_GameMaster_SetExdata_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_GameMaster_SetExdata_ARG_uint64_characterId_Dict_int_int_Data_changes__ Request { get; private set; }

        private __RPC_GameMaster_SetExdata_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public SetExdataInMessage Clone()
        { 
            return new SetExdataInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class GetLogInMessage : InMessage
    {
        public GetLogInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_GameMaster_GetLog_ARG_uint64_characterId_string_date__;

            mResponse = new __RPC_GameMaster_GetLog_RET_string__();
            mResponse.ReturnValue = string.Empty;
        }


        public __RPC_GameMaster_GetLog_ARG_uint64_characterId_string_date__ Request { get; private set; }

        private __RPC_GameMaster_GetLog_RET_string__ mResponse;
        public string Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public GetLogInMessage Clone()
        { 
            return new GetLogInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class ChangeServerInMessage : InMessage
    {
        public ChangeServerInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_GameMaster_ChangeServer_ARG_uint64_characterId_int32_serverId__;

            mResponse = new __RPC_GameMaster_ChangeServer_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_GameMaster_ChangeServer_ARG_uint64_characterId_int32_serverId__ Request { get; private set; }

        private __RPC_GameMaster_ChangeServer_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public ChangeServerInMessage Clone()
        { 
            return new ChangeServerInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class GMCommandInMessage : InMessage
    {
        public GMCommandInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_GameMaster_GMCommand_ARG_uint64_id_string_command__;

            mResponse = new __RPC_GameMaster_GMCommand_RET_string__();
            mResponse.ReturnValue = string.Empty;
        }


        public __RPC_GameMaster_GMCommand_ARG_uint64_id_string_command__ Request { get; private set; }

        private __RPC_GameMaster_GMCommand_RET_string__ mResponse;
        public string Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public GMCommandInMessage Clone()
        { 
            return new GMCommandInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class CharacterConnectedInMessage : InMessage
    {
        public CharacterConnectedInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_GameMaster_CharacterConnected_ARG_uint64_id_int32_serverType__;

        }


        public __RPC_GameMaster_CharacterConnected_ARG_uint64_id_int32_serverType__ Request { get; private set; }

        public CharacterConnectedInMessage Clone()
        { 
            return new CharacterConnectedInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class GenGiftCodeInMessage : InMessage
    {
        public GenGiftCodeInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_GameMaster_GenGiftCode_ARG_int32_type_int32_count_int32_channelId__;

            mResponse = new __RPC_GameMaster_GenGiftCode_RET_string__();
            mResponse.ReturnValue = string.Empty;
        }


        public __RPC_GameMaster_GenGiftCode_ARG_int32_type_int32_count_int32_channelId__ Request { get; private set; }

        private __RPC_GameMaster_GenGiftCode_RET_string__ mResponse;
        public string Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public GenGiftCodeInMessage Clone()
        { 
            return new GenGiftCodeInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class GetServerCharacterCountInMessage : InMessage
    {
        public GetServerCharacterCountInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_GameMaster_GetServerCharacterCount_ARG_uint64_id_int32_serverType__;

            mResponse = new __RPC_GameMaster_GetServerCharacterCount_RET_Dict_int_int_Data__();
            mResponse.ReturnValue = new Dict_int_int_Data();
        }


        public __RPC_GameMaster_GetServerCharacterCount_ARG_uint64_id_int32_serverType__ Request { get; private set; }

        private __RPC_GameMaster_GetServerCharacterCount_RET_Dict_int_int_Data__ mResponse;
        public Dict_int_int_Data Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public GetServerCharacterCountInMessage Clone()
        { 
            return new GetServerCharacterCountInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class GetCharacterLogicDbInfoInMessage : InMessage
    {
        public GetCharacterLogicDbInfoInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_GameMaster_GetCharacterLogicDbInfo_ARG_uint64_characterId__;

            mResponse = new __RPC_GameMaster_GetCharacterLogicDbInfo_RET_GMCharacterLogicDbInfo__();
            mResponse.ReturnValue = new GMCharacterLogicDbInfo();
        }


        public __RPC_GameMaster_GetCharacterLogicDbInfo_ARG_uint64_characterId__ Request { get; private set; }

        private __RPC_GameMaster_GetCharacterLogicDbInfo_RET_GMCharacterLogicDbInfo__ mResponse;
        public GMCharacterLogicDbInfo Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public GetCharacterLogicDbInfoInMessage Clone()
        { 
            return new GetCharacterLogicDbInfoInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class AddAutoActvityInMessage : InMessage
    {
        public AddAutoActvityInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_GameMaster_AddAutoActvity_ARG_int32_fubenId_int64_startTime_int64_endTime_int32_count__;

            mResponse = new __RPC_GameMaster_AddAutoActvity_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_GameMaster_AddAutoActvity_ARG_int32_fubenId_int64_startTime_int64_endTime_int32_count__ Request { get; private set; }

        private __RPC_GameMaster_AddAutoActvity_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public AddAutoActvityInMessage Clone()
        { 
            return new AddAutoActvityInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class GetServerRankDataInMessage : InMessage
    {
        public GetServerRankDataInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_GameMaster_GetServerRankData_ARG_int32_serverId_int32_ranktype__;

            mResponse = new __RPC_GameMaster_GetServerRankData_RET_RankList__();
            mResponse.ReturnValue = new RankList();
        }


        public __RPC_GameMaster_GetServerRankData_ARG_int32_serverId_int32_ranktype__ Request { get; private set; }

        private __RPC_GameMaster_GetServerRankData_RET_RankList__ mResponse;
        public RankList Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public GetServerRankDataInMessage Clone()
        { 
            return new GetServerRankDataInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class GetTodayFunbenCountInMessage : InMessage
    {
        public GetTodayFunbenCountInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_GameMaster_GetTodayFunbenCount_ARG_int32_serverId_uint64_characterId_int32_selecttype__;

            mResponse = new __RPC_GameMaster_GetTodayFunbenCount_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_GameMaster_GetTodayFunbenCount_ARG_int32_serverId_uint64_characterId_int32_selecttype__ Request { get; private set; }

        private __RPC_GameMaster_GetTodayFunbenCount_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public GetTodayFunbenCountInMessage Clone()
        { 
            return new GetTodayFunbenCountInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SilenceInMessage : InMessage
    {
        public SilenceInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_GameMaster_Silence_ARG_uint64_characterId_uint32_mask__;

            mResponse = new __RPC_GameMaster_Silence_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_GameMaster_Silence_ARG_uint64_characterId_uint32_mask__ Request { get; private set; }

        private __RPC_GameMaster_Silence_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public SilenceInMessage Clone()
        { 
            return new SilenceInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class LockAccountInMessage : InMessage
    {
        public LockAccountInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_GameMaster_LockAccount_ARG_uint64_playerId_int64_endTime__;

            mResponse = new __RPC_GameMaster_LockAccount_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_GameMaster_LockAccount_ARG_uint64_playerId_int64_endTime__ Request { get; private set; }

        private __RPC_GameMaster_LockAccount_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public LockAccountInMessage Clone()
        { 
            return new LockAccountInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class GetServerCharacterInMessage : InMessage
    {
        public GetServerCharacterInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_GameMaster_GetServerCharacter_ARG_string_accoutName__;

            mResponse = new __RPC_GameMaster_GetServerCharacter_RET_DictIntUint64Array__();
            mResponse.ReturnValue = new DictIntUint64Array();
        }


        public __RPC_GameMaster_GetServerCharacter_ARG_string_accoutName__ Request { get; private set; }

        private __RPC_GameMaster_GetServerCharacter_RET_DictIntUint64Array__ mResponse;
        public DictIntUint64Array Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public GetServerCharacterInMessage Clone()
        { 
            return new GetServerCharacterInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SendQuestionInMessage : InMessage
    {
        public SendQuestionInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_GameMaster_SendQuestion_ARG_MailQuestion_mail__;
            if (Request.Mail == null) throw new ArgumentNullException("Mail is null.");

        }


        public __RPC_GameMaster_SendQuestion_ARG_MailQuestion_mail__ Request { get; private set; }

        public SendQuestionInMessage Clone()
        { 
            return new SendQuestionInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class TakeOldPlayerRewardInMessage : InMessage
    {
        public TakeOldPlayerRewardInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_GameMaster_TakeOldPlayerReward_ARG_uint64_clientId__;

        }


        public __RPC_GameMaster_TakeOldPlayerReward_ARG_uint64_clientId__ Request { get; private set; }

        public TakeOldPlayerRewardInMessage Clone()
        { 
            return new TakeOldPlayerRewardInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class UseGiftCodeInMessage : InMessage
    {
        public UseGiftCodeInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_GameMaster_UseGiftCode_ARG_string_code_int32_channelId__;

            mResponse = new __RPC_GameMaster_UseGiftCode_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_GameMaster_UseGiftCode_ARG_string_code_int32_channelId__ Request { get; private set; }

        private __RPC_GameMaster_UseGiftCode_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public UseGiftCodeInMessage Clone()
        { 
            return new UseGiftCodeInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public interface IGameMasterCharacterProxy
    {
        IEnumerator OnConnected(Coroutine coroutine, GameMasterCharacterProxy _this, uint packId);
        IEnumerator OnLost(Coroutine coroutine, GameMasterCharacterProxy _this, uint packId);
        bool OnSyncRequested(GameMasterCharacterProxy _this, ulong characterId, uint syncId);
    }

    public class GameMasterCharacterProxy
    {
        public ulong CharacterId { get; private set; }
        public ulong ClientId { get; private set; }
        public GameMasterService Service { get; private set; }

        public GameMasterCharacterProxy(GameMasterService service, ulong characterId, ulong clientId)
        {
            CharacterId = characterId;
            ClientId = clientId;
            Service = service;
            mSyncCenter.ServiceType = ServiceType.Logic;
        }

        private DataSyncCenter mSyncCenter = new DataSyncCenter();
        public DataSyncCenter SyncCenter { get { return mSyncCenter; } }

        public void Sync()
        {
            Service.Sync(ClientId, mSyncCenter);
        }

        public object Wait(Coroutine coroutine, TimeSpan timeSpan)
        {
            return Service.Wait(coroutine, timeSpan);
        }
    }
}
