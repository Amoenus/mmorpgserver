// Generated by the rpc compiler.  DO NOT EDIT!
using System;
using System.Collections;
using System.IO;
using Scorpion;
using System.Collections.Generic;
using ProtoBuf;
using DataContract;

#pragma warning disable 0162,0108
namespace LogicServerService
{

    public interface ILogicService
    {
        /// <summary>
        /// </summary>
        IEnumerator PrepareDataForEnterGame(Coroutine coroutine, LogicService _this, PrepareDataForEnterGameInMessage msg);
        /// <summary>
        /// </summary>
        IEnumerator PrepareDataForCreateCharacter(Coroutine coroutine, LogicService _this, PrepareDataForCreateCharacterInMessage msg);
        /// <summary>
        /// </summary>
        IEnumerator PrepareDataForCommonUse(Coroutine coroutine, LogicService _this, PrepareDataForCommonUseInMessage msg);
        /// <summary>
        /// </summary>
        IEnumerator PrepareDataForLogout(Coroutine coroutine, LogicService _this, PrepareDataForLogoutInMessage msg);
        /// <summary>
        /// </summary>
        IEnumerator CreateCharacter(Coroutine coroutine, LogicService _this, CreateCharacterInMessage msg);
        /// <summary>
        /// </summary>
        IEnumerator DelectCharacter(Coroutine coroutine, LogicService _this, DelectCharacterInMessage msg);
        /// <summary>
        /// 获得Logic的Simple数据
        /// </summary>
        IEnumerator GetLogicSimpleData(Coroutine coroutine, LogicService _this, GetLogicSimpleDataInMessage msg);
        /// <summary>
        /// 检查客户端是否已经连接到对应服务器
        /// </summary>
        IEnumerator CheckConnected(Coroutine coroutine, LogicService _this, CheckConnectedInMessage msg);
        /// <summary>
        /// 检查相应客户端连接是否已经断开
        /// </summary>
        IEnumerator CheckLost(Coroutine coroutine, LogicService _this, CheckLostInMessage msg);
        /// <summary>
        /// 查询服务器状态
        /// </summary>
        IEnumerator QueryStatus(Coroutine coroutine, LogicService _this, QueryStatusInMessage msg);
        /// <summary>
        /// 请求装备数据
        /// </summary>
        IEnumerator LogicGetEquipList(Coroutine coroutine, LogicService _this, LogicGetEquipListInMessage msg);
        /// <summary>
        /// 请求技能数据
        /// </summary>
        IEnumerator LogicGetSkillData(Coroutine coroutine, LogicService _this, LogicGetSkillDataInMessage msg);
        /// <summary>
        /// 请求天赋数据
        /// </summary>
        IEnumerator LogicGetTalentData(Coroutine coroutine, LogicService _this, LogicGetTalentDataInMessage msg);
        /// <summary>
        /// 请求图鉴属性数据
        /// </summary>
        IEnumerator LogicGetBookAttrData(Coroutine coroutine, LogicService _this, LogicGetBookAttrDataInMessage msg);
        /// <summary>
        /// 杀怪Id
        /// </summary>
        IEnumerator LogicKillMonster(Coroutine coroutine, LogicService _this, LogicKillMonsterInMessage msg);
        /// <summary>
        /// 获得物品
        /// </summary>
        IEnumerator GiveItem(Coroutine coroutine, LogicService _this, GiveItemInMessage msg);
        /// <summary>
        /// 扣除道具
        /// </summary>
        IEnumerator DeleteItem(Coroutine coroutine, LogicService _this, DeleteItemInMessage msg);
        /// <summary>
        /// 每天的首次登陆(连续登陆天数)
        /// </summary>
        IEnumerator FirstOnline(Coroutine coroutine, LogicService _this, FirstOnlineInMessage msg);
        /// <summary>
        /// 其他服务器要求添加好友
        /// </summary>
        IEnumerator SSAddFriendById(Coroutine coroutine, LogicService _this, SSAddFriendByIdInMessage msg);
        /// <summary>
        /// 广播表格重载
        /// </summary>
        IEnumerator ServerGMCommand(Coroutine coroutine, LogicService _this, ServerGMCommandInMessage msg);
        /// <summary>
        /// 完成副本
        /// </summary>
        IEnumerator CompleteFuben(Coroutine coroutine, LogicService _this, CompleteFubenInMessage msg);
        /// <summary>
        /// 耐久度下降
        /// </summary>
        IEnumerator DurableDown(Coroutine coroutine, LogicService _this, DurableDownInMessage msg);
        /// <summary>
        /// 场景服务器请求使用NPC服务
        /// </summary>
        IEnumerator NpcService(Coroutine coroutine, LogicService _this, NpcServiceInMessage msg);
        /// <summary>
        /// 触发翻牌
        /// </summary>
        IEnumerator PushDraw(Coroutine coroutine, LogicService _this, PushDrawInMessage msg);
        /// <summary>
        /// 检查玩家是否满足进入副本的需求
        /// </summary>
        IEnumerator CheckCharacterInFuben(Coroutine coroutine, LogicService _this, CheckCharacterInFubenInMessage msg);
        /// <summary>
        /// 天梯结果有改变
        /// </summary>
        IEnumerator LogicP1vP1FightOver(Coroutine coroutine, LogicService _this, LogicP1vP1FightOverInMessage msg);
        /// <summary>
        /// 天梯名次有所前进
        /// </summary>
        IEnumerator LogicP1vP1LadderAdvance(Coroutine coroutine, LogicService _this, LogicP1vP1LadderAdvanceInMessage msg);
        /// <summary>
        /// 记录天梯变化
        /// </summary>
        IEnumerator PushP1vP1LadderChange(Coroutine coroutine, LogicService _this, PushP1vP1LadderChangeInMessage msg);
        /// <summary>
        /// 支持其他服务器获取标记位和条件表
        /// </summary>
        IEnumerator SSGetFlagOrCondition(Coroutine coroutine, LogicService _this, SSGetFlagOrConditionInMessage msg);
        /// <summary>
        /// 查询玩家是否屏蔽了另一个玩家
        /// </summary>
        IEnumerator SSIsShield(Coroutine coroutine, LogicService _this, SSIsShieldInMessage msg);
        /// <summary>
        /// 修改扩展数据
        /// </summary>
        IEnumerator SSChangeExdata(Coroutine coroutine, LogicService _this, SSChangeExdataInMessage msg);
        /// <summary>
        /// 交易系统：有A要买B的东西
        /// </summary>
        IEnumerator SSStoreOperationBuy(Coroutine coroutine, LogicService _this, SSStoreOperationBuyInMessage msg);
        /// <summary>
        /// 获得某人的商店道具
        /// </summary>
        IEnumerator GetExchangeData(Coroutine coroutine, LogicService _this, GetExchangeDataInMessage msg);
        /// <summary>
        /// 发送邮件
        /// </summary>
        IEnumerator SendMailToCharacterByItems(Coroutine coroutine, LogicService _this, SendMailToCharacterByItemsInMessage msg);
        /// <summary>
        /// 战盟信息发生变化的通知
        /// type: 0:申请被同意后，通知申请者	1:被踢出	2:被拒绝	3:战盟权限变化
        /// </summary>
        IEnumerator AllianceDataChange(Coroutine coroutine, LogicService _this, AllianceDataChangeInMessage msg);
        /// <summary>
        ///  战场结果
        /// </summary>
        IEnumerator SSBattleResult(Coroutine coroutine, LogicService _this, SSBattleResultInMessage msg);
        /// <summary>
        /// 查询服务器状态，是否可以进入
        /// </summary>
        IEnumerator ReadyToEnter(Coroutine coroutine, LogicService _this, ReadyToEnterInMessage msg);
        /// <summary>
        /// 获得所有有我的好友数据
        /// </summary>
        IEnumerator SSGetFriendList(Coroutine coroutine, LogicService _this, SSGetFriendListInMessage msg);
        /// <summary>
        /// 通知数据变化了
        /// </summary>
        IEnumerator SSSendSimpleData(Coroutine coroutine, LogicService _this, SSSendSimpleDataInMessage msg);
        /// <summary>
        /// 通知有人加了自己好友仇人等变化了
        /// </summary>
        IEnumerator SSFriendpPssiveChange(Coroutine coroutine, LogicService _this, SSFriendpPssiveChangeInMessage msg);
        /// <summary>
        /// 获取某人的ExData
        /// </summary>
        IEnumerator SSFetchExdata(Coroutine coroutine, LogicService _this, SSFetchExdataInMessage msg);
        /// <summary>
        /// 扣除道具
        /// </summary>
        IEnumerator SSDeleteItemByIndex(Coroutine coroutine, LogicService _this, SSDeleteItemByIndexInMessage msg);
        /// <summary>
        /// 请求某个任务可以相位到的场景
        /// </summary>
        IEnumerator SSGetMissionEnterScene(Coroutine coroutine, LogicService _this, SSGetMissionEnterSceneInMessage msg);
        /// <summary>
        /// 场景要关闭了，通知Logic Server
        /// </summary>
        IEnumerator NotifyDungeonClose(Coroutine coroutine, LogicService _this, NotifyDungeonCloseInMessage msg);
        /// <summary>
        /// 修改某角色的扩展数据
        /// </summary>
        IEnumerator SSSetExdata(Coroutine coroutine, LogicService _this, SSSetExdataInMessage msg);
        /// <summary>
        /// 修改某角色的flag数据
        /// </summary>
        IEnumerator SSSetFlag(Coroutine coroutine, LogicService _this, SSSetFlagInMessage msg);
        /// <summary>
        /// 请求称号数据
        /// </summary>
        IEnumerator LogicGetTitleList(Coroutine coroutine, LogicService _this, LogicGetTitleListInMessage msg);
        /// <summary>
        /// 处理充值成功消息
        /// </summary>
        IEnumerator RechargeSuccess(Coroutine coroutine, LogicService _this, RechargeSuccessInMessage msg);
        /// <summary>
        /// 获得物品数量
        /// </summary>
        IEnumerator GetItemCount(Coroutine coroutine, LogicService _this, GetItemCountInMessage msg);
        /// <summary>
        /// 同步战盟Buff
        /// </summary>
        IEnumerator SSGetAllianceBuff(Coroutine coroutine, LogicService _this, SSGetAllianceBuffInMessage msg);
        /// <summary>
        /// 同步战盟Buff
        /// </summary>
        IEnumerator NotifyAllianceWarInfo(Coroutine coroutine, LogicService _this, NotifyAllianceWarInfoInMessage msg);
        /// <summary>
        /// 别的服务器（team）通知logic，我进入某个副本啦，注意处理相关数据
        /// </summary>
        IEnumerator NotifyEnterFuben(Coroutine coroutine, LogicService _this, NotifyEnterFubenInMessage msg);
        /// <summary>
        /// 通知loigc某人要转服了，需要处理相关数据
        /// </summary>
        IEnumerator ChangeServer(Coroutine coroutine, LogicService _this, ChangeServerInMessage msg);
        /// <summary>
        /// 请求精灵buff数据
        /// </summary>
        IEnumerator LogicGetElfData(Coroutine coroutine, LogicService _this, LogicGetElfDataInMessage msg);
        /// <summary>
        /// 通知某个角色开始 链接各游戏服务器了
        /// </summary>
        IEnumerator SSNotifyCharacterOnConnet(Coroutine coroutine, LogicService _this, SSNotifyCharacterOnConnetInMessage msg);
        /// <summary>
        /// 通知服务器玩家掉线了
        /// </summary>
        IEnumerator BSNotifyCharacterOnLost(Coroutine coroutine, LogicService _this, BSNotifyCharacterOnLostInMessage msg);
        /// <summary>
        /// 场景向Logic请求建筑随从数据
        /// </summary>
        IEnumerator SSRequestCityBuidlingPetData(Coroutine coroutine, LogicService _this, SSRequestCityBuidlingPetDataInMessage msg);
        /// <summary>
        /// 获取玩家副本次数
        /// </summary>
        IEnumerator SSGetTodayFunbenCount(Coroutine coroutine, LogicService _this, SSGetTodayFunbenCountInMessage msg);
        /// <summary>
        /// 请求装备数据
        /// </summary>
        IEnumerator LogicGetAnyData(Coroutine coroutine, LogicService _this, LogicGetAnyDataInMessage msg);
        /// <summary>
        /// 请求获得雕像奖励
        /// </summary>
        IEnumerator SSSyncCharacterFightPoint(Coroutine coroutine, LogicService _this, SSSyncCharacterFightPointInMessage msg);
        /// <summary>
        /// 当玩家进入场景后(Scene->Logic)
        /// </summary>
        IEnumerator OnPlayerEnterSceneOver(Coroutine coroutine, LogicService _this, OnPlayerEnterSceneOverInMessage msg);
        /// <summary>
        /// </summary>
        IEnumerator AnchorGift(Coroutine coroutine, LogicService _this, AnchorGiftInMessage msg);
        /// <summary>
        /// scene请求logic学习技能
        /// </summary>
        IEnumerator SSLearnSkill(Coroutine coroutine, LogicService _this, SSLearnSkillInMessage msg);
        /// <summary>
        /// </summary>
        IEnumerator GMDeleteMessage(Coroutine coroutine, LogicService _this, GMDeleteMessageInMessage msg);
        /// <summary>
        /// GM相关 begin  逻辑包放GM工具前
        /// </summary>
        IEnumerator GetCharacterData(Coroutine coroutine, LogicService _this, GetCharacterDataInMessage msg);
        /// <summary>
        /// </summary>
        IEnumerator SendMailToCharacter(Coroutine coroutine, LogicService _this, SendMailToCharacterInMessage msg);
        /// <summary>
        /// </summary>
        IEnumerator SendMailToServer(Coroutine coroutine, LogicService _this, SendMailToServerInMessage msg);
        /// <summary>
        /// </summary>
        IEnumerator UpdateServer(Coroutine coroutine, LogicService _this, UpdateServerInMessage msg);
        /// <summary>
        /// </summary>
        IEnumerator GMCommand(Coroutine coroutine, LogicService _this, GMCommandInMessage msg);
        /// <summary>
        /// 补充type = 0 是发送给玩家的物品 数量读表  type = 1时 物品读表 数量取count * 表里的数量
        /// </summary>
        IEnumerator SendMailToCharacterById(Coroutine coroutine, LogicService _this, SendMailToCharacterByIdInMessage msg);
        /// <summary>
        /// </summary>
        IEnumerator LogicGetMountData(Coroutine coroutine, LogicService _this, LogicGetMountDataInMessage msg);
        /// <summary>
        /// 拷贝一个角色数据到另一个角色id
        /// </summary>
        IEnumerator CloneCharacterDbById(Coroutine coroutine, LogicService _this, CloneCharacterDbByIdInMessage msg);
        /// <summary>
        /// </summary>
        IEnumerator GiveItemList(Coroutine coroutine, LogicService _this, GiveItemListInMessage msg);
        /// <summary>
        /// </summary>
        IEnumerator ApplyPlayerFlag(Coroutine coroutine, LogicService _this, ApplyPlayerFlagInMessage msg);
        /// <summary>
        /// </summary>
        IEnumerator ApplyMayaSkill(Coroutine coroutine, LogicService _this, ApplyMayaSkillInMessage msg);
        /// <summary>
        /// 其他服务器请求给玩家发送邮件
        /// </summary>
        IEnumerator SSSendMailById(Coroutine coroutine, LogicService _this, SSSendMailByIdInMessage msg);
        /// <summary>
        /// </summary>
        IEnumerator NotifyPlayerMoniterData(Coroutine coroutine, LogicService _this, NotifyPlayerMoniterDataInMessage msg);
        /// <summary>
        /// </summary>
        IEnumerator GetPlayerMoniterData(Coroutine coroutine, LogicService _this, GetPlayerMoniterDataInMessage msg);
        /// <summary>
        /// 通知目标玩家的Logic收到角斗
        /// </summary>
        IEnumerator NotifyInviteChallenge(Coroutine coroutine, LogicService _this, NotifyInviteChallengeInMessage msg);
        IEnumerator OnServerStart(Coroutine coroutine, LogicService _this);
        IEnumerator OnServerStop(Coroutine coroutine, LogicService _this);
    }

    public abstract class LogicService : ServerAgentBase
    {

        protected static ILogicService mImpl;
        public static ILogicCharacterProxy mProxyImpl;
        public void SetServiceImpl(ILogicService impl)
        {
            mImpl = impl;
        }
        public void SetProxyImpl(ILogicCharacterProxy proxyImpl)
        {
            mProxyImpl = proxyImpl;
        }
        public abstract LogicCharacterProxy NewCharacterIn(ulong characterId, ulong clientId);
        public Dictionary<ulong, LogicCharacterProxy> Proxys = new Dictionary<ulong, LogicCharacterProxy>();
        protected override object GetRequestData(uint p, byte[] list)
        {
            switch(p)
            {
            case 1000:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_PrepareDataForEnterGame_ARG_int32_serverId_uint64_sceneGuid__>(ms);
                }
                break;
            case 1001:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_PrepareDataForCreateCharacter_ARG_int32_type__>(ms);
                }
                break;
            case 1002:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_PrepareDataForCommonUse_ARG_uint32_placeholder__>(ms);
                }
                break;
            case 1003:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_PrepareDataForLogout_ARG_uint32_placeholder__>(ms);
                }
                break;
            case 1015:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_CreateCharacter_ARG_int32_type_int32_serverId_bool_isGM__>(ms);
                }
                break;
            case 1016:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_DelectCharacter_ARG_int32_type__>(ms);
                }
                break;
            case 1030:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_SBGetAllOnlineCharacterInServer_ARG_int32_serverId__>(ms);
                }
                break;
            case 1031:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_GetLogicSimpleData_ARG_uint32_placeholder__>(ms);
                }
                break;
            case 1032:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_CheckConnected_ARG_uint64_characterId__>(ms);
                }
                break;
            case 1033:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_CheckLost_ARG_uint64_characterId__>(ms);
                }
                break;
            case 1034:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_QueryStatus_ARG_uint32_placeholder__>(ms);
                }
                break;
            case 1040:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_QueryBrokerStatus_ARG_uint32_placeholder__>(ms);
                }
                break;
            case 1041:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_GMLogic_ARG_string_commond__>(ms);
                }
                break;
            case 1042:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_LogicGetEquipList_ARG_uint64_chararcterId__>(ms);
                }
                break;
            case 1043:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_LogicGetSkillData_ARG_uint64_chararcterId__>(ms);
                }
                break;
            case 1044:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_LogicGetTalentData_ARG_uint64_chararcterId__>(ms);
                }
                break;
            case 1045:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_LogicGetBookAttrData_ARG_uint64_chararcterId__>(ms);
                }
                break;
            case 1046:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_ApplySkill_ARG_uint32_placeholder__>(ms);
                }
                break;
            case 1047:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_UpgradeInnate_ARG_int32_innateId__>(ms);
                }
                break;
            case 1048:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_ClearInnate_ARG_int32_innateId__>(ms);
                }
                break;
            case 1049:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_ApplyBags_ARG_int32_type__>(ms);
                }
                break;
            case 1050:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_ApplyFlag_ARG_int32_flagId__>(ms);
                }
                break;
            case 1051:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_ApplyExdata_ARG_int32_exdataId__>(ms);
                }
                break;
            case 1052:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_ApplyExdata64_ARG_int32_exdataId__>(ms);
                }
                break;
            case 1053:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_ApplyMission_ARG_int32_missionId__>(ms);
                }
                break;
            case 1054:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_ApplyBooks_ARG_uint32_placeholder__>(ms);
                }
                break;
            case 1055:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_ReplaceEquip_ARG_int32_bagItemId_int32_part_int32_index__>(ms);
                }
                break;
            case 1056:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_AcceptMission_ARG_int32_missionId__>(ms);
                }
                break;
            case 1057:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_CommitMission_ARG_int32_missionId__>(ms);
                }
                break;
            case 1058:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_CompleteMission_ARG_int32_missionId__>(ms);
                }
                break;
            case 1059:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_DropMission_ARG_int32_missionId__>(ms);
                }
                break;
            case 1060:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_SyncMission_ARG_int32_missionId_int32_state_int32_param__>(ms);
                }
                break;
            case 1061:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_SyncFlag_ARG_int32_flagId_int32_param__>(ms);
                }
                break;
            case 1062:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_SyncFlagList_ARG_Int32Array_trueList_Int32Array_falseList__>(ms);
                }
                break;
            case 1063:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_SyncExdata_ARG_int32_exdataId_int32_value__>(ms);
                }
                break;
            case 1064:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_SyncExdataList_ARG_Dict_int_int_Data_diff__>(ms);
                }
                break;
            case 1065:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_SyncExdata64_ARG_int32_exdataId_int64_value__>(ms);
                }
                break;
            case 1066:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_SyncResources_ARG_int32_resId_int32_value__>(ms);
                }
                break;
            case 1067:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_SyncItems_ARG_BagsChangeData_bag__>(ms);
                }
                break;
            case 1068:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_EquipSkill_ARG_Int32Array_EquipSkills__>(ms);
                }
                break;
            case 1069:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_UpgradeSkill_ARG_int32_skillId__>(ms);
                }
                break;
            case 1070:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_SellBagItem_ARG_int32_bagType_int32_itemId_int32_index_int32_count__>(ms);
                }
                break;
            case 1071:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_RecycleBagItem_ARG_int32_bagType_int32_itemId_int32_index_int32_count__>(ms);
                }
                break;
            case 1072:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_EnchanceEquip_ARG_int32_bagType_int32_bagIndex_int32_blessing_int32_upRate_int32_costGoldBlessNum__>(ms);
                }
                break;
            case 1073:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_AppendEquip_ARG_int32_bagType_int32_bagIndex__>(ms);
                }
                break;
            case 1074:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_ResetExcellentEquip_ARG_int32_bagType_int32_bagIndex__>(ms);
                }
                break;
            case 1075:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_ConfirmResetExcellentEquip_ARG_int32_bagType_int32_bagIndex_int32_ok__>(ms);
                }
                break;
            case 1076:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_SuperExcellentEquip_ARG_int32_bagType_int32_bagIndex_Int32Array_LockList__>(ms);
                }
                break;
            case 1077:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_SmritiEquip_ARG_int32_smritiType_int32_moneyType_int32_fromBagType_int32_fromBagIndex_int32_toBagType_int32_toBagIndex__>(ms);
                }
                break;
            case 1078:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_UseItem_ARG_int32_bagType_int32_bagIndex_int32_count__>(ms);
                }
                break;
            case 1079:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_LogicKillMonster_ARG_int32_MonsterId_int32_addExp_int32_sceneId__>(ms);
                }
                break;
            case 1080:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_GiveItem_ARG_int32_itemId_int32_itemCount_int32_from__>(ms);
                }
                break;
            case 1081:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_DeleteItem_ARG_int32_itemId_int32_itemCount_int32_deleteType__>(ms);
                }
                break;
            case 1082:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_SyncMissions_ARG_MissionDataMessage_missions__>(ms);
                }
                break;
            case 1083:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_FirstOnline_ARG_uint64_clientId_uint64_chararcterId_int32_continuedLanding__>(ms);
                }
                break;
            case 1084:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_ActivationReward_ARG_int32_typeId_int32_giftId__>(ms);
                }
                break;
            case 1086:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_ComposeItem_ARG_int32_composeId_int32_count__>(ms);
                }
                break;
            case 1087:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_FinishAchievement_ARG_int32_achievementId__>(ms);
                }
                break;
            case 1088:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_RewardAchievement_ARG_int32_achievementId__>(ms);
                }
                break;
            case 1089:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_DistributionAttrPoint_ARG_int32_Strength_int32_Agility_int32_Intelligence_int32_Endurance__>(ms);
                }
                break;
            case 1090:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_RefreshAttrPoint_ARG_int32_placeholder__>(ms);
                }
                break;
            case 1091:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_SetAttributeAutoAdd_ARG_int32_isAuto__>(ms);
                }
                break;
            case 1092:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_ApplyFriends_ARG_int32_type__>(ms);
                }
                break;
            case 1093:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_SeekCharacters_ARG_string_name__>(ms);
                }
                break;
            case 1393:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_SeekCharactersReceive_ARG_CharacterSimpleDataList_result__>(ms);
                }
                break;
            case 1094:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_SeekFriends_ARG_string_name__>(ms);
                }
                break;
            case 1394:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_SeekFriendsReceive_ARG_CharacterSimpleDataList_result__>(ms);
                }
                break;
            case 1095:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_AddFriendById_ARG_uint64_characterId_int32_type__>(ms);
                }
                break;
            case 1096:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_SSAddFriendById_ARG_uint64_characterId_int32_type__>(ms);
                }
                break;
            case 1097:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_AddFriendByName_ARG_string_Name_int32_type__>(ms);
                }
                break;
            case 1098:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_DelFriendById_ARG_uint64_characterId_int32_type__>(ms);
                }
                break;
            case 1099:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_ServerGMCommand_ARG_string_cmd_string_param__>(ms);
                }
                break;
            case 1100:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_CompleteFuben_ARG_FubenResult_result__>(ms);
                }
                break;
            case 1101:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_DungeonComplete_ARG_FubenResult_result__>(ms);
                }
                break;
            case 1102:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_SelectDungeonReward_ARG_int32_fubenId_int32_select__>(ms);
                }
                break;
            case 1103:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_EnterFuben_ARG_int32_fubenId__>(ms);
                }
                break;
            case 1104:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_ResetFuben_ARG_int32_fubenId__>(ms);
                }
                break;
            case 1105:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_SweepFuben_ARG_int32_fubenId__>(ms);
                }
                break;
            case 1106:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_ApplyStores_ARG_int32_type_int32_serviceType__>(ms);
                }
                break;
            case 1107:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_ActivateBook_ARG_int32_itemId__>(ms);
                }
                break;
            case 1319:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_ActivateBookGroup_ARG_int32_groupId__>(ms);
                }
                break;
            case 1108:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_SortBag_ARG_int32_bagId__>(ms);
                }
                break;
            case 1109:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_ApplyPlayerInfo_ARG_uint64_characterId__>(ms);
                }
                break;
            case 1110:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_SetFlag_ARG_Int32Array_trueDatas_Int32Array_falseDatas__>(ms);
                }
                break;
            case 1111:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_SetExData_ARG_Dict_int_int_Data_datas__>(ms);
                }
                break;
            case 1112:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_ApplyMails_ARG_int32_placeholder__>(ms);
                }
                break;
            case 1113:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_ApplyMailInfo_ARG_uint64_mailId__>(ms);
                }
                break;
            case 1114:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_ReceiveMail_ARG_Uint64Array_mails__>(ms);
                }
                break;
            case 1115:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_DeleteMail_ARG_Uint64Array_mails__>(ms);
                }
                break;
            case 1116:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_SyncMails_ARG_MailList_mails__>(ms);
                }
                break;
            case 1117:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_DurableDown_ARG_Dict_int_int_Data_bagidList__>(ms);
                }
                break;
            case 1118:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_RepairEquip_ARG_int32_placeholder__>(ms);
                }
                break;
            case 1119:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_NpcService_ARG_int32_serviceId__>(ms);
                }
                break;
            case 1120:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_DepotTakeOut_ARG_int32_index__>(ms);
                }
                break;
            case 1121:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_DepotPutIn_ARG_int32_bagId_int32_index__>(ms);
                }
                break;
            case 1122:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_WishingPoolDepotTakeOut_ARG_int32_index__>(ms);
                }
                break;
            case 1123:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_StoreBuy_ARG_int32_storeId_int32_count_int32_serviceType__>(ms);
                }
                break;
            case 1124:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_ApplyCityData_ARG_int32_buildingId__>(ms);
                }
                break;
            case 1125:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_CityOperationRequest_ARG_int32_opType_int32_buildingIdx_Int32Array_param__>(ms);
                }
                break;
            case 1126:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_SyncCityBuildingData_ARG_BuildingList_data__>(ms);
                }
                break;
            case 1127:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_SyncPetMission_ARG_PetMissionList_msg__>(ms);
                }
                break;
            case 1128:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_EnterCity_ARG_int32_cityId__>(ms);
                }
                break;
            case 1129:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_EquipDurableBroken_ARG_int32_partId_int32_value__>(ms);
                }
                break;
            case 1130:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_EquipDurableChange_ARG_int32_placeholder__>(ms);
                }
                break;
            case 1131:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_ApplyEquipDurable_ARG_int32_placeholder__>(ms);
                }
                break;
            case 1132:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_ElfOperate_ARG_int32_index_int32_type_int32_targetIndex__>(ms);
                }
                break;
            case 1133:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_ElfReplace_ARG_int32_from_int32_to__>(ms);
                }
                break;
            case 1134:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_PushDraw_ARG_int32_drawId__>(ms);
                }
                break;
            case 1135:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_CheckCharacterInFuben_ARG_int32_fubenId__>(ms);
                }
                break;
            case 1136:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_WingFormation_ARG_int32_placeholder__>(ms);
                }
                break;
            case 1137:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_WingTrain_ARG_int32_type__>(ms);
                }
                break;
            case 1138:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_OperatePet_ARG_int32_petId_int32_type_int32_param__>(ms);
                }
                break;
            case 1139:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_OperatePetMission_ARG_int32_id_int32_type_Int32Array_param__>(ms);
                }
                break;
            case 1140:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_PickUpMedal_ARG_int32_index_int32_flag__>(ms);
                }
                break;
            case 1141:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_EnchanceMedal_ARG_int32_bagId_int32_bagIndex__>(ms);
                }
                break;
            case 1142:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_EquipMedal_ARG_int32_bagId_int32_bagIndex__>(ms);
                }
                break;
            case 1317:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_SplitMedal_ARG_int32_bagId_int32_bagIndex_int32_flag__>(ms);
                }
                break;
            case 1143:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_BuySpaceBag_ARG_int32_bagId_int32_bagIndex_int32_needCount__>(ms);
                }
                break;
            case 1144:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_DeletePetMission_ARG_int32_missionId__>(ms);
                }
                break;
            case 1145:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_UseBuildService_ARG_int32_areaId_int32_serviceId_Int32Array_param__>(ms);
                }
                break;
            case 1146:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_GetP1vP1LadderPlayer_ARG_int32_placeholder__>(ms);
                }
                break;
            case 1147:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_GetP1vP1FightPlayer_ARG_int32_rank_uint64_guid_int32_type__>(ms);
                }
                break;
            case 1148:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_LogicP1vP1FightOver_ARG_uint64_characterId_int32_result_int32_rank__>(ms);
                }
                break;
            case 1149:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_LogicP1vP1LadderAdvance_ARG_int32_rank__>(ms);
                }
                break;
            case 1150:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_PushP1vP1LadderChange_ARG_int32_type_string_name_int32_result_int32_oldRank_int32_newRank__>(ms);
                }
                break;
            case 1151:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_GetP1vP1LadderOldList_ARG_int32_placeholder__>(ms);
                }
                break;
            case 1152:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_LogicP1vP1FightResult_ARG_P1vP1RewardData_data__>(ms);
                }
                break;
            case 1153:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_BuyP1vP1Count_ARG_int32_placeholder__>(ms);
                }
                break;
            case 1154:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_DrawLotteryPetEgg_ARG_int32_type__>(ms);
                }
                break;
            case 1155:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_RecoveryEquip_ARG_int32_type_Int32Array_indexList__>(ms);
                }
                break;
            case 1156:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_DrawWishingPool_ARG_int32_type__>(ms);
                }
                break;
            case 1157:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_ResetSkillTalent_ARG_int32_skillId__>(ms);
                }
                break;
            case 1158:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_RobotcFinishFuben_ARG_int32_fubenId__>(ms);
                }
                break;
            case 1159:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_CreateAlliance_ARG_string_name__>(ms);
                }
                break;
            case 1160:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_AllianceOperation_ARG_int32_type_int32_value__>(ms);
                }
                break;
            case 1161:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_AllianceOperationCharacter_ARG_int32_type_uint64_guid__>(ms);
                }
                break;
            case 1162:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_AllianceOperationCharacterByName_ARG_int32_type_string_name__>(ms);
                }
                break;
            case 1163:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_LogicSyncAllianceMessage_ARG_int32_type_string_name1_int32_allianceId_string_name2__>(ms);
                }
                break;
            case 1164:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_SSGetFlagOrCondition_ARG_uint64_guid_int32_flagId_int32_conditionid__>(ms);
                }
                break;
            case 1165:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_SSIsShield_ARG_uint64_guid_uint64_Shield__>(ms);
                }
                break;
            case 1166:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_WorshipCharacter_ARG_uint64_guid__>(ms);
                }
                break;
            case 1167:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_SSChangeExdata_ARG_Dict_int_int_Data_changes__>(ms);
                }
                break;
            case 1168:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_DonationAllianceItem_ARG_int32_type__>(ms);
                }
                break;
            case 1170:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_ElfDrawOver_ARG_DrawItemResult_Items_int64_getTime__>(ms);
                }
                break;
            case 1171:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_TalentCountChange_ARG_int32_talentId_int32_value__>(ms);
                }
                break;
            case 1172:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_CityMissionOperation_ARG_int32_type_int32_missIndex_int32_cost__>(ms);
                }
                break;
            case 1173:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_DropCityMission_ARG_int32_missIndex__>(ms);
                }
                break;
            case 1174:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_CityRefreshMission_ARG_int32_type__>(ms);
                }
                break;
            case 1175:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_StoreOperationAdd_ARG_int32_type_int32_bagId_int32_bagIndex_int32_count_int32_needCount_int32_storeIndex__>(ms);
                }
                break;
            case 1176:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_StoreOperationBroadcast_ARG_int32_type__>(ms);
                }
                break;
            case 1177:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_StoreOperationBuy_ARG_uint64_guid_int64_storeId__>(ms);
                }
                break;
            case 1178:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_StoreOperationCancel_ARG_int64_storeId__>(ms);
                }
                break;
            case 1179:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_StoreOperationLook_ARG_uint64_guid__>(ms);
                }
                break;
            case 1180:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_StoreOperationLookSelf_ARG_int32_placeholder__>(ms);
                }
                break;
            case 1181:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_StoreOperationHarvest_ARG_int64_storeId__>(ms);
                }
                break;
            case 1182:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_SSStoreOperationBuy_ARG_int64_storeId_uint64_Aid_string_name_int32_resType_int32_resCount_ItemBaseData_itemdata__>(ms);
                }
                break;
            case 1183:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_SSStoreOperationExchange_ARG_int32_trade_int32_itemCount__>(ms);
                }
                break;
            case 1184:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_GetExchangeData_ARG_uint64_characterId__>(ms);
                }
                break;
            case 1185:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_ApplyGroupShopItems_ARG_Int32Array_types__>(ms);
                }
                break;
            case 1186:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_NotifyStoreBuyed_ARG_int64_storeId_uint64_Aid_string_Aname__>(ms);
                }
                break;
            case 1187:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_BuyGroupShopItem_ARG_int64_guid_int32_gropId_int32_count__>(ms);
                }
                break;
            case 1188:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_GetBuyedGroupShopItems_ARG_int32_placeholder__>(ms);
                }
                break;
            case 1189:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_GetGroupShopHistory_ARG_int32_placeholder__>(ms);
                }
                break;
            case 1190:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_SendMailToCharacterByItems_ARG_int32_mailId_ItemBaseData_item_StringArray_args__>(ms);
                }
                break;
            case 1191:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_AllianceDataChange_ARG_int32_type_int32_allianceId_int32_ladder_string_name__>(ms);
                }
                break;
            case 1192:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_SSBattleResult_ARG_int32_fubenId_int32_type__>(ms);
                }
                break;
            case 1193:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_AcceptBattleAward_ARG_int32_fubenId__>(ms);
                }
                break;
            case 1194:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_AstrologyLevelUp_ARG_int32_bagId_int32_bagIndex_Int32Array_needList__>(ms);
                }
                break;
            case 1195:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_AstrologyEquipOn_ARG_int32_bagIndex_int32_astrologyId_int32_Index__>(ms);
                }
                break;
            case 1196:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_AstrologyEquipOff_ARG_int32_astrologyId_int32_Index__>(ms);
                }
                break;
            case 1197:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_AstrologyDrawOver_ARG_DrawItemResult_Items_int64_getTime__>(ms);
                }
                break;
            case 1198:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_SyncAddFriend_ARG_int32_type_CharacterSimpleData_character__>(ms);
                }
                break;
            case 1199:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_UsePetExpItem_ARG_int32_petId_int32_itemId_int32_itemCount__>(ms);
                }
                break;
            case 1200:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_Reincarnation_ARG_int32_typeId__>(ms);
                }
                break;
            case 1201:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_UpgradeHonor_ARG_int32_typeId__>(ms);
                }
                break;
            case 1202:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_ReadyToEnter_ARG_int32_placeholder__>(ms);
                }
                break;
            case 1203:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_LogicNotifyMessage_ARG_int32_type_string_info_int32_addChat__>(ms);
                }
                break;
            case 1204:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_NotifGainRes_ARG_DataChangeList_changes__>(ms);
                }
                break;
            case 1205:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_BattleResult_ARG_int32_dungeonId_int32_resultType_int32_first__>(ms);
                }
                break;
            case 1206:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_ApplyCityBuildingData_ARG_int32_areaId__>(ms);
                }
                break;
            case 1207:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_ApplyBagByType_ARG_int32_bagType__>(ms);
                }
                break;
            case 1208:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_NotifyP1vP1Change_ARG_P1vP1Change_One_one__>(ms);
                }
                break;
            case 1209:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_SSGetFriendList_ARG_int32_typeId__>(ms);
                }
                break;
            case 1210:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_SyncFriendDataChange_ARG_CharacterSimpleDataList_Changes__>(ms);
                }
                break;
            case 1211:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_SyncFriendDelete_ARG_int32_type_uint64_characterId__>(ms);
                }
                break;
            case 1212:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_SSSendSimpleData_ARG_uint64_haveId_CharacterSimpleData_SimpleData__>(ms);
                }
                break;
            case 1213:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_SSFriendpPssiveChange_ARG_int32_type_uint64_characterId_int32_operate__>(ms);
                }
                break;
            case 1214:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_SSFetchExdata_ARG_Int32Array_idList__>(ms);
                }
                break;
            case 1215:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_SSDeleteItemByIndex_ARG_int32_bagId_int32_bagIndex_int32_itemCount__>(ms);
                }
                break;
            case 1216:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_StoreBuyEquip_ARG_int32_storeId_int32_bagId_int32_bagIndex_int32_serviceType__>(ms);
                }
                break;
            case 1217:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_GetQuestionData_ARG_int32_placeholder__>(ms);
                }
                break;
            case 1218:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_AnswerQuestion_ARG_int32_answer__>(ms);
                }
                break;
            case 1219:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_SSGetMissionEnterScene_ARG_int32_missionId__>(ms);
                }
                break;
            case 1220:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_RemoveErrorAnswer_ARG_int32_placeholder__>(ms);
                }
                break;
            case 1221:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_AnswerQuestionUseItem_ARG_int32_placeholder__>(ms);
                }
                break;
            case 1222:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_ApplyPlayerHeadInfo_ARG_uint64_characterId__>(ms);
                }
                break;
            case 1223:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_NotifyDungeonClose_ARG_int32_fubenId_Uint64Array_playerIds__>(ms);
                }
                break;
            case 1224:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_GetCompensationList_ARG_int32_placeholder__>(ms);
                }
                break;
            case 1225:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_ReceiveCompensation_ARG_int32_indexType_int32_type__>(ms);
                }
                break;
            case 1226:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_SSSetExdata_ARG_Dict_int_int_Data_changes__>(ms);
                }
                break;
            case 1227:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_SSSetFlag_ARG_Dict_int_int_Data_changes__>(ms);
                }
                break;
            case 1228:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_SelectTitle_ARG_int32_id__>(ms);
                }
                break;
            case 1229:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_LogicGetTitleList_ARG_uint32_placeholder__>(ms);
                }
                break;
            case 1230:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_RechargeSuccess_ARG_string_platform_int32_payType_float_price_string_orderId_string_channel__>(ms);
                }
                break;
            case 1231:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_NotifyRechargeSuccess_ARG_int32_rechargeId__>(ms);
                }
                break;
            case 1232:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_GetItemCount_ARG_int32_itemId__>(ms);
                }
                break;
            case 1233:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_RetrainPet_ARG_int32_petId__>(ms);
                }
                break;
            case 1234:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_UpgradeAllianceBuff_ARG_int32_buffId__>(ms);
                }
                break;
            case 1235:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_SSGetAllianceBuff_ARG_int32_placeholder__>(ms);
                }
                break;
            case 1236:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_NotifyAllianceWarInfo_ARG_AllianceWarInfo_info__>(ms);
                }
                break;
            case 1237:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_Investment_ARG_int32_id__>(ms);
                }
                break;
            case 1238:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_GainReward_ARG_int32_type_int32_id__>(ms);
                }
                break;
            case 1239:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_NotifyEnterFuben_ARG_int32_fubenId__>(ms);
                }
                break;
            case 1240:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_Worship_ARG_int32_type__>(ms);
                }
                break;
            case 1241:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_ChangeServer_ARG_int32_newServerId__>(ms);
                }
                break;
            case 1242:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_UseGiftCode_ARG_string_code__>(ms);
                }
                break;
            case 1243:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_ApplyRechargeTables_ARG_int32_placeholder__>(ms);
                }
                break;
            case 1244:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_ApplyFirstChargeItem_ARG_int32_placeholder__>(ms);
                }
                break;
            case 1245:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_ApplyGetFirstChargeItem_ARG_int32_index__>(ms);
                }
                break;
            case 1246:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_TakeMultyExpAward_ARG_int32_id__>(ms);
                }
                break;
            case 1247:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_RandEquipSkill_ARG_int32_bagType_int32_bagIndex_int32_itemId__>(ms);
                }
                break;
            case 1248:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_UseEquipSkill_ARG_int32_bagType_int32_bagIndex_int32_type__>(ms);
                }
                break;
            case 1249:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_LogicGetElfData_ARG_uint64_chararcterId__>(ms);
                }
                break;
            case 1250:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_ReplaceElfSkill_ARG_int32_elfBagIndex_int32_exdataIndex_int32_itemBagId_int32_itemBagIndex__>(ms);
                }
                break;
            case 1252:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_RecycleBagItemList_ARG_RecycleItemList_itemList__>(ms);
                }
                break;
            case 1253:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_ResolveElfList_ARG_Int32Array_elfIndexList__>(ms);
                }
                break;
            case 1260:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_CSEnterEraById_ARG_int32_eraId__>(ms);
                }
                break;
            case 1261:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_EraPlayedSkill_ARG_int32_placeholder__>(ms);
                }
                break;
            case 1262:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_EraTakeAchvAward_ARG_int32_achvId__>(ms);
                }
                break;
            case 1263:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_EraTakeAward_ARG_int32_eraId__>(ms);
                }
                break;
            case 1264:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_RefreshHunterMission_ARG_int32_placeholder__>(ms);
                }
                break;
            case 1270:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_CSApplyOfflineExpData_ARG_int32_placeholder__>(ms);
                }
                break;
            case 1271:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_RereshTiralTime_ARG_int32_placeholder__>(ms);
                }
                break;
            case 1500:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_SBCleanClientCharacterData_ARG_uint64_clientId_uint64_characterId__>(ms);
                }
                break;
            case 1501:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_SSNotifyCharacterOnConnet_ARG_uint64_clientId_uint64_characterId__>(ms);
                }
                break;
            case 1503:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_BSNotifyCharacterOnLost_ARG_uint64_clientId_uint64_characterId__>(ms);
                }
                break;
            case 1504:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_SSRequestCityBuidlingPetData_ARG_uint64_guid__>(ms);
                }
                break;
            case 1505:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_GetReviewState_ARG_int32_type__>(ms);
                }
                break;
            case 1506:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_SSGetTodayFunbenCount_ARG_int32_serverId_uint64_characterId_int32_selecttype__>(ms);
                }
                break;
            case 1507:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_OnItemAuction_ARG_int32_type_int32_bagId_int32_bagIndex_int32_count_int32_needCount_int32_storeIndex__>(ms);
                }
                break;
            case 1508:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_BuyItemAuction_ARG_uint64_characterId_int64_guid_int64_managerId__>(ms);
                }
                break;
            case 1509:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_LogicGetAnyData_ARG_uint64_chararcterId__>(ms);
                }
                break;
            case 1510:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_ApplySellHistory_ARG_int32_type__>(ms);
                }
                break;
            case 1511:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_DrawWishItem_ARG_Int32Array_param__>(ms);
                }
                break;
            case 1512:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_ApplyOperationActivity_ARG_int32_serverId__>(ms);
                }
                break;
            case 1513:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_ClaimOperationReward_ARG_int32_type_int32_Id__>(ms);
                }
                break;
            case 1514:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_SyncOperationActivityItem_ARG_MsgOperActivtyItemList_items__>(ms);
                }
                break;
            case 1520:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_ApplyPromoteHP_ARG_int32_serverId_int32_activityId_int32_batteryId_int32_promoteType__>(ms);
                }
                break;
            case 1521:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_ApplyPromoteSkill_ARG_int32_serverId_int32_activityId_int32_batteryId_uint64_batteryGuid_int32_promoteType__>(ms);
                }
                break;
            case 1522:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_ApplyPickUpBox_ARG_int32_serverId_int32_activityId_int32_npcId__>(ms);
                }
                break;
            case 1523:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_ApplyJoinActivity_ARG_int32_serverId_int32_activityId__>(ms);
                }
                break;
            case 1524:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_ApplyPortraitAward_ARG_int32_serverId__>(ms);
                }
                break;
            case 1530:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_SSSyncCharacterFightPoint_ARG_int32_fp__>(ms);
                }
                break;
            case 1531:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_OnPlayerEnterSceneOver_ARG_int32_sceneId__>(ms);
                }
                break;
            case 1532:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_SyncOperationActivityTerm_ARG_int32_id_int32_param__>(ms);
                }
                break;
            case 1533:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_ApplyGetTowerReward_ARG_int32_serverId_int32_activityId_int32_idx__>(ms);
                }
                break;
            case 1534:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_AnchorGift_ARG_int32_itemId_int32_count__>(ms);
                }
                break;
            case 1600:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_SendJsonData_ARG_string_json__>(ms);
                }
                break;
            case 1601:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_BuyWingCharge_ARG_int32_placeholder__>(ms);
                }
                break;
            case 1602:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_BuyEnergyByType_ARG_int32_type__>(ms);
                }
                break;
            case 1603:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_SSLearnSkill_ARG_int32_skillId_int32_skillLevel__>(ms);
                }
                break;
            case 1605:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_GMDeleteMessage_ARG_uint64_id__>(ms);
                }
                break;
            case 1606:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_ApplyKaiFuTeHuiData_ARG_int32_placeholder__>(ms);
                }
                break;
            case 1607:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_BuyKaiFuTeHuiItem_ARG_int32_tableId__>(ms);
                }
                break;
            case 1608:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_BattleUnionDonateEquip_ARG_int32_bagIndex__>(ms);
                }
                break;
            case 1609:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_BattleUnionTakeOutEquip_ARG_int32_itemId_int32_bagIndex__>(ms);
                }
                break;
            case 1990:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_GetCharacterData_ARG_uint64_id__>(ms);
                }
                break;
            case 1992:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_SendMailToCharacter_ARG_string_title_string_content_Dict_int_int_Data_items_int32_state__>(ms);
                }
                break;
            case 1993:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_SendMailToServer_ARG_uint32_serverId_uint64_mailId__>(ms);
                }
                break;
            case 1994:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_UpdateServer_ARG_int32_placeholder__>(ms);
                }
                break;
            case 1995:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_GMCommand_ARG_StringArray_commonds__>(ms);
                }
                break;
            case 1996:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_SendMailToCharacterById_ARG_int32_mailId_int32_createType_int32_type_Int32Array_countList__>(ms);
                }
                break;
            case 1999:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_ClientErrorMessage_ARG_int32_errorType_string_errorMsg__>(ms);
                }
                break;
            case 1604:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_SendQuestion_ARG_MailQuestion_mail__>(ms);
                }
                break;
            case 1330:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_SendSurvey_ARG_int32_id_Vec2Array_datas__>(ms);
                }
                break;
            case 1314:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_TowerSweep_ARG_int32_param__>(ms);
                }
                break;
            case 1315:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_TowerBuySweepTimes_ARG_int32_param__>(ms);
                }
                break;
            case 1316:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_CheckTowerDailyInfo_ARG_int32_param__>(ms);
                }
                break;
            case 1318:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_SetHandbookFight_ARG_int32_id__>(ms);
                }
                break;
            case 1320:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_AskMountData_ARG_uint32_placeholder__>(ms);
                }
                break;
            case 1321:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_MountUp_ARG_int32_param__>(ms);
                }
                break;
            case 1322:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_RideMount_ARG_int32_id__>(ms);
                }
                break;
            case 1323:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_MountSkill_ARG_int32_SkillId__>(ms);
                }
                break;
            case 1324:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_MountFeed_ARG_int32_ItemId__>(ms);
                }
                break;
            case 1325:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_LogicGetMountData_ARG_uint64_chararcterId__>(ms);
                }
                break;
            case 1326:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_Mount_ARG_int32_ItemId__>(ms);
                }
                break;
            case 1327:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_SendMountData_ARG_MountData_data__>(ms);
                }
                break;
            case 1328:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_NotifySnapShotResult_ARG_int32_state__>(ms);
                }
                break;
            case 1329:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_CloneCharacterDbById_ARG_uint64_fromId_uint64_toId__>(ms);
                }
                break;
            case 1331:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_AddSkillPoint_ARG_int32_skillId_int32_point__>(ms);
                }
                break;
            case 1332:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_BossHomeCost_ARG_int32_id__>(ms);
                }
                break;
            case 1333:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_GiveItemList_ARG_Dict_int_int_Data_items_int32_from__>(ms);
                }
                break;
            case 1336:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_AddMountSkin_ARG_int32_id__>(ms);
                }
                break;
            case 1337:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_ApplyFieldActivityReward_ARG_int32_id__>(ms);
                }
                break;
            case 1338:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_ApplyFriendListData_ARG_int32_id__>(ms);
                }
                break;
            case 1339:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_ApplyPlayerFlag_ARG_Int32Array_flagList__>(ms);
                }
                break;
            case 1340:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_UseShiZhuang_ARG_int32_bagId_int32_bagItemIndex_int32_part__>(ms);
                }
                break;
            case 1341:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_ClickMayaTip_ARG_int32_id__>(ms);
                }
                break;
            case 1342:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_ApplyMayaSkill_ARG_int32_id__>(ms);
                }
                break;
            case 1343:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_ChangeEquipState_ARG_Int32Array_parts_bool_state__>(ms);
                }
                break;
            case 1344:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_SSSendMailById_ARG_int32_tableId_int32_ExtendType_string_ExtendPara0_string_ExtendPara1__>(ms);
                }
                break;
            case 1345:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_RefreshFashionInfo_ARG_int32_placeholder__>(ms);
                }
                break;
            case 1346:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_NotifyPlayerMoniterData_ARG_MsgChatMoniterData_data__>(ms);
                }
                break;
            case 1347:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_GetPlayerMoniterData_ARG_uint64_characterId__>(ms);
                }
                break;
            case 1348:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_ApplySuperVIP_ARG_int32_id__>(ms);
                }
                break;
            case 1349:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_WorshipMonument_ARG_int32_MonumentId__>(ms);
                }
                break;
            case 1350:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_SaveSuperExcellentEquip_ARG_int32_bagType_int32_bagIndex_int32_ok__>(ms);
                }
                break;
            case 1351:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_ModifyPlayerName_ARG_string_modifyName__>(ms);
                }
                break;
            case 1352:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_InviteChallenge_ARG_uint64_characterId__>(ms);
                }
                break;
            case 1353:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_ReceiveChallenge_ARG_uint64_characterId_string_name_string_server__>(ms);
                }
                break;
            case 1354:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_AcceptChallenge_ARG_uint64_characterId_bool_accept__>(ms);
                }
                break;
            case 1355:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Logic_NotifyInviteChallenge_ARG_uint64_invitorId_string_invitorName_int32_invitorServerId__>(ms);
                }
                break;
            default:
                break;
            }

            return null;
        }

        public override IEnumerator OnClientConnected(Coroutine coroutine, string target, ulong clientId, ulong characterId, uint packId)
        {
            if (target != "client")
            {
                return null;
            }

            var proxy = NewCharacterIn(characterId, clientId);
            if (proxy != null)
            {
                Proxys[characterId] = proxy;
                return mProxyImpl.OnConnected(coroutine, proxy, packId);
            }
            return null;
        }
        public override IEnumerator OnClientLost(Coroutine coroutine, string target, ulong clientId, ulong characterId, uint packId)
        {
            if (target != "client")
            {
                yield break;
            }
            LogicCharacterProxy proxy = null;
            if (Proxys.TryGetValue(characterId, out proxy))
            {
                var co = CoroutineFactory.NewSubroutine(mProxyImpl.OnLost, coroutine, proxy, packId);
                if (co.MoveNext())
                {
                    yield return co;
                }
                Proxys.Remove(characterId);
            }
        }
        public void CharacterId2ClientId(IEnumerable<ulong> ids, List<ulong> known, List<ulong> unknown)
        {
            foreach (var id in ids)
            {
                LogicCharacterProxy proxy;
                if (Proxys.TryGetValue(id, out proxy))
                {
                    known.Add(((LogicCharacterProxy)proxy).ClientId);
                }
                else
                {
                    unknown.Add(id);
                }
            }
        }
        /// <summary>
        /// GM命令数据
        /// </summary>
        public IEnumerator GMLogic(Coroutine coroutine, GMLogicInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.GMLogic(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 客户端请求技能数据
        /// </summary>
        public IEnumerator ApplySkill(Coroutine coroutine, ApplySkillInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.ApplySkill(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 升级天赋
        /// </summary>
        public IEnumerator UpgradeInnate(Coroutine coroutine, UpgradeInnateInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.UpgradeInnate(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 重置天赋
        /// </summary>
        public IEnumerator ClearInnate(Coroutine coroutine, ClearInnateInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.ClearInnate(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 客户端请求所有包裹数据
        /// </summary>
        public IEnumerator ApplyBags(Coroutine coroutine, ApplyBagsInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.ApplyBags(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 客户端请求标记位数据
        /// </summary>
        public IEnumerator ApplyFlag(Coroutine coroutine, ApplyFlagInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.ApplyFlag(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 客户端请求扩展数据
        /// </summary>
        public IEnumerator ApplyExdata(Coroutine coroutine, ApplyExdataInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.ApplyExdata(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 客户端请求64位扩展数据
        /// </summary>
        public IEnumerator ApplyExdata64(Coroutine coroutine, ApplyExdata64InMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.ApplyExdata64(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 客户端请求任务数据
        /// </summary>
        public IEnumerator ApplyMission(Coroutine coroutine, ApplyMissionInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.ApplyMission(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 客户端请求图鉴
        /// </summary>
        public IEnumerator ApplyBooks(Coroutine coroutine, ApplyBooksInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.ApplyBooks(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 换装备
        /// </summary>
        public IEnumerator ReplaceEquip(Coroutine coroutine, ReplaceEquipInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.ReplaceEquip(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 接受任务
        /// </summary>
        public IEnumerator AcceptMission(Coroutine coroutine, AcceptMissionInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.AcceptMission(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 提交任务
        /// </summary>
        public IEnumerator CommitMission(Coroutine coroutine, CommitMissionInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.CommitMission(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 完成任务
        /// </summary>
        public IEnumerator CompleteMission(Coroutine coroutine, CompleteMissionInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.CompleteMission(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 放弃任务
        /// </summary>
        public IEnumerator DropMission(Coroutine coroutine, DropMissionInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.DropMission(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 同步任务数据
        /// </summary>
        public object SyncMission(ulong __characterId__, ulong __clientId__, int missionId, int state, int param)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 1060;
            desc.CharacterId = __characterId__;
            desc.ClientId = __clientId__;
            desc.PacketId = 0;

            var __data__ = new __RPC_Logic_SyncMission_ARG_int32_missionId_int32_state_int32_param__();
            __data__.MissionId=missionId;
            __data__.State=state;
            __data__.Param=param;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            desc.Type = (int)MessageType.SC;
            desc.ServiceType = (int) ServiceType.Logic;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// 同步标记位
        /// </summary>
        public object SyncFlag(ulong __characterId__, ulong __clientId__, int flagId, int param)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 1061;
            desc.CharacterId = __characterId__;
            desc.ClientId = __clientId__;
            desc.PacketId = 0;

            var __data__ = new __RPC_Logic_SyncFlag_ARG_int32_flagId_int32_param__();
            __data__.FlagId=flagId;
            __data__.Param=param;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            desc.Type = (int)MessageType.SC;
            desc.ServiceType = (int) ServiceType.Logic;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// 同步标记位
        /// </summary>
        public object SyncFlagList(ulong __characterId__, ulong __clientId__, Int32Array trueList, Int32Array falseList)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 1062;
            desc.CharacterId = __characterId__;
            desc.ClientId = __clientId__;
            desc.PacketId = 0;

            var __data__ = new __RPC_Logic_SyncFlagList_ARG_Int32Array_trueList_Int32Array_falseList__();
            __data__.TrueList=trueList;
            __data__.FalseList=falseList;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            desc.Type = (int)MessageType.SC;
            desc.ServiceType = (int) ServiceType.Logic;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// 同步扩展数据
        /// </summary>
        public object SyncExdata(ulong __characterId__, ulong __clientId__, int exdataId, int value)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 1063;
            desc.CharacterId = __characterId__;
            desc.ClientId = __clientId__;
            desc.PacketId = 0;

            var __data__ = new __RPC_Logic_SyncExdata_ARG_int32_exdataId_int32_value__();
            __data__.ExdataId=exdataId;
            __data__.Value=value;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            desc.Type = (int)MessageType.SC;
            desc.ServiceType = (int) ServiceType.Logic;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// 同步扩展数据
        /// </summary>
        public object SyncExdataList(ulong __characterId__, ulong __clientId__, Dict_int_int_Data diff)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 1064;
            desc.CharacterId = __characterId__;
            desc.ClientId = __clientId__;
            desc.PacketId = 0;

            var __data__ = new __RPC_Logic_SyncExdataList_ARG_Dict_int_int_Data_diff__();
            __data__.Diff=diff;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            desc.Type = (int)MessageType.SC;
            desc.ServiceType = (int) ServiceType.Logic;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// 同步64位扩展数据
        /// </summary>
        public object SyncExdata64(ulong __characterId__, ulong __clientId__, int exdataId, long value)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 1065;
            desc.CharacterId = __characterId__;
            desc.ClientId = __clientId__;
            desc.PacketId = 0;

            var __data__ = new __RPC_Logic_SyncExdata64_ARG_int32_exdataId_int64_value__();
            __data__.ExdataId=exdataId;
            __data__.Value=value;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            desc.Type = (int)MessageType.SC;
            desc.ServiceType = (int) ServiceType.Logic;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// 同步资源数据
        /// </summary>
        public object SyncResources(ulong __characterId__, ulong __clientId__, int resId, int value)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 1066;
            desc.CharacterId = __characterId__;
            desc.ClientId = __clientId__;
            desc.PacketId = 0;

            var __data__ = new __RPC_Logic_SyncResources_ARG_int32_resId_int32_value__();
            __data__.ResId=resId;
            __data__.Value=value;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            desc.Type = (int)MessageType.SC;
            desc.ServiceType = (int) ServiceType.Logic;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// 同步包裹变化
        /// </summary>
        public object SyncItems(ulong __characterId__, ulong __clientId__, BagsChangeData bag)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 1067;
            desc.CharacterId = __characterId__;
            desc.ClientId = __clientId__;
            desc.PacketId = 0;

            var __data__ = new __RPC_Logic_SyncItems_ARG_BagsChangeData_bag__();
            __data__.Bag=bag;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            desc.Type = (int)MessageType.SC;
            desc.ServiceType = (int) ServiceType.Logic;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// 装备技能
        /// </summary>
        public IEnumerator EquipSkill(Coroutine coroutine, EquipSkillInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.EquipSkill(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 升级技能
        /// </summary>
        public IEnumerator UpgradeSkill(Coroutine coroutine, UpgradeSkillInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.UpgradeSkill(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 道具出售
        /// </summary>
        public IEnumerator SellBagItem(Coroutine coroutine, SellBagItemInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.SellBagItem(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 道具回收
        /// </summary>
        public IEnumerator RecycleBagItem(Coroutine coroutine, RecycleBagItemInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.RecycleBagItem(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// </summary>
        public IEnumerator EnchanceEquip(Coroutine coroutine, EnchanceEquipInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.EnchanceEquip(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 强化追加
        /// </summary>
        public IEnumerator AppendEquip(Coroutine coroutine, AppendEquipInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.AppendEquip(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 装备洗练
        /// </summary>
        public IEnumerator ResetExcellentEquip(Coroutine coroutine, ResetExcellentEquipInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.ResetExcellentEquip(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 洗炼结果确认
        /// </summary>
        public IEnumerator ConfirmResetExcellentEquip(Coroutine coroutine, ConfirmResetExcellentEquipInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.ConfirmResetExcellentEquip(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 锁定洗炼
        /// </summary>
        public IEnumerator SuperExcellentEquip(Coroutine coroutine, SuperExcellentEquipInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.SuperExcellentEquip(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 传承
        /// </summary>
        public IEnumerator SmritiEquip(Coroutine coroutine, SmritiEquipInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.SmritiEquip(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 使用道具
        /// </summary>
        public IEnumerator UseItem(Coroutine coroutine, UseItemInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.UseItem(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 同步任务变化
        /// </summary>
        public object SyncMissions(ulong __characterId__, ulong __clientId__, MissionDataMessage missions)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 1082;
            desc.CharacterId = __characterId__;
            desc.ClientId = __clientId__;
            desc.PacketId = 0;

            var __data__ = new __RPC_Logic_SyncMissions_ARG_MissionDataMessage_missions__();
            __data__.Missions=missions;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            desc.Type = (int)MessageType.SC;
            desc.ServiceType = (int) ServiceType.Logic;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// 游戏领奖
        /// </summary>
        public IEnumerator ActivationReward(Coroutine coroutine, ActivationRewardInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.ActivationReward(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 合成道具
        /// </summary>
        public IEnumerator ComposeItem(Coroutine coroutine, ComposeItemInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.ComposeItem(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 成就完成提示
        /// </summary>
        public object FinishAchievement(ulong __characterId__, ulong __clientId__, int achievementId)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 1087;
            desc.CharacterId = __characterId__;
            desc.ClientId = __clientId__;
            desc.PacketId = 0;

            var __data__ = new __RPC_Logic_FinishAchievement_ARG_int32_achievementId__();
            __data__.AchievementId=achievementId;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            desc.Type = (int)MessageType.SC;
            desc.ServiceType = (int) ServiceType.Logic;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// 成就领奖
        /// </summary>
        public IEnumerator RewardAchievement(Coroutine coroutine, RewardAchievementInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.RewardAchievement(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 分配属性点
        /// </summary>
        public IEnumerator DistributionAttrPoint(Coroutine coroutine, DistributionAttrPointInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.DistributionAttrPoint(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 洗点
        /// </summary>
        public IEnumerator RefreshAttrPoint(Coroutine coroutine, RefreshAttrPointInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.RefreshAttrPoint(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 设置自动加点
        /// </summary>
        public IEnumerator SetAttributeAutoAdd(Coroutine coroutine, SetAttributeAutoAddInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.SetAttributeAutoAdd(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 请求好友数据0:好友，1:敌人，2:屏蔽
        /// </summary>
        public IEnumerator ApplyFriends(Coroutine coroutine, ApplyFriendsInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.ApplyFriends(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 查找玩家
        /// </summary>
        public IEnumerator SeekCharacters(Coroutine coroutine, SeekCharactersInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.SeekCharacters(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// </summary>
        public object SeekCharactersReceive(ulong __characterId__, ulong __clientId__, CharacterSimpleDataList result)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 1393;
            desc.CharacterId = __characterId__;
            desc.ClientId = __clientId__;
            desc.PacketId = 0;

            var __data__ = new __RPC_Logic_SeekCharactersReceive_ARG_CharacterSimpleDataList_result__();
            __data__.Result=result;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            desc.Type = (int)MessageType.SC;
            desc.ServiceType = (int) ServiceType.Logic;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// 查找好友
        /// </summary>
        public IEnumerator SeekFriends(Coroutine coroutine, SeekFriendsInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.SeekFriends(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// </summary>
        public object SeekFriendsReceive(ulong __characterId__, ulong __clientId__, CharacterSimpleDataList result)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 1394;
            desc.CharacterId = __characterId__;
            desc.ClientId = __clientId__;
            desc.PacketId = 0;

            var __data__ = new __RPC_Logic_SeekFriendsReceive_ARG_CharacterSimpleDataList_result__();
            __data__.Result=result;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            desc.Type = (int)MessageType.SC;
            desc.ServiceType = (int) ServiceType.Logic;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// 添加好友
        /// </summary>
        public IEnumerator AddFriendById(Coroutine coroutine, AddFriendByIdInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.AddFriendById(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 添加好友
        /// </summary>
        public IEnumerator AddFriendByName(Coroutine coroutine, AddFriendByNameInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.AddFriendByName(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 删除好友
        /// </summary>
        public IEnumerator DelFriendById(Coroutine coroutine, DelFriendByIdInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.DelFriendById(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 副本结束，通知结果
        /// </summary>
        public object DungeonComplete(ulong __characterId__, ulong __clientId__, FubenResult result)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 1101;
            desc.CharacterId = __characterId__;
            desc.ClientId = __clientId__;
            desc.PacketId = 0;

            var __data__ = new __RPC_Logic_DungeonComplete_ARG_FubenResult_result__();
            __data__.Result=result;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            desc.Type = (int)MessageType.SC;
            desc.ServiceType = (int) ServiceType.Logic;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// 通知logic，我选择的奖励
        /// </summary>
        public IEnumerator SelectDungeonReward(Coroutine coroutine, SelectDungeonRewardInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.SelectDungeonReward(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 进入副本
        /// </summary>
        public IEnumerator EnterFuben(Coroutine coroutine, EnterFubenInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.EnterFuben(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 重置副本
        /// </summary>
        public IEnumerator ResetFuben(Coroutine coroutine, ResetFubenInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.ResetFuben(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 扫荡副本
        /// </summary>
        public IEnumerator SweepFuben(Coroutine coroutine, SweepFubenInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.SweepFuben(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 获得商店的道具列表
        /// </summary>
        public IEnumerator ApplyStores(Coroutine coroutine, ApplyStoresInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.ApplyStores(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 激活图鉴
        /// </summary>
        public IEnumerator ActivateBook(Coroutine coroutine, ActivateBookInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.ActivateBook(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 主动更新图鉴组激活状态
        /// </summary>
        public object ActivateBookGroup(ulong __characterId__, ulong __clientId__, int groupId)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 1319;
            desc.CharacterId = __characterId__;
            desc.ClientId = __clientId__;
            desc.PacketId = 0;

            var __data__ = new __RPC_Logic_ActivateBookGroup_ARG_int32_groupId__();
            __data__.GroupId=groupId;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            desc.Type = (int)MessageType.SC;
            desc.ServiceType = (int) ServiceType.Logic;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// 整理包裹
        /// </summary>
        public IEnumerator SortBag(Coroutine coroutine, SortBagInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.SortBag(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 请求玩家的详细信息
        /// </summary>
        public IEnumerator ApplyPlayerInfo(Coroutine coroutine, ApplyPlayerInfoInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.ApplyPlayerInfo(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 通知服务器修改标志位
        /// </summary>
        public IEnumerator SetFlag(Coroutine coroutine, SetFlagInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.SetFlag(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 通知服务器修改扩展数据
        /// </summary>
        public IEnumerator SetExData(Coroutine coroutine, SetExDataInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.SetExData(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 请求邮件数据
        /// </summary>
        public IEnumerator ApplyMails(Coroutine coroutine, ApplyMailsInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.ApplyMails(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 请求邮件详细数据
        /// </summary>
        public IEnumerator ApplyMailInfo(Coroutine coroutine, ApplyMailInfoInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.ApplyMailInfo(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 领取邮件
        /// </summary>
        public IEnumerator ReceiveMail(Coroutine coroutine, ReceiveMailInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.ReceiveMail(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 删除邮件
        /// </summary>
        public IEnumerator DeleteMail(Coroutine coroutine, DeleteMailInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.DeleteMail(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 主动更新邮件
        /// </summary>
        public object SyncMails(ulong __characterId__, ulong __clientId__, MailList mails)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 1116;
            desc.CharacterId = __characterId__;
            desc.ClientId = __clientId__;
            desc.PacketId = 0;

            var __data__ = new __RPC_Logic_SyncMails_ARG_MailList_mails__();
            __data__.Mails=mails;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            desc.Type = (int)MessageType.SC;
            desc.ServiceType = (int) ServiceType.Logic;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// 远程修理
        /// </summary>
        public IEnumerator RepairEquip(Coroutine coroutine, RepairEquipInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.RepairEquip(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 取出仓库
        /// </summary>
        public IEnumerator DepotTakeOut(Coroutine coroutine, DepotTakeOutInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.DepotTakeOut(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 放进仓库
        /// </summary>
        public IEnumerator DepotPutIn(Coroutine coroutine, DepotPutInInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.DepotPutIn(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 取出许愿池仓库,index = -1全部取出
        /// </summary>
        public IEnumerator WishingPoolDepotTakeOut(Coroutine coroutine, WishingPoolDepotTakeOutInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.WishingPoolDepotTakeOut(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 商店购买
        /// </summary>
        public IEnumerator StoreBuy(Coroutine coroutine, StoreBuyInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.StoreBuy(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 请求家园数据
        /// </summary>
        public IEnumerator ApplyCityData(Coroutine coroutine, ApplyCityDataInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.ApplyCityData(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 家园操作
        /// </summary>
        public IEnumerator CityOperationRequest(Coroutine coroutine, CityOperationRequestInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.CityOperationRequest(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 同步家园建筑数据
        /// </summary>
        public object SyncCityBuildingData(ulong __characterId__, ulong __clientId__, BuildingList data)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 1126;
            desc.CharacterId = __characterId__;
            desc.ClientId = __clientId__;
            desc.PacketId = 0;

            var __data__ = new __RPC_Logic_SyncCityBuildingData_ARG_BuildingList_data__();
            __data__.Data=data;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            desc.Type = (int)MessageType.SC;
            desc.ServiceType = (int) ServiceType.Logic;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// 同步随从任务数据
        /// </summary>
        public object SyncPetMission(ulong __characterId__, ulong __clientId__, PetMissionList msg)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 1127;
            desc.CharacterId = __characterId__;
            desc.ClientId = __clientId__;
            desc.PacketId = 0;

            var __data__ = new __RPC_Logic_SyncPetMission_ARG_PetMissionList_msg__();
            __data__.Msg=msg;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            desc.Type = (int)MessageType.SC;
            desc.ServiceType = (int) ServiceType.Logic;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// 请求进入家园
        /// </summary>
        public IEnumerator EnterCity(Coroutine coroutine, EnterCityInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.EnterCity(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 有装备损坏
        /// </summary>
        public object EquipDurableBroken(ulong __characterId__, ulong __clientId__, int partId, int value)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 1129;
            desc.CharacterId = __characterId__;
            desc.ClientId = __clientId__;
            desc.PacketId = 0;

            var __data__ = new __RPC_Logic_EquipDurableBroken_ARG_int32_partId_int32_value__();
            __data__.PartId=partId;
            __data__.Value=value;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            desc.Type = (int)MessageType.SC;
            desc.ServiceType = (int) ServiceType.Logic;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// 装备耐久第一次变化，希望客户端可以下次开界面时请求耐久
        /// </summary>
        public object EquipDurableChange(ulong __characterId__, ulong __clientId__, int placeholder)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 1130;
            desc.CharacterId = __characterId__;
            desc.ClientId = __clientId__;
            desc.PacketId = 0;

            var __data__ = new __RPC_Logic_EquipDurableChange_ARG_int32_placeholder__();
            __data__.Placeholder=placeholder;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            desc.Type = (int)MessageType.SC;
            desc.ServiceType = (int) ServiceType.Logic;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// 有装备损坏
        /// </summary>
        public IEnumerator ApplyEquipDurable(Coroutine coroutine, ApplyEquipDurableInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.ApplyEquipDurable(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 精灵相关接口
        /// Type:0休息, 1出战，2展示 //3休息
        /// 4升级阵法
        /// 5升级
        /// 6分解
        /// </summary>
        public IEnumerator ElfOperate(Coroutine coroutine, ElfOperateInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.ElfOperate(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// </summary>
        public IEnumerator ElfReplace(Coroutine coroutine, ElfReplaceInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.ElfReplace(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 翅膀升阶
        /// </summary>
        public IEnumerator WingFormation(Coroutine coroutine, WingFormationInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.WingFormation(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 翅膀培养
        /// </summary>
        public IEnumerator WingTrain(Coroutine coroutine, WingTrainInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.WingTrain(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 宠物操作
        /// </summary>
        public IEnumerator OperatePet(Coroutine coroutine, OperatePetInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.OperatePet(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 操作宠任务
        /// </summary>
        public IEnumerator OperatePetMission(Coroutine coroutine, OperatePetMissionInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.OperatePetMission(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 拾取勋章
        /// </summary>
        public IEnumerator PickUpMedal(Coroutine coroutine, PickUpMedalInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.PickUpMedal(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 强化勋章
        /// </summary>
        public IEnumerator EnchanceMedal(Coroutine coroutine, EnchanceMedalInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.EnchanceMedal(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 装备勋章
        /// </summary>
        public IEnumerator EquipMedal(Coroutine coroutine, EquipMedalInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.EquipMedal(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// </summary>
        public IEnumerator SplitMedal(Coroutine coroutine, SplitMedalInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.SplitMedal(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 开启包裹
        /// </summary>
        public IEnumerator BuySpaceBag(Coroutine coroutine, BuySpaceBagInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.BuySpaceBag(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 删除宠物任务
        /// </summary>
        public object DeletePetMission(ulong __characterId__, ulong __clientId__, int missionId)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 1144;
            desc.CharacterId = __characterId__;
            desc.ClientId = __clientId__;
            desc.PacketId = 0;

            var __data__ = new __RPC_Logic_DeletePetMission_ARG_int32_missionId__();
            __data__.MissionId=missionId;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            desc.Type = (int)MessageType.SC;
            desc.ServiceType = (int) ServiceType.Logic;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// 建筑服务通用接口
        /// </summary>
        public IEnumerator UseBuildService(Coroutine coroutine, UseBuildServiceInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.UseBuildService(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 请求天梯玩家信息
        /// </summary>
        public IEnumerator GetP1vP1LadderPlayer(Coroutine coroutine, GetP1vP1LadderPlayerInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.GetP1vP1LadderPlayer(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 攻击某个天梯的玩家
        /// 0  正常
        /// 1  cd购买
        /// 2  次数购买
        /// </summary>
        public IEnumerator GetP1vP1FightPlayer(Coroutine coroutine, GetP1vP1FightPlayerInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.GetP1vP1FightPlayer(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 天梯战斗历史
        /// </summary>
        public IEnumerator GetP1vP1LadderOldList(Coroutine coroutine, GetP1vP1LadderOldListInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.GetP1vP1LadderOldList(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 天梯的奖励界面
        /// </summary>
        public object LogicP1vP1FightResult(ulong __characterId__, ulong __clientId__, P1vP1RewardData data)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 1152;
            desc.CharacterId = __characterId__;
            desc.ClientId = __clientId__;
            desc.PacketId = 0;

            var __data__ = new __RPC_Logic_LogicP1vP1FightResult_ARG_P1vP1RewardData_data__();
            __data__.Data=data;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            desc.Type = (int)MessageType.SC;
            desc.ServiceType = (int) ServiceType.Logic;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// 购买天梯次数（这个接口不用了）
        /// </summary>
        public IEnumerator BuyP1vP1Count(Coroutine coroutine, BuyP1vP1CountInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.BuyP1vP1Count(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 宠物蛋抽奖
        /// </summary>
        public IEnumerator DrawLotteryPetEgg(Coroutine coroutine, DrawLotteryPetEggInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.DrawLotteryPetEgg(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 回收装备 type: 0=出售装备,1=回收装备
        /// </summary>
        public IEnumerator RecoveryEquip(Coroutine coroutine, RecoveryEquipInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.RecoveryEquip(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 许愿池抽奖（这个接口不用了）
        /// </summary>
        public IEnumerator DrawWishingPool(Coroutine coroutine, DrawWishingPoolInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.DrawWishingPool(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 重置技能天赋
        /// </summary>
        public IEnumerator ResetSkillTalent(Coroutine coroutine, ResetSkillTalentInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.ResetSkillTalent(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 机器人完成副本
        /// </summary>
        public IEnumerator RobotcFinishFuben(Coroutine coroutine, RobotcFinishFubenInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.RobotcFinishFuben(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 战盟操作:创建
        /// </summary>
        public IEnumerator CreateAlliance(Coroutine coroutine, CreateAllianceInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.CreateAlliance(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 战盟操作:其他操作 type：0=申请加入（value=战盟ID）  1=取消申请（value=战盟ID）  2=退出战盟   3=同意邀请（value=战盟ID）  4=拒绝邀请（value=战盟ID）
        /// </summary>
        public IEnumerator AllianceOperation(Coroutine coroutine, AllianceOperationInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.AllianceOperation(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 战盟操作:其他操作 type：0=邀请加入 1=同意申请加入 2：拒绝申请
        /// </summary>
        public IEnumerator AllianceOperationCharacter(Coroutine coroutine, AllianceOperationCharacterInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.AllianceOperationCharacter(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 战盟操作:其他操作 type：0=邀请加入
        /// </summary>
        public IEnumerator AllianceOperationCharacterByName(Coroutine coroutine, AllianceOperationCharacterByNameInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.AllianceOperationCharacterByName(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 战盟信息通知 type：0=name1邀请您加入name2的战盟
        /// </summary>
        public object LogicSyncAllianceMessage(ulong __characterId__, ulong __clientId__, int type, string name1, int allianceId, string name2)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 1163;
            desc.CharacterId = __characterId__;
            desc.ClientId = __clientId__;
            desc.PacketId = 0;

            var __data__ = new __RPC_Logic_LogicSyncAllianceMessage_ARG_int32_type_string_name1_int32_allianceId_string_name2__();
            __data__.Type=type;
            __data__.Name1=name1;
            __data__.AllianceId=allianceId;
            __data__.Name2=name2;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            desc.Type = (int)MessageType.SC;
            desc.ServiceType = (int) ServiceType.Logic;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// 崇拜
        /// </summary>
        public IEnumerator WorshipCharacter(Coroutine coroutine, WorshipCharacterInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.WorshipCharacter(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 战盟捐献
        /// </summary>
        public IEnumerator DonationAllianceItem(Coroutine coroutine, DonationAllianceItemInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.DonationAllianceItem(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 精灵的抽奖结果
        /// </summary>
        public object ElfDrawOver(ulong __characterId__, ulong __clientId__, DrawItemResult Items, long getTime)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 1170;
            desc.CharacterId = __characterId__;
            desc.ClientId = __clientId__;
            desc.PacketId = 0;

            var __data__ = new __RPC_Logic_ElfDrawOver_ARG_DrawItemResult_Items_int64_getTime__();
            __data__.Items=Items;
            __data__.GetTime=getTime;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            desc.Type = (int)MessageType.SC;
            desc.ServiceType = (int) ServiceType.Logic;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// 增加天赋数量变化的通知界面
        /// </summary>
        public object TalentCountChange(ulong __characterId__, ulong __clientId__, int talentId, int value)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 1171;
            desc.CharacterId = __characterId__;
            desc.ClientId = __clientId__;
            desc.PacketId = 0;

            var __data__ = new __RPC_Logic_TalentCountChange_ARG_int32_talentId_int32_value__();
            __data__.TalentId=talentId;
            __data__.Value=value;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            desc.Type = (int)MessageType.SC;
            desc.ServiceType = (int) ServiceType.Logic;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// 家园任务：type 0=提交 2=购买
        /// </summary>
        public IEnumerator CityMissionOperation(Coroutine coroutine, CityMissionOperationInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.CityMissionOperation(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 家园任务：放弃
        /// </summary>
        public IEnumerator DropCityMission(Coroutine coroutine, DropCityMissionInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.DropCityMission(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 家园任务刷新
        /// </summary>
        public IEnumerator CityRefreshMission(Coroutine coroutine, CityRefreshMissionInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.CityRefreshMission(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 交易系统：上架道具
        /// </summary>
        public IEnumerator StoreOperationAdd(Coroutine coroutine, StoreOperationAddInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.StoreOperationAdd(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 交易系统：广播道具
        /// </summary>
        public IEnumerator StoreOperationBroadcast(Coroutine coroutine, StoreOperationBroadcastInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.StoreOperationBroadcast(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 交易系统：购买道具
        /// </summary>
        public IEnumerator StoreOperationBuy(Coroutine coroutine, StoreOperationBuyInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.StoreOperationBuy(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 交易系统：收回道具
        /// </summary>
        public IEnumerator StoreOperationCancel(Coroutine coroutine, StoreOperationCancelInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.StoreOperationCancel(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 交易系统：查看某人
        /// </summary>
        public IEnumerator StoreOperationLook(Coroutine coroutine, StoreOperationLookInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.StoreOperationLook(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 交易系统：获取自己正在交易的道具
        /// </summary>
        public IEnumerator StoreOperationLookSelf(Coroutine coroutine, StoreOperationLookSelfInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.StoreOperationLookSelf(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 交易系统：获取自己已贩卖的收获
        /// </summary>
        public IEnumerator StoreOperationHarvest(Coroutine coroutine, StoreOperationHarvestInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.StoreOperationHarvest(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 交易系统：兑换道具
        /// </summary>
        public IEnumerator SSStoreOperationExchange(Coroutine coroutine, SSStoreOperationExchangeInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.SSStoreOperationExchange(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 团购申请
        /// </summary>
        public IEnumerator ApplyGroupShopItems(Coroutine coroutine, ApplyGroupShopItemsInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.ApplyGroupShopItems(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 通知有东西被买了
        /// </summary>
        public object NotifyStoreBuyed(ulong __characterId__, ulong __clientId__, long storeId, ulong Aid, string Aname)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 1186;
            desc.CharacterId = __characterId__;
            desc.ClientId = __clientId__;
            desc.PacketId = 0;

            var __data__ = new __RPC_Logic_NotifyStoreBuyed_ARG_int64_storeId_uint64_Aid_string_Aname__();
            __data__.StoreId=storeId;
            __data__.Aid=Aid;
            __data__.Aname=Aname;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            desc.Type = (int)MessageType.SC;
            desc.ServiceType = (int) ServiceType.Logic;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// 购买团购
        /// </summary>
        public IEnumerator BuyGroupShopItem(Coroutine coroutine, BuyGroupShopItemInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.BuyGroupShopItem(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 获取我当前的愿望
        /// </summary>
        public IEnumerator GetBuyedGroupShopItems(Coroutine coroutine, GetBuyedGroupShopItemsInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.GetBuyedGroupShopItems(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 获取团购历史
        /// </summary>
        public IEnumerator GetGroupShopHistory(Coroutine coroutine, GetGroupShopHistoryInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.GetGroupShopHistory(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        ///  领取战场奖励
        /// </summary>
        public IEnumerator AcceptBattleAward(Coroutine coroutine, AcceptBattleAwardInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.AcceptBattleAward(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        ///  占星台宝石升级
        /// </summary>
        public IEnumerator AstrologyLevelUp(Coroutine coroutine, AstrologyLevelUpInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.AstrologyLevelUp(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        ///  占星台宝石装备
        /// </summary>
        public IEnumerator AstrologyEquipOn(Coroutine coroutine, AstrologyEquipOnInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.AstrologyEquipOn(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        ///  占星台宝石卸载
        /// </summary>
        public IEnumerator AstrologyEquipOff(Coroutine coroutine, AstrologyEquipOffInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.AstrologyEquipOff(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 占星台抽奖结果
        /// </summary>
        public object AstrologyDrawOver(ulong __characterId__, ulong __clientId__, DrawItemResult Items, long getTime)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 1197;
            desc.CharacterId = __characterId__;
            desc.ClientId = __clientId__;
            desc.PacketId = 0;

            var __data__ = new __RPC_Logic_AstrologyDrawOver_ARG_DrawItemResult_Items_int64_getTime__();
            __data__.Items=Items;
            __data__.GetTime=getTime;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            desc.Type = (int)MessageType.SC;
            desc.ServiceType = (int) ServiceType.Logic;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// 额外增加了仇人
        /// </summary>
        public object SyncAddFriend(ulong __characterId__, ulong __clientId__, int type, CharacterSimpleData character)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 1198;
            desc.CharacterId = __characterId__;
            desc.ClientId = __clientId__;
            desc.PacketId = 0;

            var __data__ = new __RPC_Logic_SyncAddFriend_ARG_int32_type_CharacterSimpleData_character__();
            __data__.Type=type;
            __data__.Character=character;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            desc.Type = (int)MessageType.SC;
            desc.ServiceType = (int) ServiceType.Logic;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// 对随从使用经验药
        /// </summary>
        public IEnumerator UsePetExpItem(Coroutine coroutine, UsePetExpItemInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.UsePetExpItem(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 转生接口
        /// </summary>
        public IEnumerator Reincarnation(Coroutine coroutine, ReincarnationInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.Reincarnation(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 升级军衔
        /// </summary>
        public IEnumerator UpgradeHonor(Coroutine coroutine, UpgradeHonorInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.UpgradeHonor(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 通知一些消息 type:0提示字典
        /// </summary>
        public object LogicNotifyMessage(ulong __characterId__, ulong __clientId__, int type, string info, int addChat)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 1203;
            desc.CharacterId = __characterId__;
            desc.ClientId = __clientId__;
            desc.PacketId = 0;

            var __data__ = new __RPC_Logic_LogicNotifyMessage_ARG_int32_type_string_info_int32_addChat__();
            __data__.Type=type;
            __data__.Info=info;
            __data__.AddChat=addChat;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            desc.Type = (int)MessageType.SC;
            desc.ServiceType = (int) ServiceType.Logic;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// 通知客户端获得经验
        /// </summary>
        public object NotifGainRes(ulong __characterId__, ulong __clientId__, DataChangeList changes)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 1204;
            desc.CharacterId = __characterId__;
            desc.ClientId = __clientId__;
            desc.PacketId = 0;

            var __data__ = new __RPC_Logic_NotifGainRes_ARG_DataChangeList_changes__();
            __data__.Changes=changes;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            desc.Type = (int)MessageType.SC;
            desc.ServiceType = (int) ServiceType.Logic;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// 通知战场的结果界面信息
        /// </summary>
        public object BattleResult(ulong __characterId__, ulong __clientId__, int dungeonId, int resultType, int first)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 1205;
            desc.CharacterId = __characterId__;
            desc.ClientId = __clientId__;
            desc.PacketId = 0;

            var __data__ = new __RPC_Logic_BattleResult_ARG_int32_dungeonId_int32_resultType_int32_first__();
            __data__.DungeonId=dungeonId;
            __data__.ResultType=resultType;
            __data__.First=first;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            desc.Type = (int)MessageType.SC;
            desc.ServiceType = (int) ServiceType.Logic;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// 根据区域id请求建筑数据
        /// </summary>
        public IEnumerator ApplyCityBuildingData(Coroutine coroutine, ApplyCityBuildingDataInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.ApplyCityBuildingData(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 根据包裹类型请求背包数据
        /// </summary>
        public IEnumerator ApplyBagByType(Coroutine coroutine, ApplyBagByTypeInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.ApplyBagByType(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 自己被打了
        /// </summary>
        public object NotifyP1vP1Change(ulong __characterId__, ulong __clientId__, P1vP1Change_One one)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 1208;
            desc.CharacterId = __characterId__;
            desc.ClientId = __clientId__;
            desc.PacketId = 0;

            var __data__ = new __RPC_Logic_NotifyP1vP1Change_ARG_P1vP1Change_One_one__();
            __data__.One=one;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            desc.Type = (int)MessageType.SC;
            desc.ServiceType = (int) ServiceType.Logic;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// 通知好友数据变化
        /// </summary>
        public object SyncFriendDataChange(ulong __characterId__, ulong __clientId__, CharacterSimpleDataList Changes)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 1210;
            desc.CharacterId = __characterId__;
            desc.ClientId = __clientId__;
            desc.PacketId = 0;

            var __data__ = new __RPC_Logic_SyncFriendDataChange_ARG_CharacterSimpleDataList_Changes__();
            __data__.Changes=Changes;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            desc.Type = (int)MessageType.SC;
            desc.ServiceType = (int) ServiceType.Logic;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// 通知好友删除
        /// </summary>
        public object SyncFriendDelete(ulong __characterId__, ulong __clientId__, int type, ulong characterId)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 1211;
            desc.CharacterId = __characterId__;
            desc.ClientId = __clientId__;
            desc.PacketId = 0;

            var __data__ = new __RPC_Logic_SyncFriendDelete_ARG_int32_type_uint64_characterId__();
            __data__.Type=type;
            __data__.CharacterId=characterId;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            desc.Type = (int)MessageType.SC;
            desc.ServiceType = (int) ServiceType.Logic;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// 商店购买
        /// </summary>
        public IEnumerator StoreBuyEquip(Coroutine coroutine, StoreBuyEquipInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.StoreBuyEquip(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 获得当前题目
        /// </summary>
        public IEnumerator GetQuestionData(Coroutine coroutine, GetQuestionDataInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.GetQuestionData(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 回答当前题目
        /// </summary>
        public IEnumerator AnswerQuestion(Coroutine coroutine, AnswerQuestionInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.AnswerQuestion(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 使用道具22052去掉一个错误答案
        /// </summary>
        public IEnumerator RemoveErrorAnswer(Coroutine coroutine, RemoveErrorAnswerInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.RemoveErrorAnswer(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 使用道具 22051给予正确选择
        /// </summary>
        public IEnumerator AnswerQuestionUseItem(Coroutine coroutine, AnswerQuestionUseItemInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.AnswerQuestionUseItem(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 获取玩家基本信息
        /// </summary>
        public IEnumerator ApplyPlayerHeadInfo(Coroutine coroutine, ApplyPlayerHeadInfoInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.ApplyPlayerHeadInfo(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 获取补偿列表
        /// </summary>
        public IEnumerator GetCompensationList(Coroutine coroutine, GetCompensationListInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.GetCompensationList(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 领取补偿  IndexType =-1 代表一键全部  type ： 0 = 金币 ，1 = 钻石
        /// </summary>
        public IEnumerator ReceiveCompensation(Coroutine coroutine, ReceiveCompensationInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.ReceiveCompensation(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 选称号（目前只能选3号位的称号）
        /// </summary>
        public IEnumerator SelectTitle(Coroutine coroutine, SelectTitleInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.SelectTitle(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 通知客户端，充值成功
        /// </summary>
        public object NotifyRechargeSuccess(ulong __characterId__, ulong __clientId__, int rechargeId)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 1231;
            desc.CharacterId = __characterId__;
            desc.ClientId = __clientId__;
            desc.PacketId = 0;

            var __data__ = new __RPC_Logic_NotifyRechargeSuccess_ARG_int32_rechargeId__();
            __data__.RechargeId=rechargeId;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            desc.Type = (int)MessageType.SC;
            desc.ServiceType = (int) ServiceType.Logic;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// 对随从使用复训卷轴
        /// </summary>
        public IEnumerator RetrainPet(Coroutine coroutine, RetrainPetInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.RetrainPet(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 提升战盟Buff
        /// </summary>
        public IEnumerator UpgradeAllianceBuff(Coroutine coroutine, UpgradeAllianceBuffInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.UpgradeAllianceBuff(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 投资
        /// </summary>
        public IEnumerator Investment(Coroutine coroutine, InvestmentInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.Investment(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 领取累计充值，投资奖励
        /// </summary>
        public IEnumerator GainReward(Coroutine coroutine, GainRewardInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.GainReward(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 膜拜
        /// </summary>
        public IEnumerator Worship(Coroutine coroutine, WorshipInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.Worship(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 使用某个礼品码
        /// </summary>
        public IEnumerator UseGiftCode(Coroutine coroutine, UseGiftCodeInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.UseGiftCode(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 获取充值活动的数据
        /// </summary>
        public IEnumerator ApplyRechargeTables(Coroutine coroutine, ApplyRechargeTablesInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.ApplyRechargeTables(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 获取首冲数据
        /// </summary>
        public IEnumerator ApplyFirstChargeItem(Coroutine coroutine, ApplyFirstChargeItemInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.ApplyFirstChargeItem(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 获取首冲奖励
        /// </summary>
        public IEnumerator ApplyGetFirstChargeItem(Coroutine coroutine, ApplyGetFirstChargeItemInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.ApplyGetFirstChargeItem(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 领取副本多倍奖励
        /// </summary>
        public IEnumerator TakeMultyExpAward(Coroutine coroutine, TakeMultyExpAwardInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.TakeMultyExpAward(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        ///  给指定武器随机技能
        /// </summary>
        public IEnumerator RandEquipSkill(Coroutine coroutine, RandEquipSkillInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.RandEquipSkill(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        ///  应用武器技能(type == 0 取消)
        /// </summary>
        public IEnumerator UseEquipSkill(Coroutine coroutine, UseEquipSkillInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.UseEquipSkill(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// </summary>
        public IEnumerator ReplaceElfSkill(Coroutine coroutine, ReplaceElfSkillInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.ReplaceElfSkill(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// </summary>
        public IEnumerator RecycleBagItemList(Coroutine coroutine, RecycleBagItemListInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.RecycleBagItemList(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// </summary>
        public IEnumerator ResolveElfList(Coroutine coroutine, ResolveElfListInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.ResolveElfList(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 进入玛雅纪元
        /// </summary>
        public IEnumerator CSEnterEraById(Coroutine coroutine, CSEnterEraByIdInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.CSEnterEraById(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// </summary>
        public IEnumerator EraPlayedSkill(Coroutine coroutine, EraPlayedSkillInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.EraPlayedSkill(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// </summary>
        public IEnumerator EraTakeAchvAward(Coroutine coroutine, EraTakeAchvAwardInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.EraTakeAchvAward(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// </summary>
        public IEnumerator EraTakeAward(Coroutine coroutine, EraTakeAwardInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.EraTakeAward(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// </summary>
        public IEnumerator RefreshHunterMission(Coroutine coroutine, RefreshHunterMissionInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.RefreshHunterMission(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 请求离线经验数据
        /// </summary>
        public IEnumerator CSApplyOfflineExpData(Coroutine coroutine, CSApplyOfflineExpDataInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.CSApplyOfflineExpData(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// </summary>
        public IEnumerator RereshTiralTime(Coroutine coroutine, RereshTiralTimeInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.RereshTiralTime(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 是否在审核中
        /// </summary>
        public IEnumerator GetReviewState(Coroutine coroutine, GetReviewStateInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.GetReviewState(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 上架拍卖行
        /// </summary>
        public IEnumerator OnItemAuction(Coroutine coroutine, OnItemAuctionInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.OnItemAuction(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 购买拍卖道具
        /// </summary>
        public IEnumerator BuyItemAuction(Coroutine coroutine, BuyItemAuctionInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.BuyItemAuction(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 请求交易所的交易历史
        /// </summary>
        public IEnumerator ApplySellHistory(Coroutine coroutine, ApplySellHistoryInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.ApplySellHistory(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 许愿池抽卡
        /// </summary>
        public IEnumerator DrawWishItem(Coroutine coroutine, DrawWishItemInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.DrawWishItem(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 请求运营活动数据
        /// </summary>
        public IEnumerator ApplyOperationActivity(Coroutine coroutine, ApplyOperationActivityInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.ApplyOperationActivity(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 请求运营活动奖励
        /// </summary>
        public IEnumerator ClaimOperationReward(Coroutine coroutine, ClaimOperationRewardInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.ClaimOperationReward(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 同步运营活动内容
        /// </summary>
        public object SyncOperationActivityItem(ulong __characterId__, ulong __clientId__, MsgOperActivtyItemList items)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 1514;
            desc.CharacterId = __characterId__;
            desc.ClientId = __clientId__;
            desc.PacketId = 0;

            var __data__ = new __RPC_Logic_SyncOperationActivityItem_ARG_MsgOperActivtyItemList_items__();
            __data__.Items=items;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            desc.Type = (int)MessageType.SC;
            desc.ServiceType = (int) ServiceType.Logic;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// 提升炮台血量    promoteType:0表示钻石提升，1：表示道具提升
        /// </summary>
        public IEnumerator ApplyPromoteHP(Coroutine coroutine, ApplyPromoteHPInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.ApplyPromoteHP(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 提升炮台技能等级  promoteType:0表示钻石提升，1：表示道具提升
        /// </summary>
        public IEnumerator ApplyPromoteSkill(Coroutine coroutine, ApplyPromoteSkillInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.ApplyPromoteSkill(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 请求获得Boss宝箱
        /// </summary>
        public IEnumerator ApplyPickUpBox(Coroutine coroutine, ApplyPickUpBoxInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.ApplyPickUpBox(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 请求报名活动
        /// </summary>
        public IEnumerator ApplyJoinActivity(Coroutine coroutine, ApplyJoinActivityInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.ApplyJoinActivity(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 请求获得雕像奖励
        /// </summary>
        public IEnumerator ApplyPortraitAward(Coroutine coroutine, ApplyPortraitAwardInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.ApplyPortraitAward(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 同步运营活动内容
        /// </summary>
        public object SyncOperationActivityTerm(ulong __characterId__, ulong __clientId__, int id, int param)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 1532;
            desc.CharacterId = __characterId__;
            desc.ClientId = __clientId__;
            desc.PacketId = 0;

            var __data__ = new __RPC_Logic_SyncOperationActivityTerm_ARG_int32_id_int32_param__();
            __data__.Id=id;
            __data__.Param=param;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            desc.Type = (int)MessageType.SC;
            desc.ServiceType = (int) ServiceType.Logic;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// 请求领取炮台升级阶段奖励礼包
        /// </summary>
        public IEnumerator ApplyGetTowerReward(Coroutine coroutine, ApplyGetTowerRewardInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.ApplyGetTowerReward(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 请求灭世活动数据111
        /// CS CommonActivityData		ApplyActivityData(int32 serverId)=1520;
        /// 请求炮台信息
        /// CS BatteryDatas			    ApplyBatteryData(int32 activityId) = 1521;
        /// 提升炮台血量
        /// CS int32                    ApplyPromoteHP(int64 batteryGuid, int32 promoteType) = 1522;
        /// 提升炮台技能等级
        /// CS int32                    ApplyPromoteSkill(int64 batteryGuid, int32 promoteType) = 1523;
        /// 请求贡献排行榜
        /// CS ContriRankingData        ApplyContriRankingData(int32 activityId) = 1524;
        /// 请求积分排行榜
        /// CS PointRankingData         ApplyPointRankingData(int32 activityId) = 1525;
        /// 发送json串
        /// </summary>
        public IEnumerator SendJsonData(Coroutine coroutine, SendJsonDataInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.SendJsonData(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 翅膀充值
        /// </summary>
        public IEnumerator BuyWingCharge(Coroutine coroutine, BuyWingChargeInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.BuyWingCharge(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 灵兽岛购买体力
        /// 古域战场购买体力
        /// </summary>
        public IEnumerator BuyEnergyByType(Coroutine coroutine, BuyEnergyByTypeInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.BuyEnergyByType(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 获取开服特惠
        /// </summary>
        public IEnumerator ApplyKaiFuTeHuiData(Coroutine coroutine, ApplyKaiFuTeHuiDataInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.ApplyKaiFuTeHuiData(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// </summary>
        public IEnumerator BuyKaiFuTeHuiItem(Coroutine coroutine, BuyKaiFuTeHuiItemInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.BuyKaiFuTeHuiItem(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 捐赠装备到战盟仓库
        /// </summary>
        public IEnumerator BattleUnionDonateEquip(Coroutine coroutine, BattleUnionDonateEquipInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.BattleUnionDonateEquip(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 从战盟仓库取出装备
        /// </summary>
        public IEnumerator BattleUnionTakeOutEquip(Coroutine coroutine, BattleUnionTakeOutEquipInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.BattleUnionTakeOutEquip(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// GM相关 end
        /// 收集客户端报错
        /// </summary>
        public IEnumerator ClientErrorMessage(Coroutine coroutine, ClientErrorMessageInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.ClientErrorMessage(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// </summary>
        public IEnumerator SendQuestion(Coroutine coroutine, SendQuestionInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.SendQuestion(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// </summary>
        public IEnumerator SendSurvey(Coroutine coroutine, SendSurveyInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.SendSurvey(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 爬塔扫荡
        /// </summary>
        public IEnumerator TowerSweep(Coroutine coroutine, TowerSweepInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.TowerSweep(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// </summary>
        public IEnumerator TowerBuySweepTimes(Coroutine coroutine, TowerBuySweepTimesInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.TowerBuySweepTimes(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 
        /// </summary>
        public IEnumerator CheckTowerDailyInfo(Coroutine coroutine, CheckTowerDailyInfoInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.CheckTowerDailyInfo(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// </summary>
        public IEnumerator SetHandbookFight(Coroutine coroutine, SetHandbookFightInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.SetHandbookFight(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// </summary>
        public IEnumerator AskMountData(Coroutine coroutine, AskMountDataInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.AskMountData(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// </summary>
        public IEnumerator MountUp(Coroutine coroutine, MountUpInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.MountUp(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// </summary>
        public IEnumerator RideMount(Coroutine coroutine, RideMountInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.RideMount(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// </summary>
        public IEnumerator MountSkill(Coroutine coroutine, MountSkillInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.MountSkill(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// </summary>
        public IEnumerator MountFeed(Coroutine coroutine, MountFeedInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.MountFeed(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// </summary>
        public IEnumerator Mount(Coroutine coroutine, MountInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.Mount(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// </summary>
        public object SendMountData(ulong __characterId__, ulong __clientId__, MountData data)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 1327;
            desc.CharacterId = __characterId__;
            desc.ClientId = __clientId__;
            desc.PacketId = 0;

            var __data__ = new __RPC_Logic_SendMountData_ARG_MountData_data__();
            __data__.Data=data;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            desc.Type = (int)MessageType.SC;
            desc.ServiceType = (int) ServiceType.Logic;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// 通知记录角色结果
        /// </summary>
        public object NotifySnapShotResult(ulong __characterId__, ulong __clientId__, int state)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 1328;
            desc.CharacterId = __characterId__;
            desc.ClientId = __clientId__;
            desc.PacketId = 0;

            var __data__ = new __RPC_Logic_NotifySnapShotResult_ARG_int32_state__();
            __data__.State=state;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            desc.Type = (int)MessageType.SC;
            desc.ServiceType = (int) ServiceType.Logic;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// 增加技能点
        /// </summary>
        public object AddSkillPoint(ulong __characterId__, ulong __clientId__, int skillId, int point)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 1331;
            desc.CharacterId = __characterId__;
            desc.ClientId = __clientId__;
            desc.PacketId = 0;

            var __data__ = new __RPC_Logic_AddSkillPoint_ARG_int32_skillId_int32_point__();
            __data__.SkillId=skillId;
            __data__.Point=point;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            desc.Type = (int)MessageType.SC;
            desc.ServiceType = (int) ServiceType.Logic;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// BossHome进入口钻石
        /// </summary>
        public IEnumerator BossHomeCost(Coroutine coroutine, BossHomeCostInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.BossHomeCost(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 添加坐骑皮肤
        /// </summary>
        public IEnumerator AddMountSkin(Coroutine coroutine, AddMountSkinInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.AddMountSkin(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 挖矿活动领取奖励
        /// </summary>
        public IEnumerator ApplyFieldActivityReward(Coroutine coroutine, ApplyFieldActivityRewardInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.ApplyFieldActivityReward(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 请求好友列表数据
        /// </summary>
        public IEnumerator ApplyFriendListData(Coroutine coroutine, ApplyFriendListDataInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.ApplyFriendListData(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 使用时装
        /// </summary>
        public IEnumerator UseShiZhuang(Coroutine coroutine, UseShiZhuangInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.UseShiZhuang(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 点击玛雅Tip界面
        /// </summary>
        public IEnumerator ClickMayaTip(Coroutine coroutine, ClickMayaTipInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.ClickMayaTip(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 设置装备状态
        /// </summary>
        public IEnumerator ChangeEquipState(Coroutine coroutine, ChangeEquipStateInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.ChangeEquipState(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// </summary>
        public IEnumerator RefreshFashionInfo(Coroutine coroutine, RefreshFashionInfoInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.RefreshFashionInfo(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// </summary>
        public IEnumerator ApplySuperVIP(Coroutine coroutine, ApplySuperVIPInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.ApplySuperVIP(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 祭拜
        /// </summary>
        public IEnumerator WorshipMonument(Coroutine coroutine, WorshipMonumentInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.WorshipMonument(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 装备随灵结果确认
        /// </summary>
        public IEnumerator SaveSuperExcellentEquip(Coroutine coroutine, SaveSuperExcellentEquipInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.SaveSuperExcellentEquip(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 通知修改玩家名字
        /// </summary>
        public IEnumerator ModifyPlayerName(Coroutine coroutine, ModifyPlayerNameInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.ModifyPlayerName(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 发起角斗申请
        /// </summary>
        public IEnumerator InviteChallenge(Coroutine coroutine, InviteChallengeInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.InviteChallenge(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 收到角斗申请
        /// </summary>
        public object ReceiveChallenge(ulong __characterId__, ulong __clientId__, ulong characterId, string name, string server)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 1353;
            desc.CharacterId = __characterId__;
            desc.ClientId = __clientId__;
            desc.PacketId = 0;

            var __data__ = new __RPC_Logic_ReceiveChallenge_ARG_uint64_characterId_string_name_string_server__();
            __data__.CharacterId=characterId;
            __data__.Name=name;
            __data__.Server=server;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            desc.Type = (int)MessageType.SC;
            desc.ServiceType = (int) ServiceType.Logic;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// 是否接受角斗申请
        /// </summary>
        public IEnumerator AcceptChallenge(Coroutine coroutine, AcceptChallengeInMessage msg)
        {
            LogicCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.AcceptChallenge(coroutine, proxy, msg);
            }
            return null;
        }

        protected override void DispatchMessage(MessageRecievedEvent evt)
        {
            switch (evt.Message.FuncId)
            {
                case 1000:
                {
                    var msg = new PrepareDataForEnterGameInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.PrepareDataForEnterGame(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1001:
                {
                    var msg = new PrepareDataForCreateCharacterInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.PrepareDataForCreateCharacter(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1002:
                {
                    var msg = new PrepareDataForCommonUseInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.PrepareDataForCommonUse(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1003:
                {
                    var msg = new PrepareDataForLogoutInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.PrepareDataForLogout(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1015:
                {
                    var msg = new CreateCharacterInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.CreateCharacter(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1016:
                {
                    var msg = new DelectCharacterInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.DelectCharacter(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1031:
                {
                    var msg = new GetLogicSimpleDataInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.GetLogicSimpleData(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1032:
                {
                    var msg = new CheckConnectedInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.CheckConnected(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1033:
                {
                    var msg = new CheckLostInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.CheckLost(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1034:
                {
                    var msg = new QueryStatusInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.QueryStatus(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1041:
                {
                    var msg = new GMLogicInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => GMLogic(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1042:
                {
                    var msg = new LogicGetEquipListInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.LogicGetEquipList(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1043:
                {
                    var msg = new LogicGetSkillDataInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.LogicGetSkillData(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1044:
                {
                    var msg = new LogicGetTalentDataInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.LogicGetTalentData(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1045:
                {
                    var msg = new LogicGetBookAttrDataInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.LogicGetBookAttrData(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1046:
                {
                    var msg = new ApplySkillInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => ApplySkill(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1047:
                {
                    var msg = new UpgradeInnateInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => UpgradeInnate(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1048:
                {
                    var msg = new ClearInnateInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => ClearInnate(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1049:
                {
                    var msg = new ApplyBagsInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => ApplyBags(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1050:
                {
                    var msg = new ApplyFlagInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => ApplyFlag(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1051:
                {
                    var msg = new ApplyExdataInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => ApplyExdata(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1052:
                {
                    var msg = new ApplyExdata64InMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => ApplyExdata64(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1053:
                {
                    var msg = new ApplyMissionInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => ApplyMission(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1054:
                {
                    var msg = new ApplyBooksInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => ApplyBooks(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1055:
                {
                    var msg = new ReplaceEquipInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => ReplaceEquip(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1056:
                {
                    var msg = new AcceptMissionInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => AcceptMission(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1057:
                {
                    var msg = new CommitMissionInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => CommitMission(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1058:
                {
                    var msg = new CompleteMissionInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => CompleteMission(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1059:
                {
                    var msg = new DropMissionInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => DropMission(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1068:
                {
                    var msg = new EquipSkillInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => EquipSkill(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1069:
                {
                    var msg = new UpgradeSkillInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => UpgradeSkill(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1070:
                {
                    var msg = new SellBagItemInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => SellBagItem(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1071:
                {
                    var msg = new RecycleBagItemInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => RecycleBagItem(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1072:
                {
                    var msg = new EnchanceEquipInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => EnchanceEquip(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1073:
                {
                    var msg = new AppendEquipInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => AppendEquip(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1074:
                {
                    var msg = new ResetExcellentEquipInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => ResetExcellentEquip(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1075:
                {
                    var msg = new ConfirmResetExcellentEquipInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => ConfirmResetExcellentEquip(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1076:
                {
                    var msg = new SuperExcellentEquipInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => SuperExcellentEquip(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1077:
                {
                    var msg = new SmritiEquipInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => SmritiEquip(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1078:
                {
                    var msg = new UseItemInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => UseItem(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1079:
                {
                    var msg = new LogicKillMonsterInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.LogicKillMonster(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1080:
                {
                    var msg = new GiveItemInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.GiveItem(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1081:
                {
                    var msg = new DeleteItemInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.DeleteItem(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1083:
                {
                    var msg = new FirstOnlineInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.FirstOnline(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1084:
                {
                    var msg = new ActivationRewardInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => ActivationReward(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1086:
                {
                    var msg = new ComposeItemInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => ComposeItem(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1088:
                {
                    var msg = new RewardAchievementInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => RewardAchievement(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1089:
                {
                    var msg = new DistributionAttrPointInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => DistributionAttrPoint(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1090:
                {
                    var msg = new RefreshAttrPointInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => RefreshAttrPoint(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1091:
                {
                    var msg = new SetAttributeAutoAddInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => SetAttributeAutoAdd(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1092:
                {
                    var msg = new ApplyFriendsInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => ApplyFriends(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1093:
                {
                    var msg = new SeekCharactersInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => SeekCharacters(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1094:
                {
                    var msg = new SeekFriendsInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => SeekFriends(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1095:
                {
                    var msg = new AddFriendByIdInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => AddFriendById(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1096:
                {
                    var msg = new SSAddFriendByIdInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.SSAddFriendById(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1097:
                {
                    var msg = new AddFriendByNameInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => AddFriendByName(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1098:
                {
                    var msg = new DelFriendByIdInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => DelFriendById(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1099:
                {
                    var msg = new ServerGMCommandInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.ServerGMCommand(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1100:
                {
                    var msg = new CompleteFubenInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.CompleteFuben(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1102:
                {
                    var msg = new SelectDungeonRewardInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => SelectDungeonReward(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1103:
                {
                    var msg = new EnterFubenInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => EnterFuben(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1104:
                {
                    var msg = new ResetFubenInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => ResetFuben(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1105:
                {
                    var msg = new SweepFubenInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => SweepFuben(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1106:
                {
                    var msg = new ApplyStoresInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => ApplyStores(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1107:
                {
                    var msg = new ActivateBookInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => ActivateBook(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1108:
                {
                    var msg = new SortBagInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => SortBag(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1109:
                {
                    var msg = new ApplyPlayerInfoInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => ApplyPlayerInfo(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1110:
                {
                    var msg = new SetFlagInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => SetFlag(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1111:
                {
                    var msg = new SetExDataInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => SetExData(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1112:
                {
                    var msg = new ApplyMailsInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => ApplyMails(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1113:
                {
                    var msg = new ApplyMailInfoInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => ApplyMailInfo(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1114:
                {
                    var msg = new ReceiveMailInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => ReceiveMail(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1115:
                {
                    var msg = new DeleteMailInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => DeleteMail(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1117:
                {
                    var msg = new DurableDownInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.DurableDown(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1118:
                {
                    var msg = new RepairEquipInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => RepairEquip(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1119:
                {
                    var msg = new NpcServiceInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.NpcService(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1120:
                {
                    var msg = new DepotTakeOutInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => DepotTakeOut(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1121:
                {
                    var msg = new DepotPutInInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => DepotPutIn(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1122:
                {
                    var msg = new WishingPoolDepotTakeOutInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => WishingPoolDepotTakeOut(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1123:
                {
                    var msg = new StoreBuyInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => StoreBuy(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1124:
                {
                    var msg = new ApplyCityDataInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => ApplyCityData(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1125:
                {
                    var msg = new CityOperationRequestInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => CityOperationRequest(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1128:
                {
                    var msg = new EnterCityInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => EnterCity(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1131:
                {
                    var msg = new ApplyEquipDurableInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => ApplyEquipDurable(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1132:
                {
                    var msg = new ElfOperateInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => ElfOperate(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1133:
                {
                    var msg = new ElfReplaceInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => ElfReplace(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1134:
                {
                    var msg = new PushDrawInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.PushDraw(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1135:
                {
                    var msg = new CheckCharacterInFubenInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.CheckCharacterInFuben(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1136:
                {
                    var msg = new WingFormationInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => WingFormation(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1137:
                {
                    var msg = new WingTrainInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => WingTrain(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1138:
                {
                    var msg = new OperatePetInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => OperatePet(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1139:
                {
                    var msg = new OperatePetMissionInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => OperatePetMission(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1140:
                {
                    var msg = new PickUpMedalInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => PickUpMedal(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1141:
                {
                    var msg = new EnchanceMedalInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => EnchanceMedal(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1142:
                {
                    var msg = new EquipMedalInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => EquipMedal(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1317:
                {
                    var msg = new SplitMedalInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => SplitMedal(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1143:
                {
                    var msg = new BuySpaceBagInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => BuySpaceBag(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1145:
                {
                    var msg = new UseBuildServiceInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => UseBuildService(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1146:
                {
                    var msg = new GetP1vP1LadderPlayerInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => GetP1vP1LadderPlayer(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1147:
                {
                    var msg = new GetP1vP1FightPlayerInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => GetP1vP1FightPlayer(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1148:
                {
                    var msg = new LogicP1vP1FightOverInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.LogicP1vP1FightOver(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1149:
                {
                    var msg = new LogicP1vP1LadderAdvanceInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.LogicP1vP1LadderAdvance(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1150:
                {
                    var msg = new PushP1vP1LadderChangeInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.PushP1vP1LadderChange(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1151:
                {
                    var msg = new GetP1vP1LadderOldListInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => GetP1vP1LadderOldList(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1153:
                {
                    var msg = new BuyP1vP1CountInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => BuyP1vP1Count(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1154:
                {
                    var msg = new DrawLotteryPetEggInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => DrawLotteryPetEgg(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1155:
                {
                    var msg = new RecoveryEquipInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => RecoveryEquip(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1156:
                {
                    var msg = new DrawWishingPoolInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => DrawWishingPool(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1157:
                {
                    var msg = new ResetSkillTalentInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => ResetSkillTalent(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1158:
                {
                    var msg = new RobotcFinishFubenInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => RobotcFinishFuben(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1159:
                {
                    var msg = new CreateAllianceInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => CreateAlliance(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1160:
                {
                    var msg = new AllianceOperationInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => AllianceOperation(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1161:
                {
                    var msg = new AllianceOperationCharacterInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => AllianceOperationCharacter(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1162:
                {
                    var msg = new AllianceOperationCharacterByNameInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => AllianceOperationCharacterByName(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1164:
                {
                    var msg = new SSGetFlagOrConditionInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.SSGetFlagOrCondition(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1165:
                {
                    var msg = new SSIsShieldInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.SSIsShield(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1166:
                {
                    var msg = new WorshipCharacterInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => WorshipCharacter(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1167:
                {
                    var msg = new SSChangeExdataInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.SSChangeExdata(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1168:
                {
                    var msg = new DonationAllianceItemInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => DonationAllianceItem(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1172:
                {
                    var msg = new CityMissionOperationInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => CityMissionOperation(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1173:
                {
                    var msg = new DropCityMissionInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => DropCityMission(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1174:
                {
                    var msg = new CityRefreshMissionInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => CityRefreshMission(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1175:
                {
                    var msg = new StoreOperationAddInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => StoreOperationAdd(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1176:
                {
                    var msg = new StoreOperationBroadcastInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => StoreOperationBroadcast(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1177:
                {
                    var msg = new StoreOperationBuyInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => StoreOperationBuy(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1178:
                {
                    var msg = new StoreOperationCancelInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => StoreOperationCancel(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1179:
                {
                    var msg = new StoreOperationLookInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => StoreOperationLook(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1180:
                {
                    var msg = new StoreOperationLookSelfInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => StoreOperationLookSelf(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1181:
                {
                    var msg = new StoreOperationHarvestInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => StoreOperationHarvest(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1182:
                {
                    var msg = new SSStoreOperationBuyInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.SSStoreOperationBuy(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1183:
                {
                    var msg = new SSStoreOperationExchangeInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => SSStoreOperationExchange(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1184:
                {
                    var msg = new GetExchangeDataInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.GetExchangeData(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1185:
                {
                    var msg = new ApplyGroupShopItemsInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => ApplyGroupShopItems(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1187:
                {
                    var msg = new BuyGroupShopItemInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => BuyGroupShopItem(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1188:
                {
                    var msg = new GetBuyedGroupShopItemsInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => GetBuyedGroupShopItems(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1189:
                {
                    var msg = new GetGroupShopHistoryInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => GetGroupShopHistory(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1190:
                {
                    var msg = new SendMailToCharacterByItemsInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.SendMailToCharacterByItems(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1191:
                {
                    var msg = new AllianceDataChangeInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.AllianceDataChange(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1192:
                {
                    var msg = new SSBattleResultInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.SSBattleResult(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1193:
                {
                    var msg = new AcceptBattleAwardInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => AcceptBattleAward(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1194:
                {
                    var msg = new AstrologyLevelUpInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => AstrologyLevelUp(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1195:
                {
                    var msg = new AstrologyEquipOnInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => AstrologyEquipOn(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1196:
                {
                    var msg = new AstrologyEquipOffInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => AstrologyEquipOff(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1199:
                {
                    var msg = new UsePetExpItemInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => UsePetExpItem(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1200:
                {
                    var msg = new ReincarnationInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => Reincarnation(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1201:
                {
                    var msg = new UpgradeHonorInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => UpgradeHonor(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1202:
                {
                    var msg = new ReadyToEnterInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.ReadyToEnter(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1206:
                {
                    var msg = new ApplyCityBuildingDataInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => ApplyCityBuildingData(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1207:
                {
                    var msg = new ApplyBagByTypeInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => ApplyBagByType(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1209:
                {
                    var msg = new SSGetFriendListInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.SSGetFriendList(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1212:
                {
                    var msg = new SSSendSimpleDataInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.SSSendSimpleData(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1213:
                {
                    var msg = new SSFriendpPssiveChangeInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.SSFriendpPssiveChange(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1214:
                {
                    var msg = new SSFetchExdataInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.SSFetchExdata(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1215:
                {
                    var msg = new SSDeleteItemByIndexInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.SSDeleteItemByIndex(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1216:
                {
                    var msg = new StoreBuyEquipInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => StoreBuyEquip(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1217:
                {
                    var msg = new GetQuestionDataInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => GetQuestionData(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1218:
                {
                    var msg = new AnswerQuestionInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => AnswerQuestion(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1219:
                {
                    var msg = new SSGetMissionEnterSceneInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.SSGetMissionEnterScene(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1220:
                {
                    var msg = new RemoveErrorAnswerInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => RemoveErrorAnswer(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1221:
                {
                    var msg = new AnswerQuestionUseItemInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => AnswerQuestionUseItem(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1222:
                {
                    var msg = new ApplyPlayerHeadInfoInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => ApplyPlayerHeadInfo(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1223:
                {
                    var msg = new NotifyDungeonCloseInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.NotifyDungeonClose(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1224:
                {
                    var msg = new GetCompensationListInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => GetCompensationList(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1225:
                {
                    var msg = new ReceiveCompensationInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => ReceiveCompensation(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1226:
                {
                    var msg = new SSSetExdataInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.SSSetExdata(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1227:
                {
                    var msg = new SSSetFlagInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.SSSetFlag(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1228:
                {
                    var msg = new SelectTitleInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => SelectTitle(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1229:
                {
                    var msg = new LogicGetTitleListInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.LogicGetTitleList(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1230:
                {
                    var msg = new RechargeSuccessInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.RechargeSuccess(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1232:
                {
                    var msg = new GetItemCountInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.GetItemCount(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1233:
                {
                    var msg = new RetrainPetInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => RetrainPet(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1234:
                {
                    var msg = new UpgradeAllianceBuffInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => UpgradeAllianceBuff(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1235:
                {
                    var msg = new SSGetAllianceBuffInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.SSGetAllianceBuff(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1236:
                {
                    var msg = new NotifyAllianceWarInfoInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.NotifyAllianceWarInfo(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1237:
                {
                    var msg = new InvestmentInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => Investment(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1238:
                {
                    var msg = new GainRewardInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => GainReward(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1239:
                {
                    var msg = new NotifyEnterFubenInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.NotifyEnterFuben(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1240:
                {
                    var msg = new WorshipInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => Worship(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1241:
                {
                    var msg = new ChangeServerInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.ChangeServer(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1242:
                {
                    var msg = new UseGiftCodeInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => UseGiftCode(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1243:
                {
                    var msg = new ApplyRechargeTablesInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => ApplyRechargeTables(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1244:
                {
                    var msg = new ApplyFirstChargeItemInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => ApplyFirstChargeItem(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1245:
                {
                    var msg = new ApplyGetFirstChargeItemInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => ApplyGetFirstChargeItem(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1246:
                {
                    var msg = new TakeMultyExpAwardInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => TakeMultyExpAward(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1247:
                {
                    var msg = new RandEquipSkillInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => RandEquipSkill(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1248:
                {
                    var msg = new UseEquipSkillInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => UseEquipSkill(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1249:
                {
                    var msg = new LogicGetElfDataInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.LogicGetElfData(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1250:
                {
                    var msg = new ReplaceElfSkillInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => ReplaceElfSkill(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1252:
                {
                    var msg = new RecycleBagItemListInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => RecycleBagItemList(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1253:
                {
                    var msg = new ResolveElfListInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => ResolveElfList(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1260:
                {
                    var msg = new CSEnterEraByIdInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => CSEnterEraById(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1261:
                {
                    var msg = new EraPlayedSkillInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => EraPlayedSkill(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1262:
                {
                    var msg = new EraTakeAchvAwardInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => EraTakeAchvAward(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1263:
                {
                    var msg = new EraTakeAwardInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => EraTakeAward(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1264:
                {
                    var msg = new RefreshHunterMissionInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => RefreshHunterMission(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1270:
                {
                    var msg = new CSApplyOfflineExpDataInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => CSApplyOfflineExpData(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1271:
                {
                    var msg = new RereshTiralTimeInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => RereshTiralTime(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1501:
                {
                    var msg = new SSNotifyCharacterOnConnetInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.SSNotifyCharacterOnConnet(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1503:
                {
                    var msg = new BSNotifyCharacterOnLostInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.BSNotifyCharacterOnLost(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1504:
                {
                    var msg = new SSRequestCityBuidlingPetDataInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.SSRequestCityBuidlingPetData(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1505:
                {
                    var msg = new GetReviewStateInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => GetReviewState(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1506:
                {
                    var msg = new SSGetTodayFunbenCountInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.SSGetTodayFunbenCount(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1507:
                {
                    var msg = new OnItemAuctionInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => OnItemAuction(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1508:
                {
                    var msg = new BuyItemAuctionInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => BuyItemAuction(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1509:
                {
                    var msg = new LogicGetAnyDataInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.LogicGetAnyData(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1510:
                {
                    var msg = new ApplySellHistoryInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => ApplySellHistory(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1511:
                {
                    var msg = new DrawWishItemInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => DrawWishItem(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1512:
                {
                    var msg = new ApplyOperationActivityInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => ApplyOperationActivity(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1513:
                {
                    var msg = new ClaimOperationRewardInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => ClaimOperationReward(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1520:
                {
                    var msg = new ApplyPromoteHPInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => ApplyPromoteHP(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1521:
                {
                    var msg = new ApplyPromoteSkillInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => ApplyPromoteSkill(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1522:
                {
                    var msg = new ApplyPickUpBoxInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => ApplyPickUpBox(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1523:
                {
                    var msg = new ApplyJoinActivityInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => ApplyJoinActivity(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1524:
                {
                    var msg = new ApplyPortraitAwardInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => ApplyPortraitAward(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1530:
                {
                    var msg = new SSSyncCharacterFightPointInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.SSSyncCharacterFightPoint(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1531:
                {
                    var msg = new OnPlayerEnterSceneOverInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.OnPlayerEnterSceneOver(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1533:
                {
                    var msg = new ApplyGetTowerRewardInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => ApplyGetTowerReward(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1534:
                {
                    var msg = new AnchorGiftInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.AnchorGift(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1600:
                {
                    var msg = new SendJsonDataInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => SendJsonData(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1601:
                {
                    var msg = new BuyWingChargeInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => BuyWingCharge(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1602:
                {
                    var msg = new BuyEnergyByTypeInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => BuyEnergyByType(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1603:
                {
                    var msg = new SSLearnSkillInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.SSLearnSkill(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1605:
                {
                    var msg = new GMDeleteMessageInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.GMDeleteMessage(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1606:
                {
                    var msg = new ApplyKaiFuTeHuiDataInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => ApplyKaiFuTeHuiData(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1607:
                {
                    var msg = new BuyKaiFuTeHuiItemInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => BuyKaiFuTeHuiItem(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1608:
                {
                    var msg = new BattleUnionDonateEquipInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => BattleUnionDonateEquip(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1609:
                {
                    var msg = new BattleUnionTakeOutEquipInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => BattleUnionTakeOutEquip(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1990:
                {
                    var msg = new GetCharacterDataInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.GetCharacterData(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1992:
                {
                    var msg = new SendMailToCharacterInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.SendMailToCharacter(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1993:
                {
                    var msg = new SendMailToServerInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.SendMailToServer(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1994:
                {
                    var msg = new UpdateServerInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.UpdateServer(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1995:
                {
                    var msg = new GMCommandInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.GMCommand(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1996:
                {
                    var msg = new SendMailToCharacterByIdInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.SendMailToCharacterById(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1999:
                {
                    var msg = new ClientErrorMessageInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => ClientErrorMessage(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1604:
                {
                    var msg = new SendQuestionInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => SendQuestion(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1330:
                {
                    var msg = new SendSurveyInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => SendSurvey(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1314:
                {
                    var msg = new TowerSweepInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => TowerSweep(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1315:
                {
                    var msg = new TowerBuySweepTimesInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => TowerBuySweepTimes(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1316:
                {
                    var msg = new CheckTowerDailyInfoInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => CheckTowerDailyInfo(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1318:
                {
                    var msg = new SetHandbookFightInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => SetHandbookFight(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1320:
                {
                    var msg = new AskMountDataInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => AskMountData(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1321:
                {
                    var msg = new MountUpInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => MountUp(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1322:
                {
                    var msg = new RideMountInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => RideMount(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1323:
                {
                    var msg = new MountSkillInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => MountSkill(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1324:
                {
                    var msg = new MountFeedInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => MountFeed(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1325:
                {
                    var msg = new LogicGetMountDataInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.LogicGetMountData(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1326:
                {
                    var msg = new MountInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => Mount(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1329:
                {
                    var msg = new CloneCharacterDbByIdInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.CloneCharacterDbById(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1332:
                {
                    var msg = new BossHomeCostInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => BossHomeCost(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1333:
                {
                    var msg = new GiveItemListInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.GiveItemList(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1336:
                {
                    var msg = new AddMountSkinInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => AddMountSkin(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1337:
                {
                    var msg = new ApplyFieldActivityRewardInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => ApplyFieldActivityReward(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1338:
                {
                    var msg = new ApplyFriendListDataInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => ApplyFriendListData(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1339:
                {
                    var msg = new ApplyPlayerFlagInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.ApplyPlayerFlag(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1340:
                {
                    var msg = new UseShiZhuangInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => UseShiZhuang(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1341:
                {
                    var msg = new ClickMayaTipInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => ClickMayaTip(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1342:
                {
                    var msg = new ApplyMayaSkillInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.ApplyMayaSkill(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1343:
                {
                    var msg = new ChangeEquipStateInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => ChangeEquipState(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1344:
                {
                    var msg = new SSSendMailByIdInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.SSSendMailById(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1345:
                {
                    var msg = new RefreshFashionInfoInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => RefreshFashionInfo(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1346:
                {
                    var msg = new NotifyPlayerMoniterDataInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.NotifyPlayerMoniterData(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1347:
                {
                    var msg = new GetPlayerMoniterDataInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.GetPlayerMoniterData(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1348:
                {
                    var msg = new ApplySuperVIPInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => ApplySuperVIP(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1349:
                {
                    var msg = new WorshipMonumentInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => WorshipMonument(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1350:
                {
                    var msg = new SaveSuperExcellentEquipInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => SaveSuperExcellentEquip(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1351:
                {
                    var msg = new ModifyPlayerNameInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => ModifyPlayerName(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1352:
                {
                    var msg = new InviteChallengeInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => InviteChallenge(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1354:
                {
                    var msg = new AcceptChallengeInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => AcceptChallenge(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 1355:
                {
                    var msg = new NotifyInviteChallengeInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.NotifyInviteChallenge(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                default:
                    break;
            }
        }
    }
    public class PrepareDataForEnterGameInMessage : InMessage
    {
        public PrepareDataForEnterGameInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_PrepareDataForEnterGame_ARG_int32_serverId_uint64_sceneGuid__;

            mResponse = new __RPC_Logic_PrepareDataForEnterGame_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_PrepareDataForEnterGame_ARG_int32_serverId_uint64_sceneGuid__ Request { get; private set; }

        private __RPC_Logic_PrepareDataForEnterGame_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public PrepareDataForEnterGameInMessage Clone()
        { 
            return new PrepareDataForEnterGameInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class PrepareDataForCreateCharacterInMessage : InMessage
    {
        public PrepareDataForCreateCharacterInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_PrepareDataForCreateCharacter_ARG_int32_type__;

            mResponse = new __RPC_Logic_PrepareDataForCreateCharacter_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_PrepareDataForCreateCharacter_ARG_int32_type__ Request { get; private set; }

        private __RPC_Logic_PrepareDataForCreateCharacter_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public PrepareDataForCreateCharacterInMessage Clone()
        { 
            return new PrepareDataForCreateCharacterInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class PrepareDataForCommonUseInMessage : InMessage
    {
        public PrepareDataForCommonUseInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_PrepareDataForCommonUse_ARG_uint32_placeholder__;

            mResponse = new __RPC_Logic_PrepareDataForCommonUse_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_PrepareDataForCommonUse_ARG_uint32_placeholder__ Request { get; private set; }

        private __RPC_Logic_PrepareDataForCommonUse_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public PrepareDataForCommonUseInMessage Clone()
        { 
            return new PrepareDataForCommonUseInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class PrepareDataForLogoutInMessage : InMessage
    {
        public PrepareDataForLogoutInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_PrepareDataForLogout_ARG_uint32_placeholder__;

            mResponse = new __RPC_Logic_PrepareDataForLogout_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_PrepareDataForLogout_ARG_uint32_placeholder__ Request { get; private set; }

        private __RPC_Logic_PrepareDataForLogout_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public PrepareDataForLogoutInMessage Clone()
        { 
            return new PrepareDataForLogoutInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class CreateCharacterInMessage : InMessage
    {
        public CreateCharacterInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_CreateCharacter_ARG_int32_type_int32_serverId_bool_isGM__;

            mResponse = new __RPC_Logic_CreateCharacter_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_CreateCharacter_ARG_int32_type_int32_serverId_bool_isGM__ Request { get; private set; }

        private __RPC_Logic_CreateCharacter_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public CreateCharacterInMessage Clone()
        { 
            return new CreateCharacterInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class DelectCharacterInMessage : InMessage
    {
        public DelectCharacterInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_DelectCharacter_ARG_int32_type__;

            mResponse = new __RPC_Logic_DelectCharacter_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_DelectCharacter_ARG_int32_type__ Request { get; private set; }

        private __RPC_Logic_DelectCharacter_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public DelectCharacterInMessage Clone()
        { 
            return new DelectCharacterInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SBGetAllOnlineCharacterInServerInMessage : InMessage
    {
        public SBGetAllOnlineCharacterInServerInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_SBGetAllOnlineCharacterInServer_ARG_int32_serverId__;

            mResponse = new __RPC_Logic_SBGetAllOnlineCharacterInServer_RET_Uint64Array__();
            mResponse.ReturnValue = new Uint64Array();
        }


        public __RPC_Logic_SBGetAllOnlineCharacterInServer_ARG_int32_serverId__ Request { get; private set; }

        private __RPC_Logic_SBGetAllOnlineCharacterInServer_RET_Uint64Array__ mResponse;
        public Uint64Array Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public SBGetAllOnlineCharacterInServerInMessage Clone()
        { 
            return new SBGetAllOnlineCharacterInServerInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class GetLogicSimpleDataInMessage : InMessage
    {
        public GetLogicSimpleDataInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_GetLogicSimpleData_ARG_uint32_placeholder__;

            mResponse = new __RPC_Logic_GetLogicSimpleData_RET_LogicSimpleData__();
            mResponse.ReturnValue = new LogicSimpleData();
        }


        public __RPC_Logic_GetLogicSimpleData_ARG_uint32_placeholder__ Request { get; private set; }

        private __RPC_Logic_GetLogicSimpleData_RET_LogicSimpleData__ mResponse;
        public LogicSimpleData Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public GetLogicSimpleDataInMessage Clone()
        { 
            return new GetLogicSimpleDataInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class CheckConnectedInMessage : InMessage
    {
        public CheckConnectedInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_CheckConnected_ARG_uint64_characterId__;

            mResponse = new __RPC_Logic_CheckConnected_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_CheckConnected_ARG_uint64_characterId__ Request { get; private set; }

        private __RPC_Logic_CheckConnected_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public CheckConnectedInMessage Clone()
        { 
            return new CheckConnectedInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class CheckLostInMessage : InMessage
    {
        public CheckLostInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_CheckLost_ARG_uint64_characterId__;

            mResponse = new __RPC_Logic_CheckLost_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_CheckLost_ARG_uint64_characterId__ Request { get; private set; }

        private __RPC_Logic_CheckLost_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public CheckLostInMessage Clone()
        { 
            return new CheckLostInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class QueryStatusInMessage : InMessage
    {
        public QueryStatusInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_QueryStatus_ARG_uint32_placeholder__;

            mResponse = new __RPC_Logic_QueryStatus_RET_LogicServerStatus__();
            mResponse.ReturnValue = new LogicServerStatus();
        }


        public __RPC_Logic_QueryStatus_ARG_uint32_placeholder__ Request { get; private set; }

        private __RPC_Logic_QueryStatus_RET_LogicServerStatus__ mResponse;
        public LogicServerStatus Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public QueryStatusInMessage Clone()
        { 
            return new QueryStatusInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class QueryBrokerStatusInMessage : InMessage
    {
        public QueryBrokerStatusInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_QueryBrokerStatus_ARG_uint32_placeholder__;

            mResponse = new __RPC_Logic_QueryBrokerStatus_RET_CommonBrokerStatus__();
            mResponse.ReturnValue = new CommonBrokerStatus();
        }


        public __RPC_Logic_QueryBrokerStatus_ARG_uint32_placeholder__ Request { get; private set; }

        private __RPC_Logic_QueryBrokerStatus_RET_CommonBrokerStatus__ mResponse;
        public CommonBrokerStatus Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public QueryBrokerStatusInMessage Clone()
        { 
            return new QueryBrokerStatusInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class GMLogicInMessage : InMessage
    {
        public GMLogicInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_GMLogic_ARG_string_commond__;

            mResponse = new __RPC_Logic_GMLogic_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_GMLogic_ARG_string_commond__ Request { get; private set; }

        private __RPC_Logic_GMLogic_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public GMLogicInMessage Clone()
        { 
            return new GMLogicInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class LogicGetEquipListInMessage : InMessage
    {
        public LogicGetEquipListInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_LogicGetEquipList_ARG_uint64_chararcterId__;

            mResponse = new __RPC_Logic_LogicGetEquipList_RET_BagBaseData__();
            mResponse.ReturnValue = new BagBaseData();
        }


        public __RPC_Logic_LogicGetEquipList_ARG_uint64_chararcterId__ Request { get; private set; }

        private __RPC_Logic_LogicGetEquipList_RET_BagBaseData__ mResponse;
        public BagBaseData Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public LogicGetEquipListInMessage Clone()
        { 
            return new LogicGetEquipListInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class LogicGetSkillDataInMessage : InMessage
    {
        public LogicGetSkillDataInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_LogicGetSkillData_ARG_uint64_chararcterId__;

            mResponse = new __RPC_Logic_LogicGetSkillData_RET_Dict_int_int_Data__();
            mResponse.ReturnValue = new Dict_int_int_Data();
        }


        public __RPC_Logic_LogicGetSkillData_ARG_uint64_chararcterId__ Request { get; private set; }

        private __RPC_Logic_LogicGetSkillData_RET_Dict_int_int_Data__ mResponse;
        public Dict_int_int_Data Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public LogicGetSkillDataInMessage Clone()
        { 
            return new LogicGetSkillDataInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class LogicGetTalentDataInMessage : InMessage
    {
        public LogicGetTalentDataInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_LogicGetTalentData_ARG_uint64_chararcterId__;

            mResponse = new __RPC_Logic_LogicGetTalentData_RET_Dict_int_int_Data__();
            mResponse.ReturnValue = new Dict_int_int_Data();
        }


        public __RPC_Logic_LogicGetTalentData_ARG_uint64_chararcterId__ Request { get; private set; }

        private __RPC_Logic_LogicGetTalentData_RET_Dict_int_int_Data__ mResponse;
        public Dict_int_int_Data Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public LogicGetTalentDataInMessage Clone()
        { 
            return new LogicGetTalentDataInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class LogicGetBookAttrDataInMessage : InMessage
    {
        public LogicGetBookAttrDataInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_LogicGetBookAttrData_ARG_uint64_chararcterId__;

            mResponse = new __RPC_Logic_LogicGetBookAttrData_RET_BookAttrList__();
            mResponse.ReturnValue = new BookAttrList();
        }


        public __RPC_Logic_LogicGetBookAttrData_ARG_uint64_chararcterId__ Request { get; private set; }

        private __RPC_Logic_LogicGetBookAttrData_RET_BookAttrList__ mResponse;
        public BookAttrList Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public LogicGetBookAttrDataInMessage Clone()
        { 
            return new LogicGetBookAttrDataInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class ApplySkillInMessage : InMessage
    {
        public ApplySkillInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_ApplySkill_ARG_uint32_placeholder__;

            mResponse = new __RPC_Logic_ApplySkill_RET_SkillDataMsg__();
            mResponse.ReturnValue = new SkillDataMsg();
        }


        public __RPC_Logic_ApplySkill_ARG_uint32_placeholder__ Request { get; private set; }

        private __RPC_Logic_ApplySkill_RET_SkillDataMsg__ mResponse;
        public SkillDataMsg Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public ApplySkillInMessage Clone()
        { 
            return new ApplySkillInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class UpgradeInnateInMessage : InMessage
    {
        public UpgradeInnateInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_UpgradeInnate_ARG_int32_innateId__;

            mResponse = new __RPC_Logic_UpgradeInnate_RET_SkillDataMsg__();
            mResponse.ReturnValue = new SkillDataMsg();
        }


        public __RPC_Logic_UpgradeInnate_ARG_int32_innateId__ Request { get; private set; }

        private __RPC_Logic_UpgradeInnate_RET_SkillDataMsg__ mResponse;
        public SkillDataMsg Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public UpgradeInnateInMessage Clone()
        { 
            return new UpgradeInnateInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class ClearInnateInMessage : InMessage
    {
        public ClearInnateInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_ClearInnate_ARG_int32_innateId__;

            mResponse = new __RPC_Logic_ClearInnate_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_ClearInnate_ARG_int32_innateId__ Request { get; private set; }

        private __RPC_Logic_ClearInnate_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public ClearInnateInMessage Clone()
        { 
            return new ClearInnateInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class ApplyBagsInMessage : InMessage
    {
        public ApplyBagsInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_ApplyBags_ARG_int32_type__;

            mResponse = new __RPC_Logic_ApplyBags_RET_BagData__();
            mResponse.ReturnValue = new BagData();
        }


        public __RPC_Logic_ApplyBags_ARG_int32_type__ Request { get; private set; }

        private __RPC_Logic_ApplyBags_RET_BagData__ mResponse;
        public BagData Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public ApplyBagsInMessage Clone()
        { 
            return new ApplyBagsInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class ApplyFlagInMessage : InMessage
    {
        public ApplyFlagInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_ApplyFlag_ARG_int32_flagId__;

            mResponse = new __RPC_Logic_ApplyFlag_RET_Int32Array__();
            mResponse.ReturnValue = new Int32Array();
        }


        public __RPC_Logic_ApplyFlag_ARG_int32_flagId__ Request { get; private set; }

        private __RPC_Logic_ApplyFlag_RET_Int32Array__ mResponse;
        public Int32Array Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public ApplyFlagInMessage Clone()
        { 
            return new ApplyFlagInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class ApplyExdataInMessage : InMessage
    {
        public ApplyExdataInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_ApplyExdata_ARG_int32_exdataId__;

            mResponse = new __RPC_Logic_ApplyExdata_RET_Int32Array__();
            mResponse.ReturnValue = new Int32Array();
        }


        public __RPC_Logic_ApplyExdata_ARG_int32_exdataId__ Request { get; private set; }

        private __RPC_Logic_ApplyExdata_RET_Int32Array__ mResponse;
        public Int32Array Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public ApplyExdataInMessage Clone()
        { 
            return new ApplyExdataInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class ApplyExdata64InMessage : InMessage
    {
        public ApplyExdata64InMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_ApplyExdata64_ARG_int32_exdataId__;

            mResponse = new __RPC_Logic_ApplyExdata64_RET_Int64Array__();
            mResponse.ReturnValue = new Int64Array();
        }


        public __RPC_Logic_ApplyExdata64_ARG_int32_exdataId__ Request { get; private set; }

        private __RPC_Logic_ApplyExdata64_RET_Int64Array__ mResponse;
        public Int64Array Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public ApplyExdata64InMessage Clone()
        { 
            return new ApplyExdata64InMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class ApplyMissionInMessage : InMessage
    {
        public ApplyMissionInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_ApplyMission_ARG_int32_missionId__;

            mResponse = new __RPC_Logic_ApplyMission_RET_MissionDataMessage__();
            mResponse.ReturnValue = new MissionDataMessage();
        }


        public __RPC_Logic_ApplyMission_ARG_int32_missionId__ Request { get; private set; }

        private __RPC_Logic_ApplyMission_RET_MissionDataMessage__ mResponse;
        public MissionDataMessage Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public ApplyMissionInMessage Clone()
        { 
            return new ApplyMissionInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class ApplyBooksInMessage : InMessage
    {
        public ApplyBooksInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_ApplyBooks_ARG_uint32_placeholder__;

            mResponse = new __RPC_Logic_ApplyBooks_RET_BookDatas__();
            mResponse.ReturnValue = new BookDatas();
        }


        public __RPC_Logic_ApplyBooks_ARG_uint32_placeholder__ Request { get; private set; }

        private __RPC_Logic_ApplyBooks_RET_BookDatas__ mResponse;
        public BookDatas Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public ApplyBooksInMessage Clone()
        { 
            return new ApplyBooksInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class ReplaceEquipInMessage : InMessage
    {
        public ReplaceEquipInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_ReplaceEquip_ARG_int32_bagItemId_int32_part_int32_index__;

            mResponse = new __RPC_Logic_ReplaceEquip_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_ReplaceEquip_ARG_int32_bagItemId_int32_part_int32_index__ Request { get; private set; }

        private __RPC_Logic_ReplaceEquip_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public ReplaceEquipInMessage Clone()
        { 
            return new ReplaceEquipInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class AcceptMissionInMessage : InMessage
    {
        public AcceptMissionInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_AcceptMission_ARG_int32_missionId__;

            mResponse = new __RPC_Logic_AcceptMission_RET_MissionBaseData__();
            mResponse.ReturnValue = new MissionBaseData();
        }


        public __RPC_Logic_AcceptMission_ARG_int32_missionId__ Request { get; private set; }

        private __RPC_Logic_AcceptMission_RET_MissionBaseData__ mResponse;
        public MissionBaseData Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public AcceptMissionInMessage Clone()
        { 
            return new AcceptMissionInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class CommitMissionInMessage : InMessage
    {
        public CommitMissionInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_CommitMission_ARG_int32_missionId__;

            mResponse = new __RPC_Logic_CommitMission_RET_MissionDataMessage__();
            mResponse.ReturnValue = new MissionDataMessage();
        }


        public __RPC_Logic_CommitMission_ARG_int32_missionId__ Request { get; private set; }

        private __RPC_Logic_CommitMission_RET_MissionDataMessage__ mResponse;
        public MissionDataMessage Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public CommitMissionInMessage Clone()
        { 
            return new CommitMissionInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class CompleteMissionInMessage : InMessage
    {
        public CompleteMissionInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_CompleteMission_ARG_int32_missionId__;

            mResponse = new __RPC_Logic_CompleteMission_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_CompleteMission_ARG_int32_missionId__ Request { get; private set; }

        private __RPC_Logic_CompleteMission_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public CompleteMissionInMessage Clone()
        { 
            return new CompleteMissionInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class DropMissionInMessage : InMessage
    {
        public DropMissionInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_DropMission_ARG_int32_missionId__;

            mResponse = new __RPC_Logic_DropMission_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_DropMission_ARG_int32_missionId__ Request { get; private set; }

        private __RPC_Logic_DropMission_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public DropMissionInMessage Clone()
        { 
            return new DropMissionInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class EquipSkillInMessage : InMessage
    {
        public EquipSkillInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_EquipSkill_ARG_Int32Array_EquipSkills__;
            if (Request.EquipSkills == null) throw new ArgumentNullException("EquipSkills is null.");

            mResponse = new __RPC_Logic_EquipSkill_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_EquipSkill_ARG_Int32Array_EquipSkills__ Request { get; private set; }

        private __RPC_Logic_EquipSkill_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public EquipSkillInMessage Clone()
        { 
            return new EquipSkillInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class UpgradeSkillInMessage : InMessage
    {
        public UpgradeSkillInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_UpgradeSkill_ARG_int32_skillId__;

            mResponse = new __RPC_Logic_UpgradeSkill_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_UpgradeSkill_ARG_int32_skillId__ Request { get; private set; }

        private __RPC_Logic_UpgradeSkill_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public UpgradeSkillInMessage Clone()
        { 
            return new UpgradeSkillInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SellBagItemInMessage : InMessage
    {
        public SellBagItemInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_SellBagItem_ARG_int32_bagType_int32_itemId_int32_index_int32_count__;

            mResponse = new __RPC_Logic_SellBagItem_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_SellBagItem_ARG_int32_bagType_int32_itemId_int32_index_int32_count__ Request { get; private set; }

        private __RPC_Logic_SellBagItem_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public SellBagItemInMessage Clone()
        { 
            return new SellBagItemInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class RecycleBagItemInMessage : InMessage
    {
        public RecycleBagItemInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_RecycleBagItem_ARG_int32_bagType_int32_itemId_int32_index_int32_count__;

            mResponse = new __RPC_Logic_RecycleBagItem_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_RecycleBagItem_ARG_int32_bagType_int32_itemId_int32_index_int32_count__ Request { get; private set; }

        private __RPC_Logic_RecycleBagItem_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public RecycleBagItemInMessage Clone()
        { 
            return new RecycleBagItemInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class EnchanceEquipInMessage : InMessage
    {
        public EnchanceEquipInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_EnchanceEquip_ARG_int32_bagType_int32_bagIndex_int32_blessing_int32_upRate_int32_costGoldBlessNum__;

            mResponse = new __RPC_Logic_EnchanceEquip_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_EnchanceEquip_ARG_int32_bagType_int32_bagIndex_int32_blessing_int32_upRate_int32_costGoldBlessNum__ Request { get; private set; }

        private __RPC_Logic_EnchanceEquip_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public EnchanceEquipInMessage Clone()
        { 
            return new EnchanceEquipInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class AppendEquipInMessage : InMessage
    {
        public AppendEquipInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_AppendEquip_ARG_int32_bagType_int32_bagIndex__;

            mResponse = new __RPC_Logic_AppendEquip_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_AppendEquip_ARG_int32_bagType_int32_bagIndex__ Request { get; private set; }

        private __RPC_Logic_AppendEquip_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public AppendEquipInMessage Clone()
        { 
            return new AppendEquipInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class ResetExcellentEquipInMessage : InMessage
    {
        public ResetExcellentEquipInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_ResetExcellentEquip_ARG_int32_bagType_int32_bagIndex__;

            mResponse = new __RPC_Logic_ResetExcellentEquip_RET_Int32Array__();
            mResponse.ReturnValue = new Int32Array();
        }


        public __RPC_Logic_ResetExcellentEquip_ARG_int32_bagType_int32_bagIndex__ Request { get; private set; }

        private __RPC_Logic_ResetExcellentEquip_RET_Int32Array__ mResponse;
        public Int32Array Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public ResetExcellentEquipInMessage Clone()
        { 
            return new ResetExcellentEquipInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class ConfirmResetExcellentEquipInMessage : InMessage
    {
        public ConfirmResetExcellentEquipInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_ConfirmResetExcellentEquip_ARG_int32_bagType_int32_bagIndex_int32_ok__;

            mResponse = new __RPC_Logic_ConfirmResetExcellentEquip_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_ConfirmResetExcellentEquip_ARG_int32_bagType_int32_bagIndex_int32_ok__ Request { get; private set; }

        private __RPC_Logic_ConfirmResetExcellentEquip_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public ConfirmResetExcellentEquipInMessage Clone()
        { 
            return new ConfirmResetExcellentEquipInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SuperExcellentEquipInMessage : InMessage
    {
        public SuperExcellentEquipInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_SuperExcellentEquip_ARG_int32_bagType_int32_bagIndex_Int32Array_LockList__;
            if (Request.LockList == null) throw new ArgumentNullException("LockList is null.");

            mResponse = new __RPC_Logic_SuperExcellentEquip_RET_TwoList__();
            mResponse.ReturnValue = new TwoList();
        }


        public __RPC_Logic_SuperExcellentEquip_ARG_int32_bagType_int32_bagIndex_Int32Array_LockList__ Request { get; private set; }

        private __RPC_Logic_SuperExcellentEquip_RET_TwoList__ mResponse;
        public TwoList Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public SuperExcellentEquipInMessage Clone()
        { 
            return new SuperExcellentEquipInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SmritiEquipInMessage : InMessage
    {
        public SmritiEquipInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_SmritiEquip_ARG_int32_smritiType_int32_moneyType_int32_fromBagType_int32_fromBagIndex_int32_toBagType_int32_toBagIndex__;

            mResponse = new __RPC_Logic_SmritiEquip_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_SmritiEquip_ARG_int32_smritiType_int32_moneyType_int32_fromBagType_int32_fromBagIndex_int32_toBagType_int32_toBagIndex__ Request { get; private set; }

        private __RPC_Logic_SmritiEquip_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public SmritiEquipInMessage Clone()
        { 
            return new SmritiEquipInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class UseItemInMessage : InMessage
    {
        public UseItemInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_UseItem_ARG_int32_bagType_int32_bagIndex_int32_count__;

            mResponse = new __RPC_Logic_UseItem_RET_Dict_int_int_Data__();
            mResponse.ReturnValue = new Dict_int_int_Data();
        }


        public __RPC_Logic_UseItem_ARG_int32_bagType_int32_bagIndex_int32_count__ Request { get; private set; }

        private __RPC_Logic_UseItem_RET_Dict_int_int_Data__ mResponse;
        public Dict_int_int_Data Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public UseItemInMessage Clone()
        { 
            return new UseItemInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class LogicKillMonsterInMessage : InMessage
    {
        public LogicKillMonsterInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_LogicKillMonster_ARG_int32_MonsterId_int32_addExp_int32_sceneId__;

        }


        public __RPC_Logic_LogicKillMonster_ARG_int32_MonsterId_int32_addExp_int32_sceneId__ Request { get; private set; }

        public LogicKillMonsterInMessage Clone()
        { 
            return new LogicKillMonsterInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class GiveItemInMessage : InMessage
    {
        public GiveItemInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_GiveItem_ARG_int32_itemId_int32_itemCount_int32_from__;

            mResponse = new __RPC_Logic_GiveItem_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_GiveItem_ARG_int32_itemId_int32_itemCount_int32_from__ Request { get; private set; }

        private __RPC_Logic_GiveItem_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public GiveItemInMessage Clone()
        { 
            return new GiveItemInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class DeleteItemInMessage : InMessage
    {
        public DeleteItemInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_DeleteItem_ARG_int32_itemId_int32_itemCount_int32_deleteType__;

            mResponse = new __RPC_Logic_DeleteItem_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_DeleteItem_ARG_int32_itemId_int32_itemCount_int32_deleteType__ Request { get; private set; }

        private __RPC_Logic_DeleteItem_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public DeleteItemInMessage Clone()
        { 
            return new DeleteItemInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class FirstOnlineInMessage : InMessage
    {
        public FirstOnlineInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_FirstOnline_ARG_uint64_clientId_uint64_chararcterId_int32_continuedLanding__;

            mResponse = new __RPC_Logic_FirstOnline_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_FirstOnline_ARG_uint64_clientId_uint64_chararcterId_int32_continuedLanding__ Request { get; private set; }

        private __RPC_Logic_FirstOnline_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public FirstOnlineInMessage Clone()
        { 
            return new FirstOnlineInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class ActivationRewardInMessage : InMessage
    {
        public ActivationRewardInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_ActivationReward_ARG_int32_typeId_int32_giftId__;

            mResponse = new __RPC_Logic_ActivationReward_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_ActivationReward_ARG_int32_typeId_int32_giftId__ Request { get; private set; }

        private __RPC_Logic_ActivationReward_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public ActivationRewardInMessage Clone()
        { 
            return new ActivationRewardInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class ComposeItemInMessage : InMessage
    {
        public ComposeItemInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_ComposeItem_ARG_int32_composeId_int32_count__;

            mResponse = new __RPC_Logic_ComposeItem_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_ComposeItem_ARG_int32_composeId_int32_count__ Request { get; private set; }

        private __RPC_Logic_ComposeItem_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public ComposeItemInMessage Clone()
        { 
            return new ComposeItemInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class RewardAchievementInMessage : InMessage
    {
        public RewardAchievementInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_RewardAchievement_ARG_int32_achievementId__;

            mResponse = new __RPC_Logic_RewardAchievement_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_RewardAchievement_ARG_int32_achievementId__ Request { get; private set; }

        private __RPC_Logic_RewardAchievement_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public RewardAchievementInMessage Clone()
        { 
            return new RewardAchievementInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class DistributionAttrPointInMessage : InMessage
    {
        public DistributionAttrPointInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_DistributionAttrPoint_ARG_int32_Strength_int32_Agility_int32_Intelligence_int32_Endurance__;

            mResponse = new __RPC_Logic_DistributionAttrPoint_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_DistributionAttrPoint_ARG_int32_Strength_int32_Agility_int32_Intelligence_int32_Endurance__ Request { get; private set; }

        private __RPC_Logic_DistributionAttrPoint_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public DistributionAttrPointInMessage Clone()
        { 
            return new DistributionAttrPointInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class RefreshAttrPointInMessage : InMessage
    {
        public RefreshAttrPointInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_RefreshAttrPoint_ARG_int32_placeholder__;

            mResponse = new __RPC_Logic_RefreshAttrPoint_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_RefreshAttrPoint_ARG_int32_placeholder__ Request { get; private set; }

        private __RPC_Logic_RefreshAttrPoint_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public RefreshAttrPointInMessage Clone()
        { 
            return new RefreshAttrPointInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SetAttributeAutoAddInMessage : InMessage
    {
        public SetAttributeAutoAddInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_SetAttributeAutoAdd_ARG_int32_isAuto__;

            mResponse = new __RPC_Logic_SetAttributeAutoAdd_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_SetAttributeAutoAdd_ARG_int32_isAuto__ Request { get; private set; }

        private __RPC_Logic_SetAttributeAutoAdd_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public SetAttributeAutoAddInMessage Clone()
        { 
            return new SetAttributeAutoAddInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class ApplyFriendsInMessage : InMessage
    {
        public ApplyFriendsInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_ApplyFriends_ARG_int32_type__;

            mResponse = new __RPC_Logic_ApplyFriends_RET_CharacterSimpleDataList__();
            mResponse.ReturnValue = new CharacterSimpleDataList();
        }


        public __RPC_Logic_ApplyFriends_ARG_int32_type__ Request { get; private set; }

        private __RPC_Logic_ApplyFriends_RET_CharacterSimpleDataList__ mResponse;
        public CharacterSimpleDataList Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public ApplyFriendsInMessage Clone()
        { 
            return new ApplyFriendsInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SeekCharactersInMessage : InMessage
    {
        public SeekCharactersInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_SeekCharacters_ARG_string_name__;

            mResponse = new __RPC_Logic_SeekCharacters_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_SeekCharacters_ARG_string_name__ Request { get; private set; }

        private __RPC_Logic_SeekCharacters_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public SeekCharactersInMessage Clone()
        { 
            return new SeekCharactersInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SeekFriendsInMessage : InMessage
    {
        public SeekFriendsInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_SeekFriends_ARG_string_name__;

            mResponse = new __RPC_Logic_SeekFriends_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_SeekFriends_ARG_string_name__ Request { get; private set; }

        private __RPC_Logic_SeekFriends_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public SeekFriendsInMessage Clone()
        { 
            return new SeekFriendsInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class AddFriendByIdInMessage : InMessage
    {
        public AddFriendByIdInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_AddFriendById_ARG_uint64_characterId_int32_type__;

            mResponse = new __RPC_Logic_AddFriendById_RET_CharacterSimpleData__();
            mResponse.ReturnValue = new CharacterSimpleData();
        }


        public __RPC_Logic_AddFriendById_ARG_uint64_characterId_int32_type__ Request { get; private set; }

        private __RPC_Logic_AddFriendById_RET_CharacterSimpleData__ mResponse;
        public CharacterSimpleData Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public AddFriendByIdInMessage Clone()
        { 
            return new AddFriendByIdInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SSAddFriendByIdInMessage : InMessage
    {
        public SSAddFriendByIdInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_SSAddFriendById_ARG_uint64_characterId_int32_type__;

        }


        public __RPC_Logic_SSAddFriendById_ARG_uint64_characterId_int32_type__ Request { get; private set; }

        public SSAddFriendByIdInMessage Clone()
        { 
            return new SSAddFriendByIdInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class AddFriendByNameInMessage : InMessage
    {
        public AddFriendByNameInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_AddFriendByName_ARG_string_Name_int32_type__;

            mResponse = new __RPC_Logic_AddFriendByName_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_AddFriendByName_ARG_string_Name_int32_type__ Request { get; private set; }

        private __RPC_Logic_AddFriendByName_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public AddFriendByNameInMessage Clone()
        { 
            return new AddFriendByNameInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class DelFriendByIdInMessage : InMessage
    {
        public DelFriendByIdInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_DelFriendById_ARG_uint64_characterId_int32_type__;

            mResponse = new __RPC_Logic_DelFriendById_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_DelFriendById_ARG_uint64_characterId_int32_type__ Request { get; private set; }

        private __RPC_Logic_DelFriendById_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public DelFriendByIdInMessage Clone()
        { 
            return new DelFriendByIdInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class ServerGMCommandInMessage : InMessage
    {
        public ServerGMCommandInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_ServerGMCommand_ARG_string_cmd_string_param__;

        }


        public __RPC_Logic_ServerGMCommand_ARG_string_cmd_string_param__ Request { get; private set; }

        public ServerGMCommandInMessage Clone()
        { 
            return new ServerGMCommandInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class CompleteFubenInMessage : InMessage
    {
        public CompleteFubenInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_CompleteFuben_ARG_FubenResult_result__;
            if (Request.Result == null) throw new ArgumentNullException("Result is null.");

        }


        public __RPC_Logic_CompleteFuben_ARG_FubenResult_result__ Request { get; private set; }

        public CompleteFubenInMessage Clone()
        { 
            return new CompleteFubenInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class SelectDungeonRewardInMessage : InMessage
    {
        public SelectDungeonRewardInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_SelectDungeonReward_ARG_int32_fubenId_int32_select__;

            mResponse = new __RPC_Logic_SelectDungeonReward_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_SelectDungeonReward_ARG_int32_fubenId_int32_select__ Request { get; private set; }

        private __RPC_Logic_SelectDungeonReward_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public SelectDungeonRewardInMessage Clone()
        { 
            return new SelectDungeonRewardInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class EnterFubenInMessage : InMessage
    {
        public EnterFubenInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_EnterFuben_ARG_int32_fubenId__;

            mResponse = new __RPC_Logic_EnterFuben_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_EnterFuben_ARG_int32_fubenId__ Request { get; private set; }

        private __RPC_Logic_EnterFuben_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public EnterFubenInMessage Clone()
        { 
            return new EnterFubenInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class ResetFubenInMessage : InMessage
    {
        public ResetFubenInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_ResetFuben_ARG_int32_fubenId__;

            mResponse = new __RPC_Logic_ResetFuben_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_ResetFuben_ARG_int32_fubenId__ Request { get; private set; }

        private __RPC_Logic_ResetFuben_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public ResetFubenInMessage Clone()
        { 
            return new ResetFubenInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SweepFubenInMessage : InMessage
    {
        public SweepFubenInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_SweepFuben_ARG_int32_fubenId__;

            mResponse = new __RPC_Logic_SweepFuben_RET_DrawResult__();
            mResponse.ReturnValue = new DrawResult();
        }


        public __RPC_Logic_SweepFuben_ARG_int32_fubenId__ Request { get; private set; }

        private __RPC_Logic_SweepFuben_RET_DrawResult__ mResponse;
        public DrawResult Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public SweepFubenInMessage Clone()
        { 
            return new SweepFubenInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class ApplyStoresInMessage : InMessage
    {
        public ApplyStoresInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_ApplyStores_ARG_int32_type_int32_serviceType__;

            mResponse = new __RPC_Logic_ApplyStores_RET_StoneItems__();
            mResponse.ReturnValue = new StoneItems();
        }


        public __RPC_Logic_ApplyStores_ARG_int32_type_int32_serviceType__ Request { get; private set; }

        private __RPC_Logic_ApplyStores_RET_StoneItems__ mResponse;
        public StoneItems Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public ApplyStoresInMessage Clone()
        { 
            return new ApplyStoresInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class ActivateBookInMessage : InMessage
    {
        public ActivateBookInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_ActivateBook_ARG_int32_itemId__;

            mResponse = new __RPC_Logic_ActivateBook_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_ActivateBook_ARG_int32_itemId__ Request { get; private set; }

        private __RPC_Logic_ActivateBook_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public ActivateBookInMessage Clone()
        { 
            return new ActivateBookInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SortBagInMessage : InMessage
    {
        public SortBagInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_SortBag_ARG_int32_bagId__;

            mResponse = new __RPC_Logic_SortBag_RET_BagBaseData__();
            mResponse.ReturnValue = new BagBaseData();
        }


        public __RPC_Logic_SortBag_ARG_int32_bagId__ Request { get; private set; }

        private __RPC_Logic_SortBag_RET_BagBaseData__ mResponse;
        public BagBaseData Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public SortBagInMessage Clone()
        { 
            return new SortBagInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class ApplyPlayerInfoInMessage : InMessage
    {
        public ApplyPlayerInfoInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_ApplyPlayerInfo_ARG_uint64_characterId__;

            mResponse = new __RPC_Logic_ApplyPlayerInfo_RET_PlayerInfoMsg__();
            mResponse.ReturnValue = new PlayerInfoMsg();
        }


        public __RPC_Logic_ApplyPlayerInfo_ARG_uint64_characterId__ Request { get; private set; }

        private __RPC_Logic_ApplyPlayerInfo_RET_PlayerInfoMsg__ mResponse;
        public PlayerInfoMsg Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public ApplyPlayerInfoInMessage Clone()
        { 
            return new ApplyPlayerInfoInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SetFlagInMessage : InMessage
    {
        public SetFlagInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_SetFlag_ARG_Int32Array_trueDatas_Int32Array_falseDatas__;
            if (Request.TrueDatas == null) throw new ArgumentNullException("TrueDatas is null.");
            if (Request.FalseDatas == null) throw new ArgumentNullException("FalseDatas is null.");

            mResponse = new __RPC_Logic_SetFlag_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_SetFlag_ARG_Int32Array_trueDatas_Int32Array_falseDatas__ Request { get; private set; }

        private __RPC_Logic_SetFlag_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public SetFlagInMessage Clone()
        { 
            return new SetFlagInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SetExDataInMessage : InMessage
    {
        public SetExDataInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_SetExData_ARG_Dict_int_int_Data_datas__;
            if (Request.Datas == null) throw new ArgumentNullException("Datas is null.");

            mResponse = new __RPC_Logic_SetExData_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_SetExData_ARG_Dict_int_int_Data_datas__ Request { get; private set; }

        private __RPC_Logic_SetExData_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public SetExDataInMessage Clone()
        { 
            return new SetExDataInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class ApplyMailsInMessage : InMessage
    {
        public ApplyMailsInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_ApplyMails_ARG_int32_placeholder__;

            mResponse = new __RPC_Logic_ApplyMails_RET_MailList__();
            mResponse.ReturnValue = new MailList();
        }


        public __RPC_Logic_ApplyMails_ARG_int32_placeholder__ Request { get; private set; }

        private __RPC_Logic_ApplyMails_RET_MailList__ mResponse;
        public MailList Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public ApplyMailsInMessage Clone()
        { 
            return new ApplyMailsInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class ApplyMailInfoInMessage : InMessage
    {
        public ApplyMailInfoInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_ApplyMailInfo_ARG_uint64_mailId__;

            mResponse = new __RPC_Logic_ApplyMailInfo_RET_MailInfo__();
            mResponse.ReturnValue = new MailInfo();
        }


        public __RPC_Logic_ApplyMailInfo_ARG_uint64_mailId__ Request { get; private set; }

        private __RPC_Logic_ApplyMailInfo_RET_MailInfo__ mResponse;
        public MailInfo Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public ApplyMailInfoInMessage Clone()
        { 
            return new ApplyMailInfoInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class ReceiveMailInMessage : InMessage
    {
        public ReceiveMailInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_ReceiveMail_ARG_Uint64Array_mails__;
            if (Request.Mails == null) throw new ArgumentNullException("Mails is null.");

            mResponse = new __RPC_Logic_ReceiveMail_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_ReceiveMail_ARG_Uint64Array_mails__ Request { get; private set; }

        private __RPC_Logic_ReceiveMail_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public ReceiveMailInMessage Clone()
        { 
            return new ReceiveMailInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class DeleteMailInMessage : InMessage
    {
        public DeleteMailInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_DeleteMail_ARG_Uint64Array_mails__;
            if (Request.Mails == null) throw new ArgumentNullException("Mails is null.");

            mResponse = new __RPC_Logic_DeleteMail_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_DeleteMail_ARG_Uint64Array_mails__ Request { get; private set; }

        private __RPC_Logic_DeleteMail_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public DeleteMailInMessage Clone()
        { 
            return new DeleteMailInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class DurableDownInMessage : InMessage
    {
        public DurableDownInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_DurableDown_ARG_Dict_int_int_Data_bagidList__;
            if (Request.BagidList == null) throw new ArgumentNullException("BagidList is null.");

        }


        public __RPC_Logic_DurableDown_ARG_Dict_int_int_Data_bagidList__ Request { get; private set; }

        public DurableDownInMessage Clone()
        { 
            return new DurableDownInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class RepairEquipInMessage : InMessage
    {
        public RepairEquipInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_RepairEquip_ARG_int32_placeholder__;

            mResponse = new __RPC_Logic_RepairEquip_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_RepairEquip_ARG_int32_placeholder__ Request { get; private set; }

        private __RPC_Logic_RepairEquip_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public RepairEquipInMessage Clone()
        { 
            return new RepairEquipInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class NpcServiceInMessage : InMessage
    {
        public NpcServiceInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_NpcService_ARG_int32_serviceId__;

            mResponse = new __RPC_Logic_NpcService_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_NpcService_ARG_int32_serviceId__ Request { get; private set; }

        private __RPC_Logic_NpcService_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public NpcServiceInMessage Clone()
        { 
            return new NpcServiceInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class DepotTakeOutInMessage : InMessage
    {
        public DepotTakeOutInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_DepotTakeOut_ARG_int32_index__;

            mResponse = new __RPC_Logic_DepotTakeOut_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_DepotTakeOut_ARG_int32_index__ Request { get; private set; }

        private __RPC_Logic_DepotTakeOut_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public DepotTakeOutInMessage Clone()
        { 
            return new DepotTakeOutInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class DepotPutInInMessage : InMessage
    {
        public DepotPutInInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_DepotPutIn_ARG_int32_bagId_int32_index__;

            mResponse = new __RPC_Logic_DepotPutIn_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_DepotPutIn_ARG_int32_bagId_int32_index__ Request { get; private set; }

        private __RPC_Logic_DepotPutIn_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public DepotPutInInMessage Clone()
        { 
            return new DepotPutInInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class WishingPoolDepotTakeOutInMessage : InMessage
    {
        public WishingPoolDepotTakeOutInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_WishingPoolDepotTakeOut_ARG_int32_index__;

            mResponse = new __RPC_Logic_WishingPoolDepotTakeOut_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_WishingPoolDepotTakeOut_ARG_int32_index__ Request { get; private set; }

        private __RPC_Logic_WishingPoolDepotTakeOut_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public WishingPoolDepotTakeOutInMessage Clone()
        { 
            return new WishingPoolDepotTakeOutInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class StoreBuyInMessage : InMessage
    {
        public StoreBuyInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_StoreBuy_ARG_int32_storeId_int32_count_int32_serviceType__;

            mResponse = new __RPC_Logic_StoreBuy_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_StoreBuy_ARG_int32_storeId_int32_count_int32_serviceType__ Request { get; private set; }

        private __RPC_Logic_StoreBuy_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public StoreBuyInMessage Clone()
        { 
            return new StoreBuyInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class ApplyCityDataInMessage : InMessage
    {
        public ApplyCityDataInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_ApplyCityData_ARG_int32_buildingId__;

            mResponse = new __RPC_Logic_ApplyCityData_RET_CityDataMsg__();
            mResponse.ReturnValue = new CityDataMsg();
        }


        public __RPC_Logic_ApplyCityData_ARG_int32_buildingId__ Request { get; private set; }

        private __RPC_Logic_ApplyCityData_RET_CityDataMsg__ mResponse;
        public CityDataMsg Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public ApplyCityDataInMessage Clone()
        { 
            return new ApplyCityDataInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class CityOperationRequestInMessage : InMessage
    {
        public CityOperationRequestInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_CityOperationRequest_ARG_int32_opType_int32_buildingIdx_Int32Array_param__;
            if (Request.Param == null) throw new ArgumentNullException("Param is null.");

            mResponse = new __RPC_Logic_CityOperationRequest_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_CityOperationRequest_ARG_int32_opType_int32_buildingIdx_Int32Array_param__ Request { get; private set; }

        private __RPC_Logic_CityOperationRequest_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public CityOperationRequestInMessage Clone()
        { 
            return new CityOperationRequestInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class EnterCityInMessage : InMessage
    {
        public EnterCityInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_EnterCity_ARG_int32_cityId__;

            mResponse = new __RPC_Logic_EnterCity_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_EnterCity_ARG_int32_cityId__ Request { get; private set; }

        private __RPC_Logic_EnterCity_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public EnterCityInMessage Clone()
        { 
            return new EnterCityInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class ApplyEquipDurableInMessage : InMessage
    {
        public ApplyEquipDurableInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_ApplyEquipDurable_ARG_int32_placeholder__;

            mResponse = new __RPC_Logic_ApplyEquipDurable_RET_Dict_int_int_Data__();
            mResponse.ReturnValue = new Dict_int_int_Data();
        }


        public __RPC_Logic_ApplyEquipDurable_ARG_int32_placeholder__ Request { get; private set; }

        private __RPC_Logic_ApplyEquipDurable_RET_Dict_int_int_Data__ mResponse;
        public Dict_int_int_Data Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public ApplyEquipDurableInMessage Clone()
        { 
            return new ApplyEquipDurableInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class ElfOperateInMessage : InMessage
    {
        public ElfOperateInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_ElfOperate_ARG_int32_index_int32_type_int32_targetIndex__;

            mResponse = new __RPC_Logic_ElfOperate_RET_uint64__();
            mResponse.ReturnValue = new ulong();
        }


        public __RPC_Logic_ElfOperate_ARG_int32_index_int32_type_int32_targetIndex__ Request { get; private set; }

        private __RPC_Logic_ElfOperate_RET_uint64__ mResponse;
        public ulong Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public ElfOperateInMessage Clone()
        { 
            return new ElfOperateInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class ElfReplaceInMessage : InMessage
    {
        public ElfReplaceInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_ElfReplace_ARG_int32_from_int32_to__;

            mResponse = new __RPC_Logic_ElfReplace_RET_uint64__();
            mResponse.ReturnValue = new ulong();
        }


        public __RPC_Logic_ElfReplace_ARG_int32_from_int32_to__ Request { get; private set; }

        private __RPC_Logic_ElfReplace_RET_uint64__ mResponse;
        public ulong Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public ElfReplaceInMessage Clone()
        { 
            return new ElfReplaceInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class PushDrawInMessage : InMessage
    {
        public PushDrawInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_PushDraw_ARG_int32_drawId__;

        }


        public __RPC_Logic_PushDraw_ARG_int32_drawId__ Request { get; private set; }

        public PushDrawInMessage Clone()
        { 
            return new PushDrawInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class CheckCharacterInFubenInMessage : InMessage
    {
        public CheckCharacterInFubenInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_CheckCharacterInFuben_ARG_int32_fubenId__;

            mResponse = new __RPC_Logic_CheckCharacterInFuben_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_CheckCharacterInFuben_ARG_int32_fubenId__ Request { get; private set; }

        private __RPC_Logic_CheckCharacterInFuben_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public CheckCharacterInFubenInMessage Clone()
        { 
            return new CheckCharacterInFubenInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class WingFormationInMessage : InMessage
    {
        public WingFormationInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_WingFormation_ARG_int32_placeholder__;

            mResponse = new __RPC_Logic_WingFormation_RET_WingAdvanceResult__();
            mResponse.ReturnValue = new WingAdvanceResult();
        }


        public __RPC_Logic_WingFormation_ARG_int32_placeholder__ Request { get; private set; }

        private __RPC_Logic_WingFormation_RET_WingAdvanceResult__ mResponse;
        public WingAdvanceResult Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public WingFormationInMessage Clone()
        { 
            return new WingFormationInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class WingTrainInMessage : InMessage
    {
        public WingTrainInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_WingTrain_ARG_int32_type__;

            mResponse = new __RPC_Logic_WingTrain_RET_WingTrainResult__();
            mResponse.ReturnValue = new WingTrainResult();
        }


        public __RPC_Logic_WingTrain_ARG_int32_type__ Request { get; private set; }

        private __RPC_Logic_WingTrain_RET_WingTrainResult__ mResponse;
        public WingTrainResult Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public WingTrainInMessage Clone()
        { 
            return new WingTrainInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class OperatePetInMessage : InMessage
    {
        public OperatePetInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_OperatePet_ARG_int32_petId_int32_type_int32_param__;

            mResponse = new __RPC_Logic_OperatePet_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_OperatePet_ARG_int32_petId_int32_type_int32_param__ Request { get; private set; }

        private __RPC_Logic_OperatePet_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public OperatePetInMessage Clone()
        { 
            return new OperatePetInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class OperatePetMissionInMessage : InMessage
    {
        public OperatePetMissionInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_OperatePetMission_ARG_int32_id_int32_type_Int32Array_param__;
            if (Request.Param == null) throw new ArgumentNullException("Param is null.");

            mResponse = new __RPC_Logic_OperatePetMission_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_OperatePetMission_ARG_int32_id_int32_type_Int32Array_param__ Request { get; private set; }

        private __RPC_Logic_OperatePetMission_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public OperatePetMissionInMessage Clone()
        { 
            return new OperatePetMissionInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class PickUpMedalInMessage : InMessage
    {
        public PickUpMedalInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_PickUpMedal_ARG_int32_index_int32_flag__;

            mResponse = new __RPC_Logic_PickUpMedal_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_PickUpMedal_ARG_int32_index_int32_flag__ Request { get; private set; }

        private __RPC_Logic_PickUpMedal_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public PickUpMedalInMessage Clone()
        { 
            return new PickUpMedalInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class EnchanceMedalInMessage : InMessage
    {
        public EnchanceMedalInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_EnchanceMedal_ARG_int32_bagId_int32_bagIndex__;

            mResponse = new __RPC_Logic_EnchanceMedal_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_EnchanceMedal_ARG_int32_bagId_int32_bagIndex__ Request { get; private set; }

        private __RPC_Logic_EnchanceMedal_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public EnchanceMedalInMessage Clone()
        { 
            return new EnchanceMedalInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class EquipMedalInMessage : InMessage
    {
        public EquipMedalInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_EquipMedal_ARG_int32_bagId_int32_bagIndex__;

            mResponse = new __RPC_Logic_EquipMedal_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_EquipMedal_ARG_int32_bagId_int32_bagIndex__ Request { get; private set; }

        private __RPC_Logic_EquipMedal_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public EquipMedalInMessage Clone()
        { 
            return new EquipMedalInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SplitMedalInMessage : InMessage
    {
        public SplitMedalInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_SplitMedal_ARG_int32_bagId_int32_bagIndex_int32_flag__;

            mResponse = new __RPC_Logic_SplitMedal_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_SplitMedal_ARG_int32_bagId_int32_bagIndex_int32_flag__ Request { get; private set; }

        private __RPC_Logic_SplitMedal_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public SplitMedalInMessage Clone()
        { 
            return new SplitMedalInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class BuySpaceBagInMessage : InMessage
    {
        public BuySpaceBagInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_BuySpaceBag_ARG_int32_bagId_int32_bagIndex_int32_needCount__;

            mResponse = new __RPC_Logic_BuySpaceBag_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_BuySpaceBag_ARG_int32_bagId_int32_bagIndex_int32_needCount__ Request { get; private set; }

        private __RPC_Logic_BuySpaceBag_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public BuySpaceBagInMessage Clone()
        { 
            return new BuySpaceBagInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class UseBuildServiceInMessage : InMessage
    {
        public UseBuildServiceInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_UseBuildService_ARG_int32_areaId_int32_serviceId_Int32Array_param__;
            if (Request.Param == null) throw new ArgumentNullException("Param is null.");

            mResponse = new __RPC_Logic_UseBuildService_RET_UseBuildServiceResult__();
            mResponse.ReturnValue = new UseBuildServiceResult();
        }


        public __RPC_Logic_UseBuildService_ARG_int32_areaId_int32_serviceId_Int32Array_param__ Request { get; private set; }

        private __RPC_Logic_UseBuildService_RET_UseBuildServiceResult__ mResponse;
        public UseBuildServiceResult Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public UseBuildServiceInMessage Clone()
        { 
            return new UseBuildServiceInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class GetP1vP1LadderPlayerInMessage : InMessage
    {
        public GetP1vP1LadderPlayerInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_GetP1vP1LadderPlayer_ARG_int32_placeholder__;

            mResponse = new __RPC_Logic_GetP1vP1LadderPlayer_RET_P1vP1Ladder__();
            mResponse.ReturnValue = new P1vP1Ladder();
        }


        public __RPC_Logic_GetP1vP1LadderPlayer_ARG_int32_placeholder__ Request { get; private set; }

        private __RPC_Logic_GetP1vP1LadderPlayer_RET_P1vP1Ladder__ mResponse;
        public P1vP1Ladder Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public GetP1vP1LadderPlayerInMessage Clone()
        { 
            return new GetP1vP1LadderPlayerInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class GetP1vP1FightPlayerInMessage : InMessage
    {
        public GetP1vP1FightPlayerInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_GetP1vP1FightPlayer_ARG_int32_rank_uint64_guid_int32_type__;

            mResponse = new __RPC_Logic_GetP1vP1FightPlayer_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_GetP1vP1FightPlayer_ARG_int32_rank_uint64_guid_int32_type__ Request { get; private set; }

        private __RPC_Logic_GetP1vP1FightPlayer_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public GetP1vP1FightPlayerInMessage Clone()
        { 
            return new GetP1vP1FightPlayerInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class LogicP1vP1FightOverInMessage : InMessage
    {
        public LogicP1vP1FightOverInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_LogicP1vP1FightOver_ARG_uint64_characterId_int32_result_int32_rank__;

        }


        public __RPC_Logic_LogicP1vP1FightOver_ARG_uint64_characterId_int32_result_int32_rank__ Request { get; private set; }

        public LogicP1vP1FightOverInMessage Clone()
        { 
            return new LogicP1vP1FightOverInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class LogicP1vP1LadderAdvanceInMessage : InMessage
    {
        public LogicP1vP1LadderAdvanceInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_LogicP1vP1LadderAdvance_ARG_int32_rank__;

        }


        public __RPC_Logic_LogicP1vP1LadderAdvance_ARG_int32_rank__ Request { get; private set; }

        public LogicP1vP1LadderAdvanceInMessage Clone()
        { 
            return new LogicP1vP1LadderAdvanceInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class PushP1vP1LadderChangeInMessage : InMessage
    {
        public PushP1vP1LadderChangeInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_PushP1vP1LadderChange_ARG_int32_type_string_name_int32_result_int32_oldRank_int32_newRank__;

        }


        public __RPC_Logic_PushP1vP1LadderChange_ARG_int32_type_string_name_int32_result_int32_oldRank_int32_newRank__ Request { get; private set; }

        public PushP1vP1LadderChangeInMessage Clone()
        { 
            return new PushP1vP1LadderChangeInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class GetP1vP1LadderOldListInMessage : InMessage
    {
        public GetP1vP1LadderOldListInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_GetP1vP1LadderOldList_ARG_int32_placeholder__;

            mResponse = new __RPC_Logic_GetP1vP1LadderOldList_RET_P1vP1ChangeList__();
            mResponse.ReturnValue = new P1vP1ChangeList();
        }


        public __RPC_Logic_GetP1vP1LadderOldList_ARG_int32_placeholder__ Request { get; private set; }

        private __RPC_Logic_GetP1vP1LadderOldList_RET_P1vP1ChangeList__ mResponse;
        public P1vP1ChangeList Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public GetP1vP1LadderOldListInMessage Clone()
        { 
            return new GetP1vP1LadderOldListInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class BuyP1vP1CountInMessage : InMessage
    {
        public BuyP1vP1CountInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_BuyP1vP1Count_ARG_int32_placeholder__;

            mResponse = new __RPC_Logic_BuyP1vP1Count_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_BuyP1vP1Count_ARG_int32_placeholder__ Request { get; private set; }

        private __RPC_Logic_BuyP1vP1Count_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public BuyP1vP1CountInMessage Clone()
        { 
            return new BuyP1vP1CountInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class DrawLotteryPetEggInMessage : InMessage
    {
        public DrawLotteryPetEggInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_DrawLotteryPetEgg_ARG_int32_type__;

            mResponse = new __RPC_Logic_DrawLotteryPetEgg_RET_LotteryResult__();
            mResponse.ReturnValue = new LotteryResult();
        }


        public __RPC_Logic_DrawLotteryPetEgg_ARG_int32_type__ Request { get; private set; }

        private __RPC_Logic_DrawLotteryPetEgg_RET_LotteryResult__ mResponse;
        public LotteryResult Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public DrawLotteryPetEggInMessage Clone()
        { 
            return new DrawLotteryPetEggInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class RecoveryEquipInMessage : InMessage
    {
        public RecoveryEquipInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_RecoveryEquip_ARG_int32_type_Int32Array_indexList__;
            if (Request.IndexList == null) throw new ArgumentNullException("IndexList is null.");

            mResponse = new __RPC_Logic_RecoveryEquip_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_RecoveryEquip_ARG_int32_type_Int32Array_indexList__ Request { get; private set; }

        private __RPC_Logic_RecoveryEquip_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public RecoveryEquipInMessage Clone()
        { 
            return new RecoveryEquipInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class DrawWishingPoolInMessage : InMessage
    {
        public DrawWishingPoolInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_DrawWishingPool_ARG_int32_type__;

            mResponse = new __RPC_Logic_DrawWishingPool_RET_BagsChangeData__();
            mResponse.ReturnValue = new BagsChangeData();
        }


        public __RPC_Logic_DrawWishingPool_ARG_int32_type__ Request { get; private set; }

        private __RPC_Logic_DrawWishingPool_RET_BagsChangeData__ mResponse;
        public BagsChangeData Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public DrawWishingPoolInMessage Clone()
        { 
            return new DrawWishingPoolInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class ResetSkillTalentInMessage : InMessage
    {
        public ResetSkillTalentInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_ResetSkillTalent_ARG_int32_skillId__;

            mResponse = new __RPC_Logic_ResetSkillTalent_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_ResetSkillTalent_ARG_int32_skillId__ Request { get; private set; }

        private __RPC_Logic_ResetSkillTalent_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public ResetSkillTalentInMessage Clone()
        { 
            return new ResetSkillTalentInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class RobotcFinishFubenInMessage : InMessage
    {
        public RobotcFinishFubenInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_RobotcFinishFuben_ARG_int32_fubenId__;

            mResponse = new __RPC_Logic_RobotcFinishFuben_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_RobotcFinishFuben_ARG_int32_fubenId__ Request { get; private set; }

        private __RPC_Logic_RobotcFinishFuben_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public RobotcFinishFubenInMessage Clone()
        { 
            return new RobotcFinishFubenInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class CreateAllianceInMessage : InMessage
    {
        public CreateAllianceInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_CreateAlliance_ARG_string_name__;

            mResponse = new __RPC_Logic_CreateAlliance_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_CreateAlliance_ARG_string_name__ Request { get; private set; }

        private __RPC_Logic_CreateAlliance_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public CreateAllianceInMessage Clone()
        { 
            return new CreateAllianceInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class AllianceOperationInMessage : InMessage
    {
        public AllianceOperationInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_AllianceOperation_ARG_int32_type_int32_value__;

            mResponse = new __RPC_Logic_AllianceOperation_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_AllianceOperation_ARG_int32_type_int32_value__ Request { get; private set; }

        private __RPC_Logic_AllianceOperation_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public AllianceOperationInMessage Clone()
        { 
            return new AllianceOperationInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class AllianceOperationCharacterInMessage : InMessage
    {
        public AllianceOperationCharacterInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_AllianceOperationCharacter_ARG_int32_type_uint64_guid__;

            mResponse = new __RPC_Logic_AllianceOperationCharacter_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_AllianceOperationCharacter_ARG_int32_type_uint64_guid__ Request { get; private set; }

        private __RPC_Logic_AllianceOperationCharacter_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public AllianceOperationCharacterInMessage Clone()
        { 
            return new AllianceOperationCharacterInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class AllianceOperationCharacterByNameInMessage : InMessage
    {
        public AllianceOperationCharacterByNameInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_AllianceOperationCharacterByName_ARG_int32_type_string_name__;

            mResponse = new __RPC_Logic_AllianceOperationCharacterByName_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_AllianceOperationCharacterByName_ARG_int32_type_string_name__ Request { get; private set; }

        private __RPC_Logic_AllianceOperationCharacterByName_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public AllianceOperationCharacterByNameInMessage Clone()
        { 
            return new AllianceOperationCharacterByNameInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SSGetFlagOrConditionInMessage : InMessage
    {
        public SSGetFlagOrConditionInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_SSGetFlagOrCondition_ARG_uint64_guid_int32_flagId_int32_conditionid__;

            mResponse = new __RPC_Logic_SSGetFlagOrCondition_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_SSGetFlagOrCondition_ARG_uint64_guid_int32_flagId_int32_conditionid__ Request { get; private set; }

        private __RPC_Logic_SSGetFlagOrCondition_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public SSGetFlagOrConditionInMessage Clone()
        { 
            return new SSGetFlagOrConditionInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SSIsShieldInMessage : InMessage
    {
        public SSIsShieldInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_SSIsShield_ARG_uint64_guid_uint64_Shield__;

            mResponse = new __RPC_Logic_SSIsShield_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_SSIsShield_ARG_uint64_guid_uint64_Shield__ Request { get; private set; }

        private __RPC_Logic_SSIsShield_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public SSIsShieldInMessage Clone()
        { 
            return new SSIsShieldInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class WorshipCharacterInMessage : InMessage
    {
        public WorshipCharacterInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_WorshipCharacter_ARG_uint64_guid__;

            mResponse = new __RPC_Logic_WorshipCharacter_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_WorshipCharacter_ARG_uint64_guid__ Request { get; private set; }

        private __RPC_Logic_WorshipCharacter_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public WorshipCharacterInMessage Clone()
        { 
            return new WorshipCharacterInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SSChangeExdataInMessage : InMessage
    {
        public SSChangeExdataInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_SSChangeExdata_ARG_Dict_int_int_Data_changes__;
            if (Request.Changes == null) throw new ArgumentNullException("Changes is null.");

        }


        public __RPC_Logic_SSChangeExdata_ARG_Dict_int_int_Data_changes__ Request { get; private set; }

        public SSChangeExdataInMessage Clone()
        { 
            return new SSChangeExdataInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class DonationAllianceItemInMessage : InMessage
    {
        public DonationAllianceItemInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_DonationAllianceItem_ARG_int32_type__;

            mResponse = new __RPC_Logic_DonationAllianceItem_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_DonationAllianceItem_ARG_int32_type__ Request { get; private set; }

        private __RPC_Logic_DonationAllianceItem_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public DonationAllianceItemInMessage Clone()
        { 
            return new DonationAllianceItemInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class CityMissionOperationInMessage : InMessage
    {
        public CityMissionOperationInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_CityMissionOperation_ARG_int32_type_int32_missIndex_int32_cost__;

            mResponse = new __RPC_Logic_CityMissionOperation_RET_BagsChangeData__();
            mResponse.ReturnValue = new BagsChangeData();
        }


        public __RPC_Logic_CityMissionOperation_ARG_int32_type_int32_missIndex_int32_cost__ Request { get; private set; }

        private __RPC_Logic_CityMissionOperation_RET_BagsChangeData__ mResponse;
        public BagsChangeData Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public CityMissionOperationInMessage Clone()
        { 
            return new CityMissionOperationInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class DropCityMissionInMessage : InMessage
    {
        public DropCityMissionInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_DropCityMission_ARG_int32_missIndex__;

            mResponse = new __RPC_Logic_DropCityMission_RET_BuildMissionOne__();
            mResponse.ReturnValue = new BuildMissionOne();
        }


        public __RPC_Logic_DropCityMission_ARG_int32_missIndex__ Request { get; private set; }

        private __RPC_Logic_DropCityMission_RET_BuildMissionOne__ mResponse;
        public BuildMissionOne Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public DropCityMissionInMessage Clone()
        { 
            return new DropCityMissionInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class CityRefreshMissionInMessage : InMessage
    {
        public CityRefreshMissionInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_CityRefreshMission_ARG_int32_type__;

            mResponse = new __RPC_Logic_CityRefreshMission_RET_CityMissionDataMsg__();
            mResponse.ReturnValue = new CityMissionDataMsg();
        }


        public __RPC_Logic_CityRefreshMission_ARG_int32_type__ Request { get; private set; }

        private __RPC_Logic_CityRefreshMission_RET_CityMissionDataMsg__ mResponse;
        public CityMissionDataMsg Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public CityRefreshMissionInMessage Clone()
        { 
            return new CityRefreshMissionInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class StoreOperationAddInMessage : InMessage
    {
        public StoreOperationAddInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_StoreOperationAdd_ARG_int32_type_int32_bagId_int32_bagIndex_int32_count_int32_needCount_int32_storeIndex__;

            mResponse = new __RPC_Logic_StoreOperationAdd_RET_int64__();
            mResponse.ReturnValue = new long();
        }


        public __RPC_Logic_StoreOperationAdd_ARG_int32_type_int32_bagId_int32_bagIndex_int32_count_int32_needCount_int32_storeIndex__ Request { get; private set; }

        private __RPC_Logic_StoreOperationAdd_RET_int64__ mResponse;
        public long Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public StoreOperationAddInMessage Clone()
        { 
            return new StoreOperationAddInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class StoreOperationBroadcastInMessage : InMessage
    {
        public StoreOperationBroadcastInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_StoreOperationBroadcast_ARG_int32_type__;

            mResponse = new __RPC_Logic_StoreOperationBroadcast_RET_StoreBroadcastList__();
            mResponse.ReturnValue = new StoreBroadcastList();
        }


        public __RPC_Logic_StoreOperationBroadcast_ARG_int32_type__ Request { get; private set; }

        private __RPC_Logic_StoreOperationBroadcast_RET_StoreBroadcastList__ mResponse;
        public StoreBroadcastList Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public StoreOperationBroadcastInMessage Clone()
        { 
            return new StoreOperationBroadcastInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class StoreOperationBuyInMessage : InMessage
    {
        public StoreOperationBuyInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_StoreOperationBuy_ARG_uint64_guid_int64_storeId__;

            mResponse = new __RPC_Logic_StoreOperationBuy_RET_int64__();
            mResponse.ReturnValue = new long();
        }


        public __RPC_Logic_StoreOperationBuy_ARG_uint64_guid_int64_storeId__ Request { get; private set; }

        private __RPC_Logic_StoreOperationBuy_RET_int64__ mResponse;
        public long Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public StoreOperationBuyInMessage Clone()
        { 
            return new StoreOperationBuyInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class StoreOperationCancelInMessage : InMessage
    {
        public StoreOperationCancelInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_StoreOperationCancel_ARG_int64_storeId__;

            mResponse = new __RPC_Logic_StoreOperationCancel_RET_int64__();
            mResponse.ReturnValue = new long();
        }


        public __RPC_Logic_StoreOperationCancel_ARG_int64_storeId__ Request { get; private set; }

        private __RPC_Logic_StoreOperationCancel_RET_int64__ mResponse;
        public long Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public StoreOperationCancelInMessage Clone()
        { 
            return new StoreOperationCancelInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class StoreOperationLookInMessage : InMessage
    {
        public StoreOperationLookInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_StoreOperationLook_ARG_uint64_guid__;

            mResponse = new __RPC_Logic_StoreOperationLook_RET_OtherStoreList__();
            mResponse.ReturnValue = new OtherStoreList();
        }


        public __RPC_Logic_StoreOperationLook_ARG_uint64_guid__ Request { get; private set; }

        private __RPC_Logic_StoreOperationLook_RET_OtherStoreList__ mResponse;
        public OtherStoreList Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public StoreOperationLookInMessage Clone()
        { 
            return new StoreOperationLookInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class StoreOperationLookSelfInMessage : InMessage
    {
        public StoreOperationLookSelfInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_StoreOperationLookSelf_ARG_int32_placeholder__;

            mResponse = new __RPC_Logic_StoreOperationLookSelf_RET_SelfStoreList__();
            mResponse.ReturnValue = new SelfStoreList();
        }


        public __RPC_Logic_StoreOperationLookSelf_ARG_int32_placeholder__ Request { get; private set; }

        private __RPC_Logic_StoreOperationLookSelf_RET_SelfStoreList__ mResponse;
        public SelfStoreList Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public StoreOperationLookSelfInMessage Clone()
        { 
            return new StoreOperationLookSelfInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class StoreOperationHarvestInMessage : InMessage
    {
        public StoreOperationHarvestInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_StoreOperationHarvest_ARG_int64_storeId__;

            mResponse = new __RPC_Logic_StoreOperationHarvest_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_StoreOperationHarvest_ARG_int64_storeId__ Request { get; private set; }

        private __RPC_Logic_StoreOperationHarvest_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public StoreOperationHarvestInMessage Clone()
        { 
            return new StoreOperationHarvestInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SSStoreOperationBuyInMessage : InMessage
    {
        public SSStoreOperationBuyInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_SSStoreOperationBuy_ARG_int64_storeId_uint64_Aid_string_name_int32_resType_int32_resCount_ItemBaseData_itemdata__;
            if (Request.Itemdata == null) throw new ArgumentNullException("Itemdata is null.");

            mResponse = new __RPC_Logic_SSStoreOperationBuy_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_SSStoreOperationBuy_ARG_int64_storeId_uint64_Aid_string_name_int32_resType_int32_resCount_ItemBaseData_itemdata__ Request { get; private set; }

        private __RPC_Logic_SSStoreOperationBuy_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public SSStoreOperationBuyInMessage Clone()
        { 
            return new SSStoreOperationBuyInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SSStoreOperationExchangeInMessage : InMessage
    {
        public SSStoreOperationExchangeInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_SSStoreOperationExchange_ARG_int32_trade_int32_itemCount__;

            mResponse = new __RPC_Logic_SSStoreOperationExchange_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_SSStoreOperationExchange_ARG_int32_trade_int32_itemCount__ Request { get; private set; }

        private __RPC_Logic_SSStoreOperationExchange_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public SSStoreOperationExchangeInMessage Clone()
        { 
            return new SSStoreOperationExchangeInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class GetExchangeDataInMessage : InMessage
    {
        public GetExchangeDataInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_GetExchangeData_ARG_uint64_characterId__;

            mResponse = new __RPC_Logic_GetExchangeData_RET_OtherStoreList__();
            mResponse.ReturnValue = new OtherStoreList();
        }


        public __RPC_Logic_GetExchangeData_ARG_uint64_characterId__ Request { get; private set; }

        private __RPC_Logic_GetExchangeData_RET_OtherStoreList__ mResponse;
        public OtherStoreList Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public GetExchangeDataInMessage Clone()
        { 
            return new GetExchangeDataInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class ApplyGroupShopItemsInMessage : InMessage
    {
        public ApplyGroupShopItemsInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_ApplyGroupShopItems_ARG_Int32Array_types__;
            if (Request.Types == null) throw new ArgumentNullException("Types is null.");

            mResponse = new __RPC_Logic_ApplyGroupShopItems_RET_GroupShopItemAll__();
            mResponse.ReturnValue = new GroupShopItemAll();
        }


        public __RPC_Logic_ApplyGroupShopItems_ARG_Int32Array_types__ Request { get; private set; }

        private __RPC_Logic_ApplyGroupShopItems_RET_GroupShopItemAll__ mResponse;
        public GroupShopItemAll Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public ApplyGroupShopItemsInMessage Clone()
        { 
            return new ApplyGroupShopItemsInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class BuyGroupShopItemInMessage : InMessage
    {
        public BuyGroupShopItemInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_BuyGroupShopItem_ARG_int64_guid_int32_gropId_int32_count__;

            mResponse = new __RPC_Logic_BuyGroupShopItem_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_BuyGroupShopItem_ARG_int64_guid_int32_gropId_int32_count__ Request { get; private set; }

        private __RPC_Logic_BuyGroupShopItem_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public BuyGroupShopItemInMessage Clone()
        { 
            return new BuyGroupShopItemInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class GetBuyedGroupShopItemsInMessage : InMessage
    {
        public GetBuyedGroupShopItemsInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_GetBuyedGroupShopItems_ARG_int32_placeholder__;

            mResponse = new __RPC_Logic_GetBuyedGroupShopItems_RET_GroupShopItemAll__();
            mResponse.ReturnValue = new GroupShopItemAll();
        }


        public __RPC_Logic_GetBuyedGroupShopItems_ARG_int32_placeholder__ Request { get; private set; }

        private __RPC_Logic_GetBuyedGroupShopItems_RET_GroupShopItemAll__ mResponse;
        public GroupShopItemAll Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public GetBuyedGroupShopItemsInMessage Clone()
        { 
            return new GetBuyedGroupShopItemsInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class GetGroupShopHistoryInMessage : InMessage
    {
        public GetGroupShopHistoryInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_GetGroupShopHistory_ARG_int32_placeholder__;

            mResponse = new __RPC_Logic_GetGroupShopHistory_RET_GroupShopItemAll__();
            mResponse.ReturnValue = new GroupShopItemAll();
        }


        public __RPC_Logic_GetGroupShopHistory_ARG_int32_placeholder__ Request { get; private set; }

        private __RPC_Logic_GetGroupShopHistory_RET_GroupShopItemAll__ mResponse;
        public GroupShopItemAll Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public GetGroupShopHistoryInMessage Clone()
        { 
            return new GetGroupShopHistoryInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SendMailToCharacterByItemsInMessage : InMessage
    {
        public SendMailToCharacterByItemsInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_SendMailToCharacterByItems_ARG_int32_mailId_ItemBaseData_item_StringArray_args__;
            if (Request.Item == null) throw new ArgumentNullException("Item is null.");
            if (Request.Args == null) throw new ArgumentNullException("Args is null.");

        }


        public __RPC_Logic_SendMailToCharacterByItems_ARG_int32_mailId_ItemBaseData_item_StringArray_args__ Request { get; private set; }

        public SendMailToCharacterByItemsInMessage Clone()
        { 
            return new SendMailToCharacterByItemsInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class AllianceDataChangeInMessage : InMessage
    {
        public AllianceDataChangeInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_AllianceDataChange_ARG_int32_type_int32_allianceId_int32_ladder_string_name__;

        }


        public __RPC_Logic_AllianceDataChange_ARG_int32_type_int32_allianceId_int32_ladder_string_name__ Request { get; private set; }

        public AllianceDataChangeInMessage Clone()
        { 
            return new AllianceDataChangeInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class SSBattleResultInMessage : InMessage
    {
        public SSBattleResultInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_SSBattleResult_ARG_int32_fubenId_int32_type__;

            mResponse = new __RPC_Logic_SSBattleResult_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_SSBattleResult_ARG_int32_fubenId_int32_type__ Request { get; private set; }

        private __RPC_Logic_SSBattleResult_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public SSBattleResultInMessage Clone()
        { 
            return new SSBattleResultInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class AcceptBattleAwardInMessage : InMessage
    {
        public AcceptBattleAwardInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_AcceptBattleAward_ARG_int32_fubenId__;

            mResponse = new __RPC_Logic_AcceptBattleAward_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_AcceptBattleAward_ARG_int32_fubenId__ Request { get; private set; }

        private __RPC_Logic_AcceptBattleAward_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public AcceptBattleAwardInMessage Clone()
        { 
            return new AcceptBattleAwardInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class AstrologyLevelUpInMessage : InMessage
    {
        public AstrologyLevelUpInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_AstrologyLevelUp_ARG_int32_bagId_int32_bagIndex_Int32Array_needList__;
            if (Request.NeedList == null) throw new ArgumentNullException("NeedList is null.");

            mResponse = new __RPC_Logic_AstrologyLevelUp_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_AstrologyLevelUp_ARG_int32_bagId_int32_bagIndex_Int32Array_needList__ Request { get; private set; }

        private __RPC_Logic_AstrologyLevelUp_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public AstrologyLevelUpInMessage Clone()
        { 
            return new AstrologyLevelUpInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class AstrologyEquipOnInMessage : InMessage
    {
        public AstrologyEquipOnInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_AstrologyEquipOn_ARG_int32_bagIndex_int32_astrologyId_int32_Index__;

            mResponse = new __RPC_Logic_AstrologyEquipOn_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_AstrologyEquipOn_ARG_int32_bagIndex_int32_astrologyId_int32_Index__ Request { get; private set; }

        private __RPC_Logic_AstrologyEquipOn_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public AstrologyEquipOnInMessage Clone()
        { 
            return new AstrologyEquipOnInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class AstrologyEquipOffInMessage : InMessage
    {
        public AstrologyEquipOffInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_AstrologyEquipOff_ARG_int32_astrologyId_int32_Index__;

            mResponse = new __RPC_Logic_AstrologyEquipOff_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_AstrologyEquipOff_ARG_int32_astrologyId_int32_Index__ Request { get; private set; }

        private __RPC_Logic_AstrologyEquipOff_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public AstrologyEquipOffInMessage Clone()
        { 
            return new AstrologyEquipOffInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class UsePetExpItemInMessage : InMessage
    {
        public UsePetExpItemInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_UsePetExpItem_ARG_int32_petId_int32_itemId_int32_itemCount__;

            mResponse = new __RPC_Logic_UsePetExpItem_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_UsePetExpItem_ARG_int32_petId_int32_itemId_int32_itemCount__ Request { get; private set; }

        private __RPC_Logic_UsePetExpItem_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public UsePetExpItemInMessage Clone()
        { 
            return new UsePetExpItemInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class ReincarnationInMessage : InMessage
    {
        public ReincarnationInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_Reincarnation_ARG_int32_typeId__;

            mResponse = new __RPC_Logic_Reincarnation_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_Reincarnation_ARG_int32_typeId__ Request { get; private set; }

        private __RPC_Logic_Reincarnation_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public ReincarnationInMessage Clone()
        { 
            return new ReincarnationInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class UpgradeHonorInMessage : InMessage
    {
        public UpgradeHonorInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_UpgradeHonor_ARG_int32_typeId__;

            mResponse = new __RPC_Logic_UpgradeHonor_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_UpgradeHonor_ARG_int32_typeId__ Request { get; private set; }

        private __RPC_Logic_UpgradeHonor_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public UpgradeHonorInMessage Clone()
        { 
            return new UpgradeHonorInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class ReadyToEnterInMessage : InMessage
    {
        public ReadyToEnterInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_ReadyToEnter_ARG_int32_placeholder__;

            mResponse = new __RPC_Logic_ReadyToEnter_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_ReadyToEnter_ARG_int32_placeholder__ Request { get; private set; }

        private __RPC_Logic_ReadyToEnter_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public ReadyToEnterInMessage Clone()
        { 
            return new ReadyToEnterInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class ApplyCityBuildingDataInMessage : InMessage
    {
        public ApplyCityBuildingDataInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_ApplyCityBuildingData_ARG_int32_areaId__;

            mResponse = new __RPC_Logic_ApplyCityBuildingData_RET_BuildingData__();
            mResponse.ReturnValue = new BuildingData();
        }


        public __RPC_Logic_ApplyCityBuildingData_ARG_int32_areaId__ Request { get; private set; }

        private __RPC_Logic_ApplyCityBuildingData_RET_BuildingData__ mResponse;
        public BuildingData Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public ApplyCityBuildingDataInMessage Clone()
        { 
            return new ApplyCityBuildingDataInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class ApplyBagByTypeInMessage : InMessage
    {
        public ApplyBagByTypeInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_ApplyBagByType_ARG_int32_bagType__;

            mResponse = new __RPC_Logic_ApplyBagByType_RET_BagBaseData__();
            mResponse.ReturnValue = new BagBaseData();
        }


        public __RPC_Logic_ApplyBagByType_ARG_int32_bagType__ Request { get; private set; }

        private __RPC_Logic_ApplyBagByType_RET_BagBaseData__ mResponse;
        public BagBaseData Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public ApplyBagByTypeInMessage Clone()
        { 
            return new ApplyBagByTypeInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SSGetFriendListInMessage : InMessage
    {
        public SSGetFriendListInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_SSGetFriendList_ARG_int32_typeId__;

            mResponse = new __RPC_Logic_SSGetFriendList_RET_DictIntUint64Array__();
            mResponse.ReturnValue = new DictIntUint64Array();
        }


        public __RPC_Logic_SSGetFriendList_ARG_int32_typeId__ Request { get; private set; }

        private __RPC_Logic_SSGetFriendList_RET_DictIntUint64Array__ mResponse;
        public DictIntUint64Array Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public SSGetFriendListInMessage Clone()
        { 
            return new SSGetFriendListInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SSSendSimpleDataInMessage : InMessage
    {
        public SSSendSimpleDataInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_SSSendSimpleData_ARG_uint64_haveId_CharacterSimpleData_SimpleData__;
            if (Request.SimpleData == null) throw new ArgumentNullException("SimpleData is null.");

        }


        public __RPC_Logic_SSSendSimpleData_ARG_uint64_haveId_CharacterSimpleData_SimpleData__ Request { get; private set; }

        public SSSendSimpleDataInMessage Clone()
        { 
            return new SSSendSimpleDataInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class SSFriendpPssiveChangeInMessage : InMessage
    {
        public SSFriendpPssiveChangeInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_SSFriendpPssiveChange_ARG_int32_type_uint64_characterId_int32_operate__;

        }


        public __RPC_Logic_SSFriendpPssiveChange_ARG_int32_type_uint64_characterId_int32_operate__ Request { get; private set; }

        public SSFriendpPssiveChangeInMessage Clone()
        { 
            return new SSFriendpPssiveChangeInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class SSFetchExdataInMessage : InMessage
    {
        public SSFetchExdataInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_SSFetchExdata_ARG_Int32Array_idList__;
            if (Request.IdList == null) throw new ArgumentNullException("IdList is null.");

            mResponse = new __RPC_Logic_SSFetchExdata_RET_Int32Array__();
            mResponse.ReturnValue = new Int32Array();
        }


        public __RPC_Logic_SSFetchExdata_ARG_Int32Array_idList__ Request { get; private set; }

        private __RPC_Logic_SSFetchExdata_RET_Int32Array__ mResponse;
        public Int32Array Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public SSFetchExdataInMessage Clone()
        { 
            return new SSFetchExdataInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SSDeleteItemByIndexInMessage : InMessage
    {
        public SSDeleteItemByIndexInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_SSDeleteItemByIndex_ARG_int32_bagId_int32_bagIndex_int32_itemCount__;

            mResponse = new __RPC_Logic_SSDeleteItemByIndex_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_SSDeleteItemByIndex_ARG_int32_bagId_int32_bagIndex_int32_itemCount__ Request { get; private set; }

        private __RPC_Logic_SSDeleteItemByIndex_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public SSDeleteItemByIndexInMessage Clone()
        { 
            return new SSDeleteItemByIndexInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class StoreBuyEquipInMessage : InMessage
    {
        public StoreBuyEquipInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_StoreBuyEquip_ARG_int32_storeId_int32_bagId_int32_bagIndex_int32_serviceType__;

            mResponse = new __RPC_Logic_StoreBuyEquip_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_StoreBuyEquip_ARG_int32_storeId_int32_bagId_int32_bagIndex_int32_serviceType__ Request { get; private set; }

        private __RPC_Logic_StoreBuyEquip_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public StoreBuyEquipInMessage Clone()
        { 
            return new StoreBuyEquipInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class GetQuestionDataInMessage : InMessage
    {
        public GetQuestionDataInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_GetQuestionData_ARG_int32_placeholder__;

            mResponse = new __RPC_Logic_GetQuestionData_RET_QuestionMessage__();
            mResponse.ReturnValue = new QuestionMessage();
        }


        public __RPC_Logic_GetQuestionData_ARG_int32_placeholder__ Request { get; private set; }

        private __RPC_Logic_GetQuestionData_RET_QuestionMessage__ mResponse;
        public QuestionMessage Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public GetQuestionDataInMessage Clone()
        { 
            return new GetQuestionDataInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class AnswerQuestionInMessage : InMessage
    {
        public AnswerQuestionInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_AnswerQuestion_ARG_int32_answer__;

            mResponse = new __RPC_Logic_AnswerQuestion_RET_QuestionMessage__();
            mResponse.ReturnValue = new QuestionMessage();
        }


        public __RPC_Logic_AnswerQuestion_ARG_int32_answer__ Request { get; private set; }

        private __RPC_Logic_AnswerQuestion_RET_QuestionMessage__ mResponse;
        public QuestionMessage Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public AnswerQuestionInMessage Clone()
        { 
            return new AnswerQuestionInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SSGetMissionEnterSceneInMessage : InMessage
    {
        public SSGetMissionEnterSceneInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_SSGetMissionEnterScene_ARG_int32_missionId__;

            mResponse = new __RPC_Logic_SSGetMissionEnterScene_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_SSGetMissionEnterScene_ARG_int32_missionId__ Request { get; private set; }

        private __RPC_Logic_SSGetMissionEnterScene_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public SSGetMissionEnterSceneInMessage Clone()
        { 
            return new SSGetMissionEnterSceneInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class RemoveErrorAnswerInMessage : InMessage
    {
        public RemoveErrorAnswerInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_RemoveErrorAnswer_ARG_int32_placeholder__;

            mResponse = new __RPC_Logic_RemoveErrorAnswer_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_RemoveErrorAnswer_ARG_int32_placeholder__ Request { get; private set; }

        private __RPC_Logic_RemoveErrorAnswer_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public RemoveErrorAnswerInMessage Clone()
        { 
            return new RemoveErrorAnswerInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class AnswerQuestionUseItemInMessage : InMessage
    {
        public AnswerQuestionUseItemInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_AnswerQuestionUseItem_ARG_int32_placeholder__;

            mResponse = new __RPC_Logic_AnswerQuestionUseItem_RET_QuestionMessage__();
            mResponse.ReturnValue = new QuestionMessage();
        }


        public __RPC_Logic_AnswerQuestionUseItem_ARG_int32_placeholder__ Request { get; private set; }

        private __RPC_Logic_AnswerQuestionUseItem_RET_QuestionMessage__ mResponse;
        public QuestionMessage Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public AnswerQuestionUseItemInMessage Clone()
        { 
            return new AnswerQuestionUseItemInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class ApplyPlayerHeadInfoInMessage : InMessage
    {
        public ApplyPlayerHeadInfoInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_ApplyPlayerHeadInfo_ARG_uint64_characterId__;

            mResponse = new __RPC_Logic_ApplyPlayerHeadInfo_RET_PlayerHeadInfoMsg__();
            mResponse.ReturnValue = new PlayerHeadInfoMsg();
        }


        public __RPC_Logic_ApplyPlayerHeadInfo_ARG_uint64_characterId__ Request { get; private set; }

        private __RPC_Logic_ApplyPlayerHeadInfo_RET_PlayerHeadInfoMsg__ mResponse;
        public PlayerHeadInfoMsg Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public ApplyPlayerHeadInfoInMessage Clone()
        { 
            return new ApplyPlayerHeadInfoInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class NotifyDungeonCloseInMessage : InMessage
    {
        public NotifyDungeonCloseInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_NotifyDungeonClose_ARG_int32_fubenId_Uint64Array_playerIds__;
            if (Request.PlayerIds == null) throw new ArgumentNullException("PlayerIds is null.");

        }


        public __RPC_Logic_NotifyDungeonClose_ARG_int32_fubenId_Uint64Array_playerIds__ Request { get; private set; }

        public NotifyDungeonCloseInMessage Clone()
        { 
            return new NotifyDungeonCloseInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class GetCompensationListInMessage : InMessage
    {
        public GetCompensationListInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_GetCompensationList_ARG_int32_placeholder__;

            mResponse = new __RPC_Logic_GetCompensationList_RET_CompensationList__();
            mResponse.ReturnValue = new CompensationList();
        }


        public __RPC_Logic_GetCompensationList_ARG_int32_placeholder__ Request { get; private set; }

        private __RPC_Logic_GetCompensationList_RET_CompensationList__ mResponse;
        public CompensationList Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public GetCompensationListInMessage Clone()
        { 
            return new GetCompensationListInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class ReceiveCompensationInMessage : InMessage
    {
        public ReceiveCompensationInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_ReceiveCompensation_ARG_int32_indexType_int32_type__;

            mResponse = new __RPC_Logic_ReceiveCompensation_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_ReceiveCompensation_ARG_int32_indexType_int32_type__ Request { get; private set; }

        private __RPC_Logic_ReceiveCompensation_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public ReceiveCompensationInMessage Clone()
        { 
            return new ReceiveCompensationInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SSSetExdataInMessage : InMessage
    {
        public SSSetExdataInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_SSSetExdata_ARG_Dict_int_int_Data_changes__;
            if (Request.Changes == null) throw new ArgumentNullException("Changes is null.");

            mResponse = new __RPC_Logic_SSSetExdata_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_SSSetExdata_ARG_Dict_int_int_Data_changes__ Request { get; private set; }

        private __RPC_Logic_SSSetExdata_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public SSSetExdataInMessage Clone()
        { 
            return new SSSetExdataInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SSSetFlagInMessage : InMessage
    {
        public SSSetFlagInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_SSSetFlag_ARG_Dict_int_int_Data_changes__;
            if (Request.Changes == null) throw new ArgumentNullException("Changes is null.");

            mResponse = new __RPC_Logic_SSSetFlag_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_SSSetFlag_ARG_Dict_int_int_Data_changes__ Request { get; private set; }

        private __RPC_Logic_SSSetFlag_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public SSSetFlagInMessage Clone()
        { 
            return new SSSetFlagInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SelectTitleInMessage : InMessage
    {
        public SelectTitleInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_SelectTitle_ARG_int32_id__;

            mResponse = new __RPC_Logic_SelectTitle_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_SelectTitle_ARG_int32_id__ Request { get; private set; }

        private __RPC_Logic_SelectTitle_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public SelectTitleInMessage Clone()
        { 
            return new SelectTitleInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class LogicGetTitleListInMessage : InMessage
    {
        public LogicGetTitleListInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_LogicGetTitleList_ARG_uint32_placeholder__;

            mResponse = new __RPC_Logic_LogicGetTitleList_RET_LogicTitleData__();
            mResponse.ReturnValue = new LogicTitleData();
        }


        public __RPC_Logic_LogicGetTitleList_ARG_uint32_placeholder__ Request { get; private set; }

        private __RPC_Logic_LogicGetTitleList_RET_LogicTitleData__ mResponse;
        public LogicTitleData Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public LogicGetTitleListInMessage Clone()
        { 
            return new LogicGetTitleListInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class RechargeSuccessInMessage : InMessage
    {
        public RechargeSuccessInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_RechargeSuccess_ARG_string_platform_int32_payType_float_price_string_orderId_string_channel__;

            mResponse = new __RPC_Logic_RechargeSuccess_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_RechargeSuccess_ARG_string_platform_int32_payType_float_price_string_orderId_string_channel__ Request { get; private set; }

        private __RPC_Logic_RechargeSuccess_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public RechargeSuccessInMessage Clone()
        { 
            return new RechargeSuccessInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class GetItemCountInMessage : InMessage
    {
        public GetItemCountInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_GetItemCount_ARG_int32_itemId__;

            mResponse = new __RPC_Logic_GetItemCount_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_GetItemCount_ARG_int32_itemId__ Request { get; private set; }

        private __RPC_Logic_GetItemCount_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public GetItemCountInMessage Clone()
        { 
            return new GetItemCountInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class RetrainPetInMessage : InMessage
    {
        public RetrainPetInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_RetrainPet_ARG_int32_petId__;

            mResponse = new __RPC_Logic_RetrainPet_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_RetrainPet_ARG_int32_petId__ Request { get; private set; }

        private __RPC_Logic_RetrainPet_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public RetrainPetInMessage Clone()
        { 
            return new RetrainPetInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class UpgradeAllianceBuffInMessage : InMessage
    {
        public UpgradeAllianceBuffInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_UpgradeAllianceBuff_ARG_int32_buffId__;

            mResponse = new __RPC_Logic_UpgradeAllianceBuff_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_UpgradeAllianceBuff_ARG_int32_buffId__ Request { get; private set; }

        private __RPC_Logic_UpgradeAllianceBuff_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public UpgradeAllianceBuffInMessage Clone()
        { 
            return new UpgradeAllianceBuffInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SSGetAllianceBuffInMessage : InMessage
    {
        public SSGetAllianceBuffInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_SSGetAllianceBuff_ARG_int32_placeholder__;

            mResponse = new __RPC_Logic_SSGetAllianceBuff_RET_Int32Array__();
            mResponse.ReturnValue = new Int32Array();
        }


        public __RPC_Logic_SSGetAllianceBuff_ARG_int32_placeholder__ Request { get; private set; }

        private __RPC_Logic_SSGetAllianceBuff_RET_Int32Array__ mResponse;
        public Int32Array Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public SSGetAllianceBuffInMessage Clone()
        { 
            return new SSGetAllianceBuffInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class NotifyAllianceWarInfoInMessage : InMessage
    {
        public NotifyAllianceWarInfoInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_NotifyAllianceWarInfo_ARG_AllianceWarInfo_info__;
            if (Request.Info == null) throw new ArgumentNullException("Info is null.");

        }


        public __RPC_Logic_NotifyAllianceWarInfo_ARG_AllianceWarInfo_info__ Request { get; private set; }

        public NotifyAllianceWarInfoInMessage Clone()
        { 
            return new NotifyAllianceWarInfoInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class InvestmentInMessage : InMessage
    {
        public InvestmentInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_Investment_ARG_int32_id__;

            mResponse = new __RPC_Logic_Investment_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_Investment_ARG_int32_id__ Request { get; private set; }

        private __RPC_Logic_Investment_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public InvestmentInMessage Clone()
        { 
            return new InvestmentInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class GainRewardInMessage : InMessage
    {
        public GainRewardInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_GainReward_ARG_int32_type_int32_id__;

            mResponse = new __RPC_Logic_GainReward_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_GainReward_ARG_int32_type_int32_id__ Request { get; private set; }

        private __RPC_Logic_GainReward_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public GainRewardInMessage Clone()
        { 
            return new GainRewardInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class NotifyEnterFubenInMessage : InMessage
    {
        public NotifyEnterFubenInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_NotifyEnterFuben_ARG_int32_fubenId__;

        }


        public __RPC_Logic_NotifyEnterFuben_ARG_int32_fubenId__ Request { get; private set; }

        public NotifyEnterFubenInMessage Clone()
        { 
            return new NotifyEnterFubenInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class WorshipInMessage : InMessage
    {
        public WorshipInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_Worship_ARG_int32_type__;

            mResponse = new __RPC_Logic_Worship_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_Worship_ARG_int32_type__ Request { get; private set; }

        private __RPC_Logic_Worship_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public WorshipInMessage Clone()
        { 
            return new WorshipInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class ChangeServerInMessage : InMessage
    {
        public ChangeServerInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_ChangeServer_ARG_int32_newServerId__;

            mResponse = new __RPC_Logic_ChangeServer_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_ChangeServer_ARG_int32_newServerId__ Request { get; private set; }

        private __RPC_Logic_ChangeServer_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public ChangeServerInMessage Clone()
        { 
            return new ChangeServerInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class UseGiftCodeInMessage : InMessage
    {
        public UseGiftCodeInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_UseGiftCode_ARG_string_code__;

            mResponse = new __RPC_Logic_UseGiftCode_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_UseGiftCode_ARG_string_code__ Request { get; private set; }

        private __RPC_Logic_UseGiftCode_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public UseGiftCodeInMessage Clone()
        { 
            return new UseGiftCodeInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class ApplyRechargeTablesInMessage : InMessage
    {
        public ApplyRechargeTablesInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_ApplyRechargeTables_ARG_int32_placeholder__;

            mResponse = new __RPC_Logic_ApplyRechargeTables_RET_RechargeActivityData__();
            mResponse.ReturnValue = new RechargeActivityData();
        }


        public __RPC_Logic_ApplyRechargeTables_ARG_int32_placeholder__ Request { get; private set; }

        private __RPC_Logic_ApplyRechargeTables_RET_RechargeActivityData__ mResponse;
        public RechargeActivityData Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public ApplyRechargeTablesInMessage Clone()
        { 
            return new ApplyRechargeTablesInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class ApplyFirstChargeItemInMessage : InMessage
    {
        public ApplyFirstChargeItemInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_ApplyFirstChargeItem_ARG_int32_placeholder__;

            mResponse = new __RPC_Logic_ApplyFirstChargeItem_RET_FirstChargeData__();
            mResponse.ReturnValue = new FirstChargeData();
        }


        public __RPC_Logic_ApplyFirstChargeItem_ARG_int32_placeholder__ Request { get; private set; }

        private __RPC_Logic_ApplyFirstChargeItem_RET_FirstChargeData__ mResponse;
        public FirstChargeData Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public ApplyFirstChargeItemInMessage Clone()
        { 
            return new ApplyFirstChargeItemInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class ApplyGetFirstChargeItemInMessage : InMessage
    {
        public ApplyGetFirstChargeItemInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_ApplyGetFirstChargeItem_ARG_int32_index__;

            mResponse = new __RPC_Logic_ApplyGetFirstChargeItem_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_ApplyGetFirstChargeItem_ARG_int32_index__ Request { get; private set; }

        private __RPC_Logic_ApplyGetFirstChargeItem_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public ApplyGetFirstChargeItemInMessage Clone()
        { 
            return new ApplyGetFirstChargeItemInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class TakeMultyExpAwardInMessage : InMessage
    {
        public TakeMultyExpAwardInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_TakeMultyExpAward_ARG_int32_id__;

            mResponse = new __RPC_Logic_TakeMultyExpAward_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_TakeMultyExpAward_ARG_int32_id__ Request { get; private set; }

        private __RPC_Logic_TakeMultyExpAward_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public TakeMultyExpAwardInMessage Clone()
        { 
            return new TakeMultyExpAwardInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class RandEquipSkillInMessage : InMessage
    {
        public RandEquipSkillInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_RandEquipSkill_ARG_int32_bagType_int32_bagIndex_int32_itemId__;

            mResponse = new __RPC_Logic_RandEquipSkill_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_RandEquipSkill_ARG_int32_bagType_int32_bagIndex_int32_itemId__ Request { get; private set; }

        private __RPC_Logic_RandEquipSkill_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public RandEquipSkillInMessage Clone()
        { 
            return new RandEquipSkillInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class UseEquipSkillInMessage : InMessage
    {
        public UseEquipSkillInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_UseEquipSkill_ARG_int32_bagType_int32_bagIndex_int32_type__;

            mResponse = new __RPC_Logic_UseEquipSkill_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_UseEquipSkill_ARG_int32_bagType_int32_bagIndex_int32_type__ Request { get; private set; }

        private __RPC_Logic_UseEquipSkill_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public UseEquipSkillInMessage Clone()
        { 
            return new UseEquipSkillInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class LogicGetElfDataInMessage : InMessage
    {
        public LogicGetElfDataInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_LogicGetElfData_ARG_uint64_chararcterId__;

            mResponse = new __RPC_Logic_LogicGetElfData_RET_ElfData__();
            mResponse.ReturnValue = new ElfData();
        }


        public __RPC_Logic_LogicGetElfData_ARG_uint64_chararcterId__ Request { get; private set; }

        private __RPC_Logic_LogicGetElfData_RET_ElfData__ mResponse;
        public ElfData Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public LogicGetElfDataInMessage Clone()
        { 
            return new LogicGetElfDataInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class ReplaceElfSkillInMessage : InMessage
    {
        public ReplaceElfSkillInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_ReplaceElfSkill_ARG_int32_elfBagIndex_int32_exdataIndex_int32_itemBagId_int32_itemBagIndex__;

            mResponse = new __RPC_Logic_ReplaceElfSkill_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_ReplaceElfSkill_ARG_int32_elfBagIndex_int32_exdataIndex_int32_itemBagId_int32_itemBagIndex__ Request { get; private set; }

        private __RPC_Logic_ReplaceElfSkill_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public ReplaceElfSkillInMessage Clone()
        { 
            return new ReplaceElfSkillInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class RecycleBagItemListInMessage : InMessage
    {
        public RecycleBagItemListInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_RecycleBagItemList_ARG_RecycleItemList_itemList__;
            if (Request.ItemList == null) throw new ArgumentNullException("ItemList is null.");

            mResponse = new __RPC_Logic_RecycleBagItemList_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_RecycleBagItemList_ARG_RecycleItemList_itemList__ Request { get; private set; }

        private __RPC_Logic_RecycleBagItemList_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public RecycleBagItemListInMessage Clone()
        { 
            return new RecycleBagItemListInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class ResolveElfListInMessage : InMessage
    {
        public ResolveElfListInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_ResolveElfList_ARG_Int32Array_elfIndexList__;
            if (Request.ElfIndexList == null) throw new ArgumentNullException("ElfIndexList is null.");

            mResponse = new __RPC_Logic_ResolveElfList_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_ResolveElfList_ARG_Int32Array_elfIndexList__ Request { get; private set; }

        private __RPC_Logic_ResolveElfList_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public ResolveElfListInMessage Clone()
        { 
            return new ResolveElfListInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class CSEnterEraByIdInMessage : InMessage
    {
        public CSEnterEraByIdInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_CSEnterEraById_ARG_int32_eraId__;

            mResponse = new __RPC_Logic_CSEnterEraById_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_CSEnterEraById_ARG_int32_eraId__ Request { get; private set; }

        private __RPC_Logic_CSEnterEraById_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public CSEnterEraByIdInMessage Clone()
        { 
            return new CSEnterEraByIdInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class EraPlayedSkillInMessage : InMessage
    {
        public EraPlayedSkillInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_EraPlayedSkill_ARG_int32_placeholder__;

            mResponse = new __RPC_Logic_EraPlayedSkill_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_EraPlayedSkill_ARG_int32_placeholder__ Request { get; private set; }

        private __RPC_Logic_EraPlayedSkill_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public EraPlayedSkillInMessage Clone()
        { 
            return new EraPlayedSkillInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class EraTakeAchvAwardInMessage : InMessage
    {
        public EraTakeAchvAwardInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_EraTakeAchvAward_ARG_int32_achvId__;

            mResponse = new __RPC_Logic_EraTakeAchvAward_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_EraTakeAchvAward_ARG_int32_achvId__ Request { get; private set; }

        private __RPC_Logic_EraTakeAchvAward_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public EraTakeAchvAwardInMessage Clone()
        { 
            return new EraTakeAchvAwardInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class EraTakeAwardInMessage : InMessage
    {
        public EraTakeAwardInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_EraTakeAward_ARG_int32_eraId__;

            mResponse = new __RPC_Logic_EraTakeAward_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_EraTakeAward_ARG_int32_eraId__ Request { get; private set; }

        private __RPC_Logic_EraTakeAward_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public EraTakeAwardInMessage Clone()
        { 
            return new EraTakeAwardInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class RefreshHunterMissionInMessage : InMessage
    {
        public RefreshHunterMissionInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_RefreshHunterMission_ARG_int32_placeholder__;

            mResponse = new __RPC_Logic_RefreshHunterMission_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_RefreshHunterMission_ARG_int32_placeholder__ Request { get; private set; }

        private __RPC_Logic_RefreshHunterMission_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public RefreshHunterMissionInMessage Clone()
        { 
            return new RefreshHunterMissionInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class CSApplyOfflineExpDataInMessage : InMessage
    {
        public CSApplyOfflineExpDataInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_CSApplyOfflineExpData_ARG_int32_placeholder__;

            mResponse = new __RPC_Logic_CSApplyOfflineExpData_RET_OfflineExpData__();
            mResponse.ReturnValue = new OfflineExpData();
        }


        public __RPC_Logic_CSApplyOfflineExpData_ARG_int32_placeholder__ Request { get; private set; }

        private __RPC_Logic_CSApplyOfflineExpData_RET_OfflineExpData__ mResponse;
        public OfflineExpData Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public CSApplyOfflineExpDataInMessage Clone()
        { 
            return new CSApplyOfflineExpDataInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class RereshTiralTimeInMessage : InMessage
    {
        public RereshTiralTimeInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_RereshTiralTime_ARG_int32_placeholder__;

            mResponse = new __RPC_Logic_RereshTiralTime_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_RereshTiralTime_ARG_int32_placeholder__ Request { get; private set; }

        private __RPC_Logic_RereshTiralTime_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public RereshTiralTimeInMessage Clone()
        { 
            return new RereshTiralTimeInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SBCleanClientCharacterDataInMessage : InMessage
    {
        public SBCleanClientCharacterDataInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_SBCleanClientCharacterData_ARG_uint64_clientId_uint64_characterId__;

        }


        public __RPC_Logic_SBCleanClientCharacterData_ARG_uint64_clientId_uint64_characterId__ Request { get; private set; }

        public SBCleanClientCharacterDataInMessage Clone()
        { 
            return new SBCleanClientCharacterDataInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class SSNotifyCharacterOnConnetInMessage : InMessage
    {
        public SSNotifyCharacterOnConnetInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_SSNotifyCharacterOnConnet_ARG_uint64_clientId_uint64_characterId__;

            mResponse = new __RPC_Logic_SSNotifyCharacterOnConnet_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_SSNotifyCharacterOnConnet_ARG_uint64_clientId_uint64_characterId__ Request { get; private set; }

        private __RPC_Logic_SSNotifyCharacterOnConnet_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public SSNotifyCharacterOnConnetInMessage Clone()
        { 
            return new SSNotifyCharacterOnConnetInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class BSNotifyCharacterOnLostInMessage : InMessage
    {
        public BSNotifyCharacterOnLostInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_BSNotifyCharacterOnLost_ARG_uint64_clientId_uint64_characterId__;

        }


        public __RPC_Logic_BSNotifyCharacterOnLost_ARG_uint64_clientId_uint64_characterId__ Request { get; private set; }

        public BSNotifyCharacterOnLostInMessage Clone()
        { 
            return new BSNotifyCharacterOnLostInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class SSRequestCityBuidlingPetDataInMessage : InMessage
    {
        public SSRequestCityBuidlingPetDataInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_SSRequestCityBuidlingPetData_ARG_uint64_guid__;

            mResponse = new __RPC_Logic_SSRequestCityBuidlingPetData_RET_CityBuildingPetMssage__();
            mResponse.ReturnValue = new CityBuildingPetMssage();
        }


        public __RPC_Logic_SSRequestCityBuidlingPetData_ARG_uint64_guid__ Request { get; private set; }

        private __RPC_Logic_SSRequestCityBuidlingPetData_RET_CityBuildingPetMssage__ mResponse;
        public CityBuildingPetMssage Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public SSRequestCityBuidlingPetDataInMessage Clone()
        { 
            return new SSRequestCityBuidlingPetDataInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class GetReviewStateInMessage : InMessage
    {
        public GetReviewStateInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_GetReviewState_ARG_int32_type__;

            mResponse = new __RPC_Logic_GetReviewState_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_GetReviewState_ARG_int32_type__ Request { get; private set; }

        private __RPC_Logic_GetReviewState_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public GetReviewStateInMessage Clone()
        { 
            return new GetReviewStateInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SSGetTodayFunbenCountInMessage : InMessage
    {
        public SSGetTodayFunbenCountInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_SSGetTodayFunbenCount_ARG_int32_serverId_uint64_characterId_int32_selecttype__;

            mResponse = new __RPC_Logic_SSGetTodayFunbenCount_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_SSGetTodayFunbenCount_ARG_int32_serverId_uint64_characterId_int32_selecttype__ Request { get; private set; }

        private __RPC_Logic_SSGetTodayFunbenCount_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public SSGetTodayFunbenCountInMessage Clone()
        { 
            return new SSGetTodayFunbenCountInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class OnItemAuctionInMessage : InMessage
    {
        public OnItemAuctionInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_OnItemAuction_ARG_int32_type_int32_bagId_int32_bagIndex_int32_count_int32_needCount_int32_storeIndex__;

            mResponse = new __RPC_Logic_OnItemAuction_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_OnItemAuction_ARG_int32_type_int32_bagId_int32_bagIndex_int32_count_int32_needCount_int32_storeIndex__ Request { get; private set; }

        private __RPC_Logic_OnItemAuction_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public OnItemAuctionInMessage Clone()
        { 
            return new OnItemAuctionInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class BuyItemAuctionInMessage : InMessage
    {
        public BuyItemAuctionInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_BuyItemAuction_ARG_uint64_characterId_int64_guid_int64_managerId__;

            mResponse = new __RPC_Logic_BuyItemAuction_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_BuyItemAuction_ARG_uint64_characterId_int64_guid_int64_managerId__ Request { get; private set; }

        private __RPC_Logic_BuyItemAuction_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public BuyItemAuctionInMessage Clone()
        { 
            return new BuyItemAuctionInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class LogicGetAnyDataInMessage : InMessage
    {
        public LogicGetAnyDataInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_LogicGetAnyData_ARG_uint64_chararcterId__;

            mResponse = new __RPC_Logic_LogicGetAnyData_RET_LogicGetAnyData__();
            mResponse.ReturnValue = new LogicGetAnyData();
        }


        public __RPC_Logic_LogicGetAnyData_ARG_uint64_chararcterId__ Request { get; private set; }

        private __RPC_Logic_LogicGetAnyData_RET_LogicGetAnyData__ mResponse;
        public LogicGetAnyData Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public LogicGetAnyDataInMessage Clone()
        { 
            return new LogicGetAnyDataInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class ApplySellHistoryInMessage : InMessage
    {
        public ApplySellHistoryInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_ApplySellHistory_ARG_int32_type__;

            mResponse = new __RPC_Logic_ApplySellHistory_RET_SellHistoryList__();
            mResponse.ReturnValue = new SellHistoryList();
        }


        public __RPC_Logic_ApplySellHistory_ARG_int32_type__ Request { get; private set; }

        private __RPC_Logic_ApplySellHistory_RET_SellHistoryList__ mResponse;
        public SellHistoryList Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public ApplySellHistoryInMessage Clone()
        { 
            return new ApplySellHistoryInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class DrawWishItemInMessage : InMessage
    {
        public DrawWishItemInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_DrawWishItem_ARG_Int32Array_param__;
            if (Request.Param == null) throw new ArgumentNullException("Param is null.");

            mResponse = new __RPC_Logic_DrawWishItem_RET_DrawWishItemResult__();
            mResponse.ReturnValue = new DrawWishItemResult();
        }


        public __RPC_Logic_DrawWishItem_ARG_Int32Array_param__ Request { get; private set; }

        private __RPC_Logic_DrawWishItem_RET_DrawWishItemResult__ mResponse;
        public DrawWishItemResult Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public DrawWishItemInMessage Clone()
        { 
            return new DrawWishItemInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class ApplyOperationActivityInMessage : InMessage
    {
        public ApplyOperationActivityInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_ApplyOperationActivity_ARG_int32_serverId__;

            mResponse = new __RPC_Logic_ApplyOperationActivity_RET_MsgOperActivty__();
            mResponse.ReturnValue = new MsgOperActivty();
        }


        public __RPC_Logic_ApplyOperationActivity_ARG_int32_serverId__ Request { get; private set; }

        private __RPC_Logic_ApplyOperationActivity_RET_MsgOperActivty__ mResponse;
        public MsgOperActivty Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public ApplyOperationActivityInMessage Clone()
        { 
            return new ApplyOperationActivityInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class ClaimOperationRewardInMessage : InMessage
    {
        public ClaimOperationRewardInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_ClaimOperationReward_ARG_int32_type_int32_Id__;

            mResponse = new __RPC_Logic_ClaimOperationReward_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_ClaimOperationReward_ARG_int32_type_int32_Id__ Request { get; private set; }

        private __RPC_Logic_ClaimOperationReward_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public ClaimOperationRewardInMessage Clone()
        { 
            return new ClaimOperationRewardInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class ApplyPromoteHPInMessage : InMessage
    {
        public ApplyPromoteHPInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_ApplyPromoteHP_ARG_int32_serverId_int32_activityId_int32_batteryId_int32_promoteType__;

            mResponse = new __RPC_Logic_ApplyPromoteHP_RET_BatteryUpdateData__();
            mResponse.ReturnValue = new BatteryUpdateData();
        }


        public __RPC_Logic_ApplyPromoteHP_ARG_int32_serverId_int32_activityId_int32_batteryId_int32_promoteType__ Request { get; private set; }

        private __RPC_Logic_ApplyPromoteHP_RET_BatteryUpdateData__ mResponse;
        public BatteryUpdateData Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public ApplyPromoteHPInMessage Clone()
        { 
            return new ApplyPromoteHPInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class ApplyPromoteSkillInMessage : InMessage
    {
        public ApplyPromoteSkillInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_ApplyPromoteSkill_ARG_int32_serverId_int32_activityId_int32_batteryId_uint64_batteryGuid_int32_promoteType__;

            mResponse = new __RPC_Logic_ApplyPromoteSkill_RET_BatteryUpdateData__();
            mResponse.ReturnValue = new BatteryUpdateData();
        }


        public __RPC_Logic_ApplyPromoteSkill_ARG_int32_serverId_int32_activityId_int32_batteryId_uint64_batteryGuid_int32_promoteType__ Request { get; private set; }

        private __RPC_Logic_ApplyPromoteSkill_RET_BatteryUpdateData__ mResponse;
        public BatteryUpdateData Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public ApplyPromoteSkillInMessage Clone()
        { 
            return new ApplyPromoteSkillInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class ApplyPickUpBoxInMessage : InMessage
    {
        public ApplyPickUpBoxInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_ApplyPickUpBox_ARG_int32_serverId_int32_activityId_int32_npcId__;

            mResponse = new __RPC_Logic_ApplyPickUpBox_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_ApplyPickUpBox_ARG_int32_serverId_int32_activityId_int32_npcId__ Request { get; private set; }

        private __RPC_Logic_ApplyPickUpBox_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public ApplyPickUpBoxInMessage Clone()
        { 
            return new ApplyPickUpBoxInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class ApplyJoinActivityInMessage : InMessage
    {
        public ApplyJoinActivityInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_ApplyJoinActivity_ARG_int32_serverId_int32_activityId__;

            mResponse = new __RPC_Logic_ApplyJoinActivity_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_ApplyJoinActivity_ARG_int32_serverId_int32_activityId__ Request { get; private set; }

        private __RPC_Logic_ApplyJoinActivity_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public ApplyJoinActivityInMessage Clone()
        { 
            return new ApplyJoinActivityInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class ApplyPortraitAwardInMessage : InMessage
    {
        public ApplyPortraitAwardInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_ApplyPortraitAward_ARG_int32_serverId__;

            mResponse = new __RPC_Logic_ApplyPortraitAward_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_ApplyPortraitAward_ARG_int32_serverId__ Request { get; private set; }

        private __RPC_Logic_ApplyPortraitAward_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public ApplyPortraitAwardInMessage Clone()
        { 
            return new ApplyPortraitAwardInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SSSyncCharacterFightPointInMessage : InMessage
    {
        public SSSyncCharacterFightPointInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_SSSyncCharacterFightPoint_ARG_int32_fp__;

            mResponse = new __RPC_Logic_SSSyncCharacterFightPoint_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_SSSyncCharacterFightPoint_ARG_int32_fp__ Request { get; private set; }

        private __RPC_Logic_SSSyncCharacterFightPoint_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public SSSyncCharacterFightPointInMessage Clone()
        { 
            return new SSSyncCharacterFightPointInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class OnPlayerEnterSceneOverInMessage : InMessage
    {
        public OnPlayerEnterSceneOverInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_OnPlayerEnterSceneOver_ARG_int32_sceneId__;

            mResponse = new __RPC_Logic_OnPlayerEnterSceneOver_RET_ExDataAndFlagData__();
            mResponse.ReturnValue = new ExDataAndFlagData();
        }


        public __RPC_Logic_OnPlayerEnterSceneOver_ARG_int32_sceneId__ Request { get; private set; }

        private __RPC_Logic_OnPlayerEnterSceneOver_RET_ExDataAndFlagData__ mResponse;
        public ExDataAndFlagData Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public OnPlayerEnterSceneOverInMessage Clone()
        { 
            return new OnPlayerEnterSceneOverInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class ApplyGetTowerRewardInMessage : InMessage
    {
        public ApplyGetTowerRewardInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_ApplyGetTowerReward_ARG_int32_serverId_int32_activityId_int32_idx__;

            mResponse = new __RPC_Logic_ApplyGetTowerReward_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_ApplyGetTowerReward_ARG_int32_serverId_int32_activityId_int32_idx__ Request { get; private set; }

        private __RPC_Logic_ApplyGetTowerReward_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public ApplyGetTowerRewardInMessage Clone()
        { 
            return new ApplyGetTowerRewardInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class AnchorGiftInMessage : InMessage
    {
        public AnchorGiftInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_AnchorGift_ARG_int32_itemId_int32_count__;

            mResponse = new __RPC_Logic_AnchorGift_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_AnchorGift_ARG_int32_itemId_int32_count__ Request { get; private set; }

        private __RPC_Logic_AnchorGift_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public AnchorGiftInMessage Clone()
        { 
            return new AnchorGiftInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SendJsonDataInMessage : InMessage
    {
        public SendJsonDataInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_SendJsonData_ARG_string_json__;

            mResponse = new __RPC_Logic_SendJsonData_RET_string__();
            mResponse.ReturnValue = string.Empty;
        }


        public __RPC_Logic_SendJsonData_ARG_string_json__ Request { get; private set; }

        private __RPC_Logic_SendJsonData_RET_string__ mResponse;
        public string Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public SendJsonDataInMessage Clone()
        { 
            return new SendJsonDataInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class BuyWingChargeInMessage : InMessage
    {
        public BuyWingChargeInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_BuyWingCharge_ARG_int32_placeholder__;

            mResponse = new __RPC_Logic_BuyWingCharge_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_BuyWingCharge_ARG_int32_placeholder__ Request { get; private set; }

        private __RPC_Logic_BuyWingCharge_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public BuyWingChargeInMessage Clone()
        { 
            return new BuyWingChargeInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class BuyEnergyByTypeInMessage : InMessage
    {
        public BuyEnergyByTypeInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_BuyEnergyByType_ARG_int32_type__;

            mResponse = new __RPC_Logic_BuyEnergyByType_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_BuyEnergyByType_ARG_int32_type__ Request { get; private set; }

        private __RPC_Logic_BuyEnergyByType_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public BuyEnergyByTypeInMessage Clone()
        { 
            return new BuyEnergyByTypeInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SSLearnSkillInMessage : InMessage
    {
        public SSLearnSkillInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_SSLearnSkill_ARG_int32_skillId_int32_skillLevel__;

            mResponse = new __RPC_Logic_SSLearnSkill_RET_bool__();
            mResponse.ReturnValue = new bool();
        }


        public __RPC_Logic_SSLearnSkill_ARG_int32_skillId_int32_skillLevel__ Request { get; private set; }

        private __RPC_Logic_SSLearnSkill_RET_bool__ mResponse;
        public bool Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public SSLearnSkillInMessage Clone()
        { 
            return new SSLearnSkillInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class GMDeleteMessageInMessage : InMessage
    {
        public GMDeleteMessageInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_GMDeleteMessage_ARG_uint64_id__;

        }


        public __RPC_Logic_GMDeleteMessage_ARG_uint64_id__ Request { get; private set; }

        public GMDeleteMessageInMessage Clone()
        { 
            return new GMDeleteMessageInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class ApplyKaiFuTeHuiDataInMessage : InMessage
    {
        public ApplyKaiFuTeHuiDataInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_ApplyKaiFuTeHuiData_ARG_int32_placeholder__;

            mResponse = new __RPC_Logic_ApplyKaiFuTeHuiData_RET_KaiFuTeHuiData__();
            mResponse.ReturnValue = new KaiFuTeHuiData();
        }


        public __RPC_Logic_ApplyKaiFuTeHuiData_ARG_int32_placeholder__ Request { get; private set; }

        private __RPC_Logic_ApplyKaiFuTeHuiData_RET_KaiFuTeHuiData__ mResponse;
        public KaiFuTeHuiData Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public ApplyKaiFuTeHuiDataInMessage Clone()
        { 
            return new ApplyKaiFuTeHuiDataInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class BuyKaiFuTeHuiItemInMessage : InMessage
    {
        public BuyKaiFuTeHuiItemInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_BuyKaiFuTeHuiItem_ARG_int32_tableId__;

            mResponse = new __RPC_Logic_BuyKaiFuTeHuiItem_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_BuyKaiFuTeHuiItem_ARG_int32_tableId__ Request { get; private set; }

        private __RPC_Logic_BuyKaiFuTeHuiItem_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public BuyKaiFuTeHuiItemInMessage Clone()
        { 
            return new BuyKaiFuTeHuiItemInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class BattleUnionDonateEquipInMessage : InMessage
    {
        public BattleUnionDonateEquipInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_BattleUnionDonateEquip_ARG_int32_bagIndex__;

            mResponse = new __RPC_Logic_BattleUnionDonateEquip_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_BattleUnionDonateEquip_ARG_int32_bagIndex__ Request { get; private set; }

        private __RPC_Logic_BattleUnionDonateEquip_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public BattleUnionDonateEquipInMessage Clone()
        { 
            return new BattleUnionDonateEquipInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class BattleUnionTakeOutEquipInMessage : InMessage
    {
        public BattleUnionTakeOutEquipInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_BattleUnionTakeOutEquip_ARG_int32_itemId_int32_bagIndex__;

            mResponse = new __RPC_Logic_BattleUnionTakeOutEquip_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_BattleUnionTakeOutEquip_ARG_int32_itemId_int32_bagIndex__ Request { get; private set; }

        private __RPC_Logic_BattleUnionTakeOutEquip_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public BattleUnionTakeOutEquipInMessage Clone()
        { 
            return new BattleUnionTakeOutEquipInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class GetCharacterDataInMessage : InMessage
    {
        public GetCharacterDataInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_GetCharacterData_ARG_uint64_id__;

            mResponse = new __RPC_Logic_GetCharacterData_RET_GMCharacterDetailInfo__();
            mResponse.ReturnValue = new GMCharacterDetailInfo();
        }


        public __RPC_Logic_GetCharacterData_ARG_uint64_id__ Request { get; private set; }

        private __RPC_Logic_GetCharacterData_RET_GMCharacterDetailInfo__ mResponse;
        public GMCharacterDetailInfo Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public GetCharacterDataInMessage Clone()
        { 
            return new GetCharacterDataInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SendMailToCharacterInMessage : InMessage
    {
        public SendMailToCharacterInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_SendMailToCharacter_ARG_string_title_string_content_Dict_int_int_Data_items_int32_state__;
            if (Request.Items == null) throw new ArgumentNullException("Items is null.");

        }


        public __RPC_Logic_SendMailToCharacter_ARG_string_title_string_content_Dict_int_int_Data_items_int32_state__ Request { get; private set; }

        public SendMailToCharacterInMessage Clone()
        { 
            return new SendMailToCharacterInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class SendMailToServerInMessage : InMessage
    {
        public SendMailToServerInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_SendMailToServer_ARG_uint32_serverId_uint64_mailId__;

        }


        public __RPC_Logic_SendMailToServer_ARG_uint32_serverId_uint64_mailId__ Request { get; private set; }

        public SendMailToServerInMessage Clone()
        { 
            return new SendMailToServerInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class UpdateServerInMessage : InMessage
    {
        public UpdateServerInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_UpdateServer_ARG_int32_placeholder__;

        }


        public __RPC_Logic_UpdateServer_ARG_int32_placeholder__ Request { get; private set; }

        public UpdateServerInMessage Clone()
        { 
            return new UpdateServerInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class GMCommandInMessage : InMessage
    {
        public GMCommandInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_GMCommand_ARG_StringArray_commonds__;
            if (Request.Commonds == null) throw new ArgumentNullException("Commonds is null.");

            mResponse = new __RPC_Logic_GMCommand_RET_Int32Array__();
            mResponse.ReturnValue = new Int32Array();
        }


        public __RPC_Logic_GMCommand_ARG_StringArray_commonds__ Request { get; private set; }

        private __RPC_Logic_GMCommand_RET_Int32Array__ mResponse;
        public Int32Array Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public GMCommandInMessage Clone()
        { 
            return new GMCommandInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SendMailToCharacterByIdInMessage : InMessage
    {
        public SendMailToCharacterByIdInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_SendMailToCharacterById_ARG_int32_mailId_int32_createType_int32_type_Int32Array_countList__;
            if (Request.CountList == null) throw new ArgumentNullException("CountList is null.");

        }


        public __RPC_Logic_SendMailToCharacterById_ARG_int32_mailId_int32_createType_int32_type_Int32Array_countList__ Request { get; private set; }

        public SendMailToCharacterByIdInMessage Clone()
        { 
            return new SendMailToCharacterByIdInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class ClientErrorMessageInMessage : InMessage
    {
        public ClientErrorMessageInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_ClientErrorMessage_ARG_int32_errorType_string_errorMsg__;

            mResponse = new __RPC_Logic_ClientErrorMessage_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_ClientErrorMessage_ARG_int32_errorType_string_errorMsg__ Request { get; private set; }

        private __RPC_Logic_ClientErrorMessage_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public ClientErrorMessageInMessage Clone()
        { 
            return new ClientErrorMessageInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SendQuestionInMessage : InMessage
    {
        public SendQuestionInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_SendQuestion_ARG_MailQuestion_mail__;
            if (Request.Mail == null) throw new ArgumentNullException("Mail is null.");

        }


        public __RPC_Logic_SendQuestion_ARG_MailQuestion_mail__ Request { get; private set; }

        public SendQuestionInMessage Clone()
        { 
            return new SendQuestionInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class SendSurveyInMessage : InMessage
    {
        public SendSurveyInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_SendSurvey_ARG_int32_id_Vec2Array_datas__;
            if (Request.Datas == null) throw new ArgumentNullException("Datas is null.");

        }


        public __RPC_Logic_SendSurvey_ARG_int32_id_Vec2Array_datas__ Request { get; private set; }

        public SendSurveyInMessage Clone()
        { 
            return new SendSurveyInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class TowerSweepInMessage : InMessage
    {
        public TowerSweepInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_TowerSweep_ARG_int32_param__;

            mResponse = new __RPC_Logic_TowerSweep_RET_TowerSweepResult__();
            mResponse.ReturnValue = new TowerSweepResult();
        }


        public __RPC_Logic_TowerSweep_ARG_int32_param__ Request { get; private set; }

        private __RPC_Logic_TowerSweep_RET_TowerSweepResult__ mResponse;
        public TowerSweepResult Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public TowerSweepInMessage Clone()
        { 
            return new TowerSweepInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class TowerBuySweepTimesInMessage : InMessage
    {
        public TowerBuySweepTimesInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_TowerBuySweepTimes_ARG_int32_param__;

        }


        public __RPC_Logic_TowerBuySweepTimes_ARG_int32_param__ Request { get; private set; }

        public TowerBuySweepTimesInMessage Clone()
        { 
            return new TowerBuySweepTimesInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class CheckTowerDailyInfoInMessage : InMessage
    {
        public CheckTowerDailyInfoInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_CheckTowerDailyInfo_ARG_int32_param__;

        }


        public __RPC_Logic_CheckTowerDailyInfo_ARG_int32_param__ Request { get; private set; }

        public CheckTowerDailyInfoInMessage Clone()
        { 
            return new CheckTowerDailyInfoInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class SetHandbookFightInMessage : InMessage
    {
        public SetHandbookFightInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_SetHandbookFight_ARG_int32_id__;

            mResponse = new __RPC_Logic_SetHandbookFight_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_SetHandbookFight_ARG_int32_id__ Request { get; private set; }

        private __RPC_Logic_SetHandbookFight_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public SetHandbookFightInMessage Clone()
        { 
            return new SetHandbookFightInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class AskMountDataInMessage : InMessage
    {
        public AskMountDataInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_AskMountData_ARG_uint32_placeholder__;

            mResponse = new __RPC_Logic_AskMountData_RET_MountData__();
            mResponse.ReturnValue = new MountData();
        }


        public __RPC_Logic_AskMountData_ARG_uint32_placeholder__ Request { get; private set; }

        private __RPC_Logic_AskMountData_RET_MountData__ mResponse;
        public MountData Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public AskMountDataInMessage Clone()
        { 
            return new AskMountDataInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class MountUpInMessage : InMessage
    {
        public MountUpInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_MountUp_ARG_int32_param__;

            mResponse = new __RPC_Logic_MountUp_RET_Int32Array__();
            mResponse.ReturnValue = new Int32Array();
        }


        public __RPC_Logic_MountUp_ARG_int32_param__ Request { get; private set; }

        private __RPC_Logic_MountUp_RET_Int32Array__ mResponse;
        public Int32Array Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public MountUpInMessage Clone()
        { 
            return new MountUpInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class RideMountInMessage : InMessage
    {
        public RideMountInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_RideMount_ARG_int32_id__;

            mResponse = new __RPC_Logic_RideMount_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_RideMount_ARG_int32_id__ Request { get; private set; }

        private __RPC_Logic_RideMount_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public RideMountInMessage Clone()
        { 
            return new RideMountInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class MountSkillInMessage : InMessage
    {
        public MountSkillInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_MountSkill_ARG_int32_SkillId__;

            mResponse = new __RPC_Logic_MountSkill_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_MountSkill_ARG_int32_SkillId__ Request { get; private set; }

        private __RPC_Logic_MountSkill_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public MountSkillInMessage Clone()
        { 
            return new MountSkillInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class MountFeedInMessage : InMessage
    {
        public MountFeedInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_MountFeed_ARG_int32_ItemId__;

            mResponse = new __RPC_Logic_MountFeed_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_MountFeed_ARG_int32_ItemId__ Request { get; private set; }

        private __RPC_Logic_MountFeed_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public MountFeedInMessage Clone()
        { 
            return new MountFeedInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class LogicGetMountDataInMessage : InMessage
    {
        public LogicGetMountDataInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_LogicGetMountData_ARG_uint64_chararcterId__;

            mResponse = new __RPC_Logic_LogicGetMountData_RET_MountMsgData__();
            mResponse.ReturnValue = new MountMsgData();
        }


        public __RPC_Logic_LogicGetMountData_ARG_uint64_chararcterId__ Request { get; private set; }

        private __RPC_Logic_LogicGetMountData_RET_MountMsgData__ mResponse;
        public MountMsgData Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public LogicGetMountDataInMessage Clone()
        { 
            return new LogicGetMountDataInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class MountInMessage : InMessage
    {
        public MountInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_Mount_ARG_int32_ItemId__;

            mResponse = new __RPC_Logic_Mount_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_Mount_ARG_int32_ItemId__ Request { get; private set; }

        private __RPC_Logic_Mount_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public MountInMessage Clone()
        { 
            return new MountInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class CloneCharacterDbByIdInMessage : InMessage
    {
        public CloneCharacterDbByIdInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_CloneCharacterDbById_ARG_uint64_fromId_uint64_toId__;

            mResponse = new __RPC_Logic_CloneCharacterDbById_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_CloneCharacterDbById_ARG_uint64_fromId_uint64_toId__ Request { get; private set; }

        private __RPC_Logic_CloneCharacterDbById_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public CloneCharacterDbByIdInMessage Clone()
        { 
            return new CloneCharacterDbByIdInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class BossHomeCostInMessage : InMessage
    {
        public BossHomeCostInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_BossHomeCost_ARG_int32_id__;

        }


        public __RPC_Logic_BossHomeCost_ARG_int32_id__ Request { get; private set; }

        public BossHomeCostInMessage Clone()
        { 
            return new BossHomeCostInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class GiveItemListInMessage : InMessage
    {
        public GiveItemListInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_GiveItemList_ARG_Dict_int_int_Data_items_int32_from__;
            if (Request.Items == null) throw new ArgumentNullException("Items is null.");

            mResponse = new __RPC_Logic_GiveItemList_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_GiveItemList_ARG_Dict_int_int_Data_items_int32_from__ Request { get; private set; }

        private __RPC_Logic_GiveItemList_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public GiveItemListInMessage Clone()
        { 
            return new GiveItemListInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class AddMountSkinInMessage : InMessage
    {
        public AddMountSkinInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_AddMountSkin_ARG_int32_id__;

            mResponse = new __RPC_Logic_AddMountSkin_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_AddMountSkin_ARG_int32_id__ Request { get; private set; }

        private __RPC_Logic_AddMountSkin_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public AddMountSkinInMessage Clone()
        { 
            return new AddMountSkinInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class ApplyFieldActivityRewardInMessage : InMessage
    {
        public ApplyFieldActivityRewardInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_ApplyFieldActivityReward_ARG_int32_id__;

            mResponse = new __RPC_Logic_ApplyFieldActivityReward_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_ApplyFieldActivityReward_ARG_int32_id__ Request { get; private set; }

        private __RPC_Logic_ApplyFieldActivityReward_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public ApplyFieldActivityRewardInMessage Clone()
        { 
            return new ApplyFieldActivityRewardInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class ApplyFriendListDataInMessage : InMessage
    {
        public ApplyFriendListDataInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_ApplyFriendListData_ARG_int32_id__;

            mResponse = new __RPC_Logic_ApplyFriendListData_RET_MsgFriendList__();
            mResponse.ReturnValue = new MsgFriendList();
        }


        public __RPC_Logic_ApplyFriendListData_ARG_int32_id__ Request { get; private set; }

        private __RPC_Logic_ApplyFriendListData_RET_MsgFriendList__ mResponse;
        public MsgFriendList Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public ApplyFriendListDataInMessage Clone()
        { 
            return new ApplyFriendListDataInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class ApplyPlayerFlagInMessage : InMessage
    {
        public ApplyPlayerFlagInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_ApplyPlayerFlag_ARG_Int32Array_flagList__;
            if (Request.FlagList == null) throw new ArgumentNullException("FlagList is null.");

            mResponse = new __RPC_Logic_ApplyPlayerFlag_RET_Dict_int_int_Data__();
            mResponse.ReturnValue = new Dict_int_int_Data();
        }


        public __RPC_Logic_ApplyPlayerFlag_ARG_Int32Array_flagList__ Request { get; private set; }

        private __RPC_Logic_ApplyPlayerFlag_RET_Dict_int_int_Data__ mResponse;
        public Dict_int_int_Data Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public ApplyPlayerFlagInMessage Clone()
        { 
            return new ApplyPlayerFlagInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class UseShiZhuangInMessage : InMessage
    {
        public UseShiZhuangInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_UseShiZhuang_ARG_int32_bagId_int32_bagItemIndex_int32_part__;

            mResponse = new __RPC_Logic_UseShiZhuang_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_UseShiZhuang_ARG_int32_bagId_int32_bagItemIndex_int32_part__ Request { get; private set; }

        private __RPC_Logic_UseShiZhuang_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public UseShiZhuangInMessage Clone()
        { 
            return new UseShiZhuangInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class ClickMayaTipInMessage : InMessage
    {
        public ClickMayaTipInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_ClickMayaTip_ARG_int32_id__;

        }


        public __RPC_Logic_ClickMayaTip_ARG_int32_id__ Request { get; private set; }

        public ClickMayaTipInMessage Clone()
        { 
            return new ClickMayaTipInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class ApplyMayaSkillInMessage : InMessage
    {
        public ApplyMayaSkillInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_ApplyMayaSkill_ARG_int32_id__;

        }


        public __RPC_Logic_ApplyMayaSkill_ARG_int32_id__ Request { get; private set; }

        public ApplyMayaSkillInMessage Clone()
        { 
            return new ApplyMayaSkillInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class ChangeEquipStateInMessage : InMessage
    {
        public ChangeEquipStateInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_ChangeEquipState_ARG_Int32Array_parts_bool_state__;
            if (Request.Parts == null) throw new ArgumentNullException("Parts is null.");

            mResponse = new __RPC_Logic_ChangeEquipState_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_ChangeEquipState_ARG_Int32Array_parts_bool_state__ Request { get; private set; }

        private __RPC_Logic_ChangeEquipState_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public ChangeEquipStateInMessage Clone()
        { 
            return new ChangeEquipStateInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SSSendMailByIdInMessage : InMessage
    {
        public SSSendMailByIdInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_SSSendMailById_ARG_int32_tableId_int32_ExtendType_string_ExtendPara0_string_ExtendPara1__;

        }


        public __RPC_Logic_SSSendMailById_ARG_int32_tableId_int32_ExtendType_string_ExtendPara0_string_ExtendPara1__ Request { get; private set; }

        public SSSendMailByIdInMessage Clone()
        { 
            return new SSSendMailByIdInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class RefreshFashionInfoInMessage : InMessage
    {
        public RefreshFashionInfoInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_RefreshFashionInfo_ARG_int32_placeholder__;

        }


        public __RPC_Logic_RefreshFashionInfo_ARG_int32_placeholder__ Request { get; private set; }

        public RefreshFashionInfoInMessage Clone()
        { 
            return new RefreshFashionInfoInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class NotifyPlayerMoniterDataInMessage : InMessage
    {
        public NotifyPlayerMoniterDataInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_NotifyPlayerMoniterData_ARG_MsgChatMoniterData_data__;
            if (Request.Data == null) throw new ArgumentNullException("Data is null.");

        }


        public __RPC_Logic_NotifyPlayerMoniterData_ARG_MsgChatMoniterData_data__ Request { get; private set; }

        public NotifyPlayerMoniterDataInMessage Clone()
        { 
            return new NotifyPlayerMoniterDataInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class GetPlayerMoniterDataInMessage : InMessage
    {
        public GetPlayerMoniterDataInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_GetPlayerMoniterData_ARG_uint64_characterId__;

            mResponse = new __RPC_Logic_GetPlayerMoniterData_RET_MsgChatMoniterData__();
            mResponse.ReturnValue = new MsgChatMoniterData();
        }


        public __RPC_Logic_GetPlayerMoniterData_ARG_uint64_characterId__ Request { get; private set; }

        private __RPC_Logic_GetPlayerMoniterData_RET_MsgChatMoniterData__ mResponse;
        public MsgChatMoniterData Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public GetPlayerMoniterDataInMessage Clone()
        { 
            return new GetPlayerMoniterDataInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class ApplySuperVIPInMessage : InMessage
    {
        public ApplySuperVIPInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_ApplySuperVIP_ARG_int32_id__;

            mResponse = new __RPC_Logic_ApplySuperVIP_RET_SuperVIPData__();
            mResponse.ReturnValue = new SuperVIPData();
        }


        public __RPC_Logic_ApplySuperVIP_ARG_int32_id__ Request { get; private set; }

        private __RPC_Logic_ApplySuperVIP_RET_SuperVIPData__ mResponse;
        public SuperVIPData Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public ApplySuperVIPInMessage Clone()
        { 
            return new ApplySuperVIPInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class WorshipMonumentInMessage : InMessage
    {
        public WorshipMonumentInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_WorshipMonument_ARG_int32_MonumentId__;

            mResponse = new __RPC_Logic_WorshipMonument_RET_Dict_int_int_Data__();
            mResponse.ReturnValue = new Dict_int_int_Data();
        }


        public __RPC_Logic_WorshipMonument_ARG_int32_MonumentId__ Request { get; private set; }

        private __RPC_Logic_WorshipMonument_RET_Dict_int_int_Data__ mResponse;
        public Dict_int_int_Data Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public WorshipMonumentInMessage Clone()
        { 
            return new WorshipMonumentInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SaveSuperExcellentEquipInMessage : InMessage
    {
        public SaveSuperExcellentEquipInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_SaveSuperExcellentEquip_ARG_int32_bagType_int32_bagIndex_int32_ok__;

            mResponse = new __RPC_Logic_SaveSuperExcellentEquip_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_SaveSuperExcellentEquip_ARG_int32_bagType_int32_bagIndex_int32_ok__ Request { get; private set; }

        private __RPC_Logic_SaveSuperExcellentEquip_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public SaveSuperExcellentEquipInMessage Clone()
        { 
            return new SaveSuperExcellentEquipInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class ModifyPlayerNameInMessage : InMessage
    {
        public ModifyPlayerNameInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_ModifyPlayerName_ARG_string_modifyName__;

            mResponse = new __RPC_Logic_ModifyPlayerName_RET_string__();
            mResponse.ReturnValue = string.Empty;
        }


        public __RPC_Logic_ModifyPlayerName_ARG_string_modifyName__ Request { get; private set; }

        private __RPC_Logic_ModifyPlayerName_RET_string__ mResponse;
        public string Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public ModifyPlayerNameInMessage Clone()
        { 
            return new ModifyPlayerNameInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class InviteChallengeInMessage : InMessage
    {
        public InviteChallengeInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_InviteChallenge_ARG_uint64_characterId__;

            mResponse = new __RPC_Logic_InviteChallenge_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_InviteChallenge_ARG_uint64_characterId__ Request { get; private set; }

        private __RPC_Logic_InviteChallenge_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public InviteChallengeInMessage Clone()
        { 
            return new InviteChallengeInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class AcceptChallengeInMessage : InMessage
    {
        public AcceptChallengeInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_AcceptChallenge_ARG_uint64_characterId_bool_accept__;

            mResponse = new __RPC_Logic_AcceptChallenge_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Logic_AcceptChallenge_ARG_uint64_characterId_bool_accept__ Request { get; private set; }

        private __RPC_Logic_AcceptChallenge_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public AcceptChallengeInMessage Clone()
        { 
            return new AcceptChallengeInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class NotifyInviteChallengeInMessage : InMessage
    {
        public NotifyInviteChallengeInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Logic_NotifyInviteChallenge_ARG_uint64_invitorId_string_invitorName_int32_invitorServerId__;

        }


        public __RPC_Logic_NotifyInviteChallenge_ARG_uint64_invitorId_string_invitorName_int32_invitorServerId__ Request { get; private set; }

        public NotifyInviteChallengeInMessage Clone()
        { 
            return new NotifyInviteChallengeInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public interface ILogicCharacterProxy
    {
        /// <summary>
        /// GM命令数据
        /// </summary>
        IEnumerator GMLogic(Coroutine coroutine, LogicCharacterProxy _this, GMLogicInMessage msg);
        /// <summary>
        /// 客户端请求技能数据
        /// </summary>
        IEnumerator ApplySkill(Coroutine coroutine, LogicCharacterProxy _this, ApplySkillInMessage msg);
        /// <summary>
        /// 升级天赋
        /// </summary>
        IEnumerator UpgradeInnate(Coroutine coroutine, LogicCharacterProxy _this, UpgradeInnateInMessage msg);
        /// <summary>
        /// 重置天赋
        /// </summary>
        IEnumerator ClearInnate(Coroutine coroutine, LogicCharacterProxy _this, ClearInnateInMessage msg);
        /// <summary>
        /// 客户端请求所有包裹数据
        /// </summary>
        IEnumerator ApplyBags(Coroutine coroutine, LogicCharacterProxy _this, ApplyBagsInMessage msg);
        /// <summary>
        /// 客户端请求标记位数据
        /// </summary>
        IEnumerator ApplyFlag(Coroutine coroutine, LogicCharacterProxy _this, ApplyFlagInMessage msg);
        /// <summary>
        /// 客户端请求扩展数据
        /// </summary>
        IEnumerator ApplyExdata(Coroutine coroutine, LogicCharacterProxy _this, ApplyExdataInMessage msg);
        /// <summary>
        /// 客户端请求64位扩展数据
        /// </summary>
        IEnumerator ApplyExdata64(Coroutine coroutine, LogicCharacterProxy _this, ApplyExdata64InMessage msg);
        /// <summary>
        /// 客户端请求任务数据
        /// </summary>
        IEnumerator ApplyMission(Coroutine coroutine, LogicCharacterProxy _this, ApplyMissionInMessage msg);
        /// <summary>
        /// 客户端请求图鉴
        /// </summary>
        IEnumerator ApplyBooks(Coroutine coroutine, LogicCharacterProxy _this, ApplyBooksInMessage msg);
        /// <summary>
        /// 换装备
        /// </summary>
        IEnumerator ReplaceEquip(Coroutine coroutine, LogicCharacterProxy _this, ReplaceEquipInMessage msg);
        /// <summary>
        /// 接受任务
        /// </summary>
        IEnumerator AcceptMission(Coroutine coroutine, LogicCharacterProxy _this, AcceptMissionInMessage msg);
        /// <summary>
        /// 提交任务
        /// </summary>
        IEnumerator CommitMission(Coroutine coroutine, LogicCharacterProxy _this, CommitMissionInMessage msg);
        /// <summary>
        /// 完成任务
        /// </summary>
        IEnumerator CompleteMission(Coroutine coroutine, LogicCharacterProxy _this, CompleteMissionInMessage msg);
        /// <summary>
        /// 放弃任务
        /// </summary>
        IEnumerator DropMission(Coroutine coroutine, LogicCharacterProxy _this, DropMissionInMessage msg);
        /// <summary>
        /// 装备技能
        /// </summary>
        IEnumerator EquipSkill(Coroutine coroutine, LogicCharacterProxy _this, EquipSkillInMessage msg);
        /// <summary>
        /// 升级技能
        /// </summary>
        IEnumerator UpgradeSkill(Coroutine coroutine, LogicCharacterProxy _this, UpgradeSkillInMessage msg);
        /// <summary>
        /// 道具出售
        /// </summary>
        IEnumerator SellBagItem(Coroutine coroutine, LogicCharacterProxy _this, SellBagItemInMessage msg);
        /// <summary>
        /// 道具回收
        /// </summary>
        IEnumerator RecycleBagItem(Coroutine coroutine, LogicCharacterProxy _this, RecycleBagItemInMessage msg);
        /// <summary>
        /// </summary>
        IEnumerator EnchanceEquip(Coroutine coroutine, LogicCharacterProxy _this, EnchanceEquipInMessage msg);
        /// <summary>
        /// 强化追加
        /// </summary>
        IEnumerator AppendEquip(Coroutine coroutine, LogicCharacterProxy _this, AppendEquipInMessage msg);
        /// <summary>
        /// 装备洗练
        /// </summary>
        IEnumerator ResetExcellentEquip(Coroutine coroutine, LogicCharacterProxy _this, ResetExcellentEquipInMessage msg);
        /// <summary>
        /// 洗炼结果确认
        /// </summary>
        IEnumerator ConfirmResetExcellentEquip(Coroutine coroutine, LogicCharacterProxy _this, ConfirmResetExcellentEquipInMessage msg);
        /// <summary>
        /// 锁定洗炼
        /// </summary>
        IEnumerator SuperExcellentEquip(Coroutine coroutine, LogicCharacterProxy _this, SuperExcellentEquipInMessage msg);
        /// <summary>
        /// 传承
        /// </summary>
        IEnumerator SmritiEquip(Coroutine coroutine, LogicCharacterProxy _this, SmritiEquipInMessage msg);
        /// <summary>
        /// 使用道具
        /// </summary>
        IEnumerator UseItem(Coroutine coroutine, LogicCharacterProxy _this, UseItemInMessage msg);
        /// <summary>
        /// 游戏领奖
        /// </summary>
        IEnumerator ActivationReward(Coroutine coroutine, LogicCharacterProxy _this, ActivationRewardInMessage msg);
        /// <summary>
        /// 合成道具
        /// </summary>
        IEnumerator ComposeItem(Coroutine coroutine, LogicCharacterProxy _this, ComposeItemInMessage msg);
        /// <summary>
        /// 成就领奖
        /// </summary>
        IEnumerator RewardAchievement(Coroutine coroutine, LogicCharacterProxy _this, RewardAchievementInMessage msg);
        /// <summary>
        /// 分配属性点
        /// </summary>
        IEnumerator DistributionAttrPoint(Coroutine coroutine, LogicCharacterProxy _this, DistributionAttrPointInMessage msg);
        /// <summary>
        /// 洗点
        /// </summary>
        IEnumerator RefreshAttrPoint(Coroutine coroutine, LogicCharacterProxy _this, RefreshAttrPointInMessage msg);
        /// <summary>
        /// 设置自动加点
        /// </summary>
        IEnumerator SetAttributeAutoAdd(Coroutine coroutine, LogicCharacterProxy _this, SetAttributeAutoAddInMessage msg);
        /// <summary>
        /// 请求好友数据0:好友，1:敌人，2:屏蔽
        /// </summary>
        IEnumerator ApplyFriends(Coroutine coroutine, LogicCharacterProxy _this, ApplyFriendsInMessage msg);
        /// <summary>
        /// 查找玩家
        /// </summary>
        IEnumerator SeekCharacters(Coroutine coroutine, LogicCharacterProxy _this, SeekCharactersInMessage msg);
        /// <summary>
        /// 查找好友
        /// </summary>
        IEnumerator SeekFriends(Coroutine coroutine, LogicCharacterProxy _this, SeekFriendsInMessage msg);
        /// <summary>
        /// 添加好友
        /// </summary>
        IEnumerator AddFriendById(Coroutine coroutine, LogicCharacterProxy _this, AddFriendByIdInMessage msg);
        /// <summary>
        /// 添加好友
        /// </summary>
        IEnumerator AddFriendByName(Coroutine coroutine, LogicCharacterProxy _this, AddFriendByNameInMessage msg);
        /// <summary>
        /// 删除好友
        /// </summary>
        IEnumerator DelFriendById(Coroutine coroutine, LogicCharacterProxy _this, DelFriendByIdInMessage msg);
        /// <summary>
        /// 通知logic，我选择的奖励
        /// </summary>
        IEnumerator SelectDungeonReward(Coroutine coroutine, LogicCharacterProxy _this, SelectDungeonRewardInMessage msg);
        /// <summary>
        /// 进入副本
        /// </summary>
        IEnumerator EnterFuben(Coroutine coroutine, LogicCharacterProxy _this, EnterFubenInMessage msg);
        /// <summary>
        /// 重置副本
        /// </summary>
        IEnumerator ResetFuben(Coroutine coroutine, LogicCharacterProxy _this, ResetFubenInMessage msg);
        /// <summary>
        /// 扫荡副本
        /// </summary>
        IEnumerator SweepFuben(Coroutine coroutine, LogicCharacterProxy _this, SweepFubenInMessage msg);
        /// <summary>
        /// 获得商店的道具列表
        /// </summary>
        IEnumerator ApplyStores(Coroutine coroutine, LogicCharacterProxy _this, ApplyStoresInMessage msg);
        /// <summary>
        /// 激活图鉴
        /// </summary>
        IEnumerator ActivateBook(Coroutine coroutine, LogicCharacterProxy _this, ActivateBookInMessage msg);
        /// <summary>
        /// 整理包裹
        /// </summary>
        IEnumerator SortBag(Coroutine coroutine, LogicCharacterProxy _this, SortBagInMessage msg);
        /// <summary>
        /// 请求玩家的详细信息
        /// </summary>
        IEnumerator ApplyPlayerInfo(Coroutine coroutine, LogicCharacterProxy _this, ApplyPlayerInfoInMessage msg);
        /// <summary>
        /// 通知服务器修改标志位
        /// </summary>
        IEnumerator SetFlag(Coroutine coroutine, LogicCharacterProxy _this, SetFlagInMessage msg);
        /// <summary>
        /// 通知服务器修改扩展数据
        /// </summary>
        IEnumerator SetExData(Coroutine coroutine, LogicCharacterProxy _this, SetExDataInMessage msg);
        /// <summary>
        /// 请求邮件数据
        /// </summary>
        IEnumerator ApplyMails(Coroutine coroutine, LogicCharacterProxy _this, ApplyMailsInMessage msg);
        /// <summary>
        /// 请求邮件详细数据
        /// </summary>
        IEnumerator ApplyMailInfo(Coroutine coroutine, LogicCharacterProxy _this, ApplyMailInfoInMessage msg);
        /// <summary>
        /// 领取邮件
        /// </summary>
        IEnumerator ReceiveMail(Coroutine coroutine, LogicCharacterProxy _this, ReceiveMailInMessage msg);
        /// <summary>
        /// 删除邮件
        /// </summary>
        IEnumerator DeleteMail(Coroutine coroutine, LogicCharacterProxy _this, DeleteMailInMessage msg);
        /// <summary>
        /// 远程修理
        /// </summary>
        IEnumerator RepairEquip(Coroutine coroutine, LogicCharacterProxy _this, RepairEquipInMessage msg);
        /// <summary>
        /// 取出仓库
        /// </summary>
        IEnumerator DepotTakeOut(Coroutine coroutine, LogicCharacterProxy _this, DepotTakeOutInMessage msg);
        /// <summary>
        /// 放进仓库
        /// </summary>
        IEnumerator DepotPutIn(Coroutine coroutine, LogicCharacterProxy _this, DepotPutInInMessage msg);
        /// <summary>
        /// 取出许愿池仓库,index = -1全部取出
        /// </summary>
        IEnumerator WishingPoolDepotTakeOut(Coroutine coroutine, LogicCharacterProxy _this, WishingPoolDepotTakeOutInMessage msg);
        /// <summary>
        /// 商店购买
        /// </summary>
        IEnumerator StoreBuy(Coroutine coroutine, LogicCharacterProxy _this, StoreBuyInMessage msg);
        /// <summary>
        /// 请求家园数据
        /// </summary>
        IEnumerator ApplyCityData(Coroutine coroutine, LogicCharacterProxy _this, ApplyCityDataInMessage msg);
        /// <summary>
        /// 家园操作
        /// </summary>
        IEnumerator CityOperationRequest(Coroutine coroutine, LogicCharacterProxy _this, CityOperationRequestInMessage msg);
        /// <summary>
        /// 请求进入家园
        /// </summary>
        IEnumerator EnterCity(Coroutine coroutine, LogicCharacterProxy _this, EnterCityInMessage msg);
        /// <summary>
        /// 有装备损坏
        /// </summary>
        IEnumerator ApplyEquipDurable(Coroutine coroutine, LogicCharacterProxy _this, ApplyEquipDurableInMessage msg);
        /// <summary>
        /// 精灵相关接口
        /// Type:0休息, 1出战，2展示 //3休息
        /// 4升级阵法
        /// 5升级
        /// 6分解
        /// </summary>
        IEnumerator ElfOperate(Coroutine coroutine, LogicCharacterProxy _this, ElfOperateInMessage msg);
        /// <summary>
        /// </summary>
        IEnumerator ElfReplace(Coroutine coroutine, LogicCharacterProxy _this, ElfReplaceInMessage msg);
        /// <summary>
        /// 翅膀升阶
        /// </summary>
        IEnumerator WingFormation(Coroutine coroutine, LogicCharacterProxy _this, WingFormationInMessage msg);
        /// <summary>
        /// 翅膀培养
        /// </summary>
        IEnumerator WingTrain(Coroutine coroutine, LogicCharacterProxy _this, WingTrainInMessage msg);
        /// <summary>
        /// 宠物操作
        /// </summary>
        IEnumerator OperatePet(Coroutine coroutine, LogicCharacterProxy _this, OperatePetInMessage msg);
        /// <summary>
        /// 操作宠任务
        /// </summary>
        IEnumerator OperatePetMission(Coroutine coroutine, LogicCharacterProxy _this, OperatePetMissionInMessage msg);
        /// <summary>
        /// 拾取勋章
        /// </summary>
        IEnumerator PickUpMedal(Coroutine coroutine, LogicCharacterProxy _this, PickUpMedalInMessage msg);
        /// <summary>
        /// 强化勋章
        /// </summary>
        IEnumerator EnchanceMedal(Coroutine coroutine, LogicCharacterProxy _this, EnchanceMedalInMessage msg);
        /// <summary>
        /// 装备勋章
        /// </summary>
        IEnumerator EquipMedal(Coroutine coroutine, LogicCharacterProxy _this, EquipMedalInMessage msg);
        /// <summary>
        /// </summary>
        IEnumerator SplitMedal(Coroutine coroutine, LogicCharacterProxy _this, SplitMedalInMessage msg);
        /// <summary>
        /// 开启包裹
        /// </summary>
        IEnumerator BuySpaceBag(Coroutine coroutine, LogicCharacterProxy _this, BuySpaceBagInMessage msg);
        /// <summary>
        /// 建筑服务通用接口
        /// </summary>
        IEnumerator UseBuildService(Coroutine coroutine, LogicCharacterProxy _this, UseBuildServiceInMessage msg);
        /// <summary>
        /// 请求天梯玩家信息
        /// </summary>
        IEnumerator GetP1vP1LadderPlayer(Coroutine coroutine, LogicCharacterProxy _this, GetP1vP1LadderPlayerInMessage msg);
        /// <summary>
        /// 攻击某个天梯的玩家
        /// 0  正常
        /// 1  cd购买
        /// 2  次数购买
        /// </summary>
        IEnumerator GetP1vP1FightPlayer(Coroutine coroutine, LogicCharacterProxy _this, GetP1vP1FightPlayerInMessage msg);
        /// <summary>
        /// 天梯战斗历史
        /// </summary>
        IEnumerator GetP1vP1LadderOldList(Coroutine coroutine, LogicCharacterProxy _this, GetP1vP1LadderOldListInMessage msg);
        /// <summary>
        /// 购买天梯次数（这个接口不用了）
        /// </summary>
        IEnumerator BuyP1vP1Count(Coroutine coroutine, LogicCharacterProxy _this, BuyP1vP1CountInMessage msg);
        /// <summary>
        /// 宠物蛋抽奖
        /// </summary>
        IEnumerator DrawLotteryPetEgg(Coroutine coroutine, LogicCharacterProxy _this, DrawLotteryPetEggInMessage msg);
        /// <summary>
        /// 回收装备 type: 0=出售装备,1=回收装备
        /// </summary>
        IEnumerator RecoveryEquip(Coroutine coroutine, LogicCharacterProxy _this, RecoveryEquipInMessage msg);
        /// <summary>
        /// 许愿池抽奖（这个接口不用了）
        /// </summary>
        IEnumerator DrawWishingPool(Coroutine coroutine, LogicCharacterProxy _this, DrawWishingPoolInMessage msg);
        /// <summary>
        /// 重置技能天赋
        /// </summary>
        IEnumerator ResetSkillTalent(Coroutine coroutine, LogicCharacterProxy _this, ResetSkillTalentInMessage msg);
        /// <summary>
        /// 机器人完成副本
        /// </summary>
        IEnumerator RobotcFinishFuben(Coroutine coroutine, LogicCharacterProxy _this, RobotcFinishFubenInMessage msg);
        /// <summary>
        /// 战盟操作:创建
        /// </summary>
        IEnumerator CreateAlliance(Coroutine coroutine, LogicCharacterProxy _this, CreateAllianceInMessage msg);
        /// <summary>
        /// 战盟操作:其他操作 type：0=申请加入（value=战盟ID）  1=取消申请（value=战盟ID）  2=退出战盟   3=同意邀请（value=战盟ID）  4=拒绝邀请（value=战盟ID）
        /// </summary>
        IEnumerator AllianceOperation(Coroutine coroutine, LogicCharacterProxy _this, AllianceOperationInMessage msg);
        /// <summary>
        /// 战盟操作:其他操作 type：0=邀请加入 1=同意申请加入 2：拒绝申请
        /// </summary>
        IEnumerator AllianceOperationCharacter(Coroutine coroutine, LogicCharacterProxy _this, AllianceOperationCharacterInMessage msg);
        /// <summary>
        /// 战盟操作:其他操作 type：0=邀请加入
        /// </summary>
        IEnumerator AllianceOperationCharacterByName(Coroutine coroutine, LogicCharacterProxy _this, AllianceOperationCharacterByNameInMessage msg);
        /// <summary>
        /// 崇拜
        /// </summary>
        IEnumerator WorshipCharacter(Coroutine coroutine, LogicCharacterProxy _this, WorshipCharacterInMessage msg);
        /// <summary>
        /// 战盟捐献
        /// </summary>
        IEnumerator DonationAllianceItem(Coroutine coroutine, LogicCharacterProxy _this, DonationAllianceItemInMessage msg);
        /// <summary>
        /// 家园任务：type 0=提交 2=购买
        /// </summary>
        IEnumerator CityMissionOperation(Coroutine coroutine, LogicCharacterProxy _this, CityMissionOperationInMessage msg);
        /// <summary>
        /// 家园任务：放弃
        /// </summary>
        IEnumerator DropCityMission(Coroutine coroutine, LogicCharacterProxy _this, DropCityMissionInMessage msg);
        /// <summary>
        /// 家园任务刷新
        /// </summary>
        IEnumerator CityRefreshMission(Coroutine coroutine, LogicCharacterProxy _this, CityRefreshMissionInMessage msg);
        /// <summary>
        /// 交易系统：上架道具
        /// </summary>
        IEnumerator StoreOperationAdd(Coroutine coroutine, LogicCharacterProxy _this, StoreOperationAddInMessage msg);
        /// <summary>
        /// 交易系统：广播道具
        /// </summary>
        IEnumerator StoreOperationBroadcast(Coroutine coroutine, LogicCharacterProxy _this, StoreOperationBroadcastInMessage msg);
        /// <summary>
        /// 交易系统：购买道具
        /// </summary>
        IEnumerator StoreOperationBuy(Coroutine coroutine, LogicCharacterProxy _this, StoreOperationBuyInMessage msg);
        /// <summary>
        /// 交易系统：收回道具
        /// </summary>
        IEnumerator StoreOperationCancel(Coroutine coroutine, LogicCharacterProxy _this, StoreOperationCancelInMessage msg);
        /// <summary>
        /// 交易系统：查看某人
        /// </summary>
        IEnumerator StoreOperationLook(Coroutine coroutine, LogicCharacterProxy _this, StoreOperationLookInMessage msg);
        /// <summary>
        /// 交易系统：获取自己正在交易的道具
        /// </summary>
        IEnumerator StoreOperationLookSelf(Coroutine coroutine, LogicCharacterProxy _this, StoreOperationLookSelfInMessage msg);
        /// <summary>
        /// 交易系统：获取自己已贩卖的收获
        /// </summary>
        IEnumerator StoreOperationHarvest(Coroutine coroutine, LogicCharacterProxy _this, StoreOperationHarvestInMessage msg);
        /// <summary>
        /// 交易系统：兑换道具
        /// </summary>
        IEnumerator SSStoreOperationExchange(Coroutine coroutine, LogicCharacterProxy _this, SSStoreOperationExchangeInMessage msg);
        /// <summary>
        /// 团购申请
        /// </summary>
        IEnumerator ApplyGroupShopItems(Coroutine coroutine, LogicCharacterProxy _this, ApplyGroupShopItemsInMessage msg);
        /// <summary>
        /// 购买团购
        /// </summary>
        IEnumerator BuyGroupShopItem(Coroutine coroutine, LogicCharacterProxy _this, BuyGroupShopItemInMessage msg);
        /// <summary>
        /// 获取我当前的愿望
        /// </summary>
        IEnumerator GetBuyedGroupShopItems(Coroutine coroutine, LogicCharacterProxy _this, GetBuyedGroupShopItemsInMessage msg);
        /// <summary>
        /// 获取团购历史
        /// </summary>
        IEnumerator GetGroupShopHistory(Coroutine coroutine, LogicCharacterProxy _this, GetGroupShopHistoryInMessage msg);
        /// <summary>
        ///  领取战场奖励
        /// </summary>
        IEnumerator AcceptBattleAward(Coroutine coroutine, LogicCharacterProxy _this, AcceptBattleAwardInMessage msg);
        /// <summary>
        ///  占星台宝石升级
        /// </summary>
        IEnumerator AstrologyLevelUp(Coroutine coroutine, LogicCharacterProxy _this, AstrologyLevelUpInMessage msg);
        /// <summary>
        ///  占星台宝石装备
        /// </summary>
        IEnumerator AstrologyEquipOn(Coroutine coroutine, LogicCharacterProxy _this, AstrologyEquipOnInMessage msg);
        /// <summary>
        ///  占星台宝石卸载
        /// </summary>
        IEnumerator AstrologyEquipOff(Coroutine coroutine, LogicCharacterProxy _this, AstrologyEquipOffInMessage msg);
        /// <summary>
        /// 对随从使用经验药
        /// </summary>
        IEnumerator UsePetExpItem(Coroutine coroutine, LogicCharacterProxy _this, UsePetExpItemInMessage msg);
        /// <summary>
        /// 转生接口
        /// </summary>
        IEnumerator Reincarnation(Coroutine coroutine, LogicCharacterProxy _this, ReincarnationInMessage msg);
        /// <summary>
        /// 升级军衔
        /// </summary>
        IEnumerator UpgradeHonor(Coroutine coroutine, LogicCharacterProxy _this, UpgradeHonorInMessage msg);
        /// <summary>
        /// 根据区域id请求建筑数据
        /// </summary>
        IEnumerator ApplyCityBuildingData(Coroutine coroutine, LogicCharacterProxy _this, ApplyCityBuildingDataInMessage msg);
        /// <summary>
        /// 根据包裹类型请求背包数据
        /// </summary>
        IEnumerator ApplyBagByType(Coroutine coroutine, LogicCharacterProxy _this, ApplyBagByTypeInMessage msg);
        /// <summary>
        /// 商店购买
        /// </summary>
        IEnumerator StoreBuyEquip(Coroutine coroutine, LogicCharacterProxy _this, StoreBuyEquipInMessage msg);
        /// <summary>
        /// 获得当前题目
        /// </summary>
        IEnumerator GetQuestionData(Coroutine coroutine, LogicCharacterProxy _this, GetQuestionDataInMessage msg);
        /// <summary>
        /// 回答当前题目
        /// </summary>
        IEnumerator AnswerQuestion(Coroutine coroutine, LogicCharacterProxy _this, AnswerQuestionInMessage msg);
        /// <summary>
        /// 使用道具22052去掉一个错误答案
        /// </summary>
        IEnumerator RemoveErrorAnswer(Coroutine coroutine, LogicCharacterProxy _this, RemoveErrorAnswerInMessage msg);
        /// <summary>
        /// 使用道具 22051给予正确选择
        /// </summary>
        IEnumerator AnswerQuestionUseItem(Coroutine coroutine, LogicCharacterProxy _this, AnswerQuestionUseItemInMessage msg);
        /// <summary>
        /// 获取玩家基本信息
        /// </summary>
        IEnumerator ApplyPlayerHeadInfo(Coroutine coroutine, LogicCharacterProxy _this, ApplyPlayerHeadInfoInMessage msg);
        /// <summary>
        /// 获取补偿列表
        /// </summary>
        IEnumerator GetCompensationList(Coroutine coroutine, LogicCharacterProxy _this, GetCompensationListInMessage msg);
        /// <summary>
        /// 领取补偿  IndexType =-1 代表一键全部  type ： 0 = 金币 ，1 = 钻石
        /// </summary>
        IEnumerator ReceiveCompensation(Coroutine coroutine, LogicCharacterProxy _this, ReceiveCompensationInMessage msg);
        /// <summary>
        /// 选称号（目前只能选3号位的称号）
        /// </summary>
        IEnumerator SelectTitle(Coroutine coroutine, LogicCharacterProxy _this, SelectTitleInMessage msg);
        /// <summary>
        /// 对随从使用复训卷轴
        /// </summary>
        IEnumerator RetrainPet(Coroutine coroutine, LogicCharacterProxy _this, RetrainPetInMessage msg);
        /// <summary>
        /// 提升战盟Buff
        /// </summary>
        IEnumerator UpgradeAllianceBuff(Coroutine coroutine, LogicCharacterProxy _this, UpgradeAllianceBuffInMessage msg);
        /// <summary>
        /// 投资
        /// </summary>
        IEnumerator Investment(Coroutine coroutine, LogicCharacterProxy _this, InvestmentInMessage msg);
        /// <summary>
        /// 领取累计充值，投资奖励
        /// </summary>
        IEnumerator GainReward(Coroutine coroutine, LogicCharacterProxy _this, GainRewardInMessage msg);
        /// <summary>
        /// 膜拜
        /// </summary>
        IEnumerator Worship(Coroutine coroutine, LogicCharacterProxy _this, WorshipInMessage msg);
        /// <summary>
        /// 使用某个礼品码
        /// </summary>
        IEnumerator UseGiftCode(Coroutine coroutine, LogicCharacterProxy _this, UseGiftCodeInMessage msg);
        /// <summary>
        /// 获取充值活动的数据
        /// </summary>
        IEnumerator ApplyRechargeTables(Coroutine coroutine, LogicCharacterProxy _this, ApplyRechargeTablesInMessage msg);
        /// <summary>
        /// 获取首冲数据
        /// </summary>
        IEnumerator ApplyFirstChargeItem(Coroutine coroutine, LogicCharacterProxy _this, ApplyFirstChargeItemInMessage msg);
        /// <summary>
        /// 获取首冲奖励
        /// </summary>
        IEnumerator ApplyGetFirstChargeItem(Coroutine coroutine, LogicCharacterProxy _this, ApplyGetFirstChargeItemInMessage msg);
        /// <summary>
        /// 领取副本多倍奖励
        /// </summary>
        IEnumerator TakeMultyExpAward(Coroutine coroutine, LogicCharacterProxy _this, TakeMultyExpAwardInMessage msg);
        /// <summary>
        ///  给指定武器随机技能
        /// </summary>
        IEnumerator RandEquipSkill(Coroutine coroutine, LogicCharacterProxy _this, RandEquipSkillInMessage msg);
        /// <summary>
        ///  应用武器技能(type == 0 取消)
        /// </summary>
        IEnumerator UseEquipSkill(Coroutine coroutine, LogicCharacterProxy _this, UseEquipSkillInMessage msg);
        /// <summary>
        /// </summary>
        IEnumerator ReplaceElfSkill(Coroutine coroutine, LogicCharacterProxy _this, ReplaceElfSkillInMessage msg);
        /// <summary>
        /// </summary>
        IEnumerator RecycleBagItemList(Coroutine coroutine, LogicCharacterProxy _this, RecycleBagItemListInMessage msg);
        /// <summary>
        /// </summary>
        IEnumerator ResolveElfList(Coroutine coroutine, LogicCharacterProxy _this, ResolveElfListInMessage msg);
        /// <summary>
        /// 进入玛雅纪元
        /// </summary>
        IEnumerator CSEnterEraById(Coroutine coroutine, LogicCharacterProxy _this, CSEnterEraByIdInMessage msg);
        /// <summary>
        /// </summary>
        IEnumerator EraPlayedSkill(Coroutine coroutine, LogicCharacterProxy _this, EraPlayedSkillInMessage msg);
        /// <summary>
        /// </summary>
        IEnumerator EraTakeAchvAward(Coroutine coroutine, LogicCharacterProxy _this, EraTakeAchvAwardInMessage msg);
        /// <summary>
        /// </summary>
        IEnumerator EraTakeAward(Coroutine coroutine, LogicCharacterProxy _this, EraTakeAwardInMessage msg);
        /// <summary>
        /// </summary>
        IEnumerator RefreshHunterMission(Coroutine coroutine, LogicCharacterProxy _this, RefreshHunterMissionInMessage msg);
        /// <summary>
        /// 请求离线经验数据
        /// </summary>
        IEnumerator CSApplyOfflineExpData(Coroutine coroutine, LogicCharacterProxy _this, CSApplyOfflineExpDataInMessage msg);
        /// <summary>
        /// </summary>
        IEnumerator RereshTiralTime(Coroutine coroutine, LogicCharacterProxy _this, RereshTiralTimeInMessage msg);
        /// <summary>
        /// 是否在审核中
        /// </summary>
        IEnumerator GetReviewState(Coroutine coroutine, LogicCharacterProxy _this, GetReviewStateInMessage msg);
        /// <summary>
        /// 上架拍卖行
        /// </summary>
        IEnumerator OnItemAuction(Coroutine coroutine, LogicCharacterProxy _this, OnItemAuctionInMessage msg);
        /// <summary>
        /// 购买拍卖道具
        /// </summary>
        IEnumerator BuyItemAuction(Coroutine coroutine, LogicCharacterProxy _this, BuyItemAuctionInMessage msg);
        /// <summary>
        /// 请求交易所的交易历史
        /// </summary>
        IEnumerator ApplySellHistory(Coroutine coroutine, LogicCharacterProxy _this, ApplySellHistoryInMessage msg);
        /// <summary>
        /// 许愿池抽卡
        /// </summary>
        IEnumerator DrawWishItem(Coroutine coroutine, LogicCharacterProxy _this, DrawWishItemInMessage msg);
        /// <summary>
        /// 请求运营活动数据
        /// </summary>
        IEnumerator ApplyOperationActivity(Coroutine coroutine, LogicCharacterProxy _this, ApplyOperationActivityInMessage msg);
        /// <summary>
        /// 请求运营活动奖励
        /// </summary>
        IEnumerator ClaimOperationReward(Coroutine coroutine, LogicCharacterProxy _this, ClaimOperationRewardInMessage msg);
        /// <summary>
        /// 提升炮台血量    promoteType:0表示钻石提升，1：表示道具提升
        /// </summary>
        IEnumerator ApplyPromoteHP(Coroutine coroutine, LogicCharacterProxy _this, ApplyPromoteHPInMessage msg);
        /// <summary>
        /// 提升炮台技能等级  promoteType:0表示钻石提升，1：表示道具提升
        /// </summary>
        IEnumerator ApplyPromoteSkill(Coroutine coroutine, LogicCharacterProxy _this, ApplyPromoteSkillInMessage msg);
        /// <summary>
        /// 请求获得Boss宝箱
        /// </summary>
        IEnumerator ApplyPickUpBox(Coroutine coroutine, LogicCharacterProxy _this, ApplyPickUpBoxInMessage msg);
        /// <summary>
        /// 请求报名活动
        /// </summary>
        IEnumerator ApplyJoinActivity(Coroutine coroutine, LogicCharacterProxy _this, ApplyJoinActivityInMessage msg);
        /// <summary>
        /// 请求获得雕像奖励
        /// </summary>
        IEnumerator ApplyPortraitAward(Coroutine coroutine, LogicCharacterProxy _this, ApplyPortraitAwardInMessage msg);
        /// <summary>
        /// 请求领取炮台升级阶段奖励礼包
        /// </summary>
        IEnumerator ApplyGetTowerReward(Coroutine coroutine, LogicCharacterProxy _this, ApplyGetTowerRewardInMessage msg);
        /// <summary>
        /// 请求灭世活动数据111
        /// CS CommonActivityData		ApplyActivityData(int32 serverId)=1520;
        /// 请求炮台信息
        /// CS BatteryDatas			    ApplyBatteryData(int32 activityId) = 1521;
        /// 提升炮台血量
        /// CS int32                    ApplyPromoteHP(int64 batteryGuid, int32 promoteType) = 1522;
        /// 提升炮台技能等级
        /// CS int32                    ApplyPromoteSkill(int64 batteryGuid, int32 promoteType) = 1523;
        /// 请求贡献排行榜
        /// CS ContriRankingData        ApplyContriRankingData(int32 activityId) = 1524;
        /// 请求积分排行榜
        /// CS PointRankingData         ApplyPointRankingData(int32 activityId) = 1525;
        /// 发送json串
        /// </summary>
        IEnumerator SendJsonData(Coroutine coroutine, LogicCharacterProxy _this, SendJsonDataInMessage msg);
        /// <summary>
        /// 翅膀充值
        /// </summary>
        IEnumerator BuyWingCharge(Coroutine coroutine, LogicCharacterProxy _this, BuyWingChargeInMessage msg);
        /// <summary>
        /// 灵兽岛购买体力
        /// 古域战场购买体力
        /// </summary>
        IEnumerator BuyEnergyByType(Coroutine coroutine, LogicCharacterProxy _this, BuyEnergyByTypeInMessage msg);
        /// <summary>
        /// 获取开服特惠
        /// </summary>
        IEnumerator ApplyKaiFuTeHuiData(Coroutine coroutine, LogicCharacterProxy _this, ApplyKaiFuTeHuiDataInMessage msg);
        /// <summary>
        /// </summary>
        IEnumerator BuyKaiFuTeHuiItem(Coroutine coroutine, LogicCharacterProxy _this, BuyKaiFuTeHuiItemInMessage msg);
        /// <summary>
        /// 捐赠装备到战盟仓库
        /// </summary>
        IEnumerator BattleUnionDonateEquip(Coroutine coroutine, LogicCharacterProxy _this, BattleUnionDonateEquipInMessage msg);
        /// <summary>
        /// 从战盟仓库取出装备
        /// </summary>
        IEnumerator BattleUnionTakeOutEquip(Coroutine coroutine, LogicCharacterProxy _this, BattleUnionTakeOutEquipInMessage msg);
        /// <summary>
        /// GM相关 end
        /// 收集客户端报错
        /// </summary>
        IEnumerator ClientErrorMessage(Coroutine coroutine, LogicCharacterProxy _this, ClientErrorMessageInMessage msg);
        /// <summary>
        /// </summary>
        IEnumerator SendQuestion(Coroutine coroutine, LogicCharacterProxy _this, SendQuestionInMessage msg);
        /// <summary>
        /// </summary>
        IEnumerator SendSurvey(Coroutine coroutine, LogicCharacterProxy _this, SendSurveyInMessage msg);
        /// <summary>
        /// 爬塔扫荡
        /// </summary>
        IEnumerator TowerSweep(Coroutine coroutine, LogicCharacterProxy _this, TowerSweepInMessage msg);
        /// <summary>
        /// </summary>
        IEnumerator TowerBuySweepTimes(Coroutine coroutine, LogicCharacterProxy _this, TowerBuySweepTimesInMessage msg);
        /// <summary>
        /// 
        /// </summary>
        IEnumerator CheckTowerDailyInfo(Coroutine coroutine, LogicCharacterProxy _this, CheckTowerDailyInfoInMessage msg);
        /// <summary>
        /// </summary>
        IEnumerator SetHandbookFight(Coroutine coroutine, LogicCharacterProxy _this, SetHandbookFightInMessage msg);
        /// <summary>
        /// </summary>
        IEnumerator AskMountData(Coroutine coroutine, LogicCharacterProxy _this, AskMountDataInMessage msg);
        /// <summary>
        /// </summary>
        IEnumerator MountUp(Coroutine coroutine, LogicCharacterProxy _this, MountUpInMessage msg);
        /// <summary>
        /// </summary>
        IEnumerator RideMount(Coroutine coroutine, LogicCharacterProxy _this, RideMountInMessage msg);
        /// <summary>
        /// </summary>
        IEnumerator MountSkill(Coroutine coroutine, LogicCharacterProxy _this, MountSkillInMessage msg);
        /// <summary>
        /// </summary>
        IEnumerator MountFeed(Coroutine coroutine, LogicCharacterProxy _this, MountFeedInMessage msg);
        /// <summary>
        /// </summary>
        IEnumerator Mount(Coroutine coroutine, LogicCharacterProxy _this, MountInMessage msg);
        /// <summary>
        /// BossHome进入口钻石
        /// </summary>
        IEnumerator BossHomeCost(Coroutine coroutine, LogicCharacterProxy _this, BossHomeCostInMessage msg);
        /// <summary>
        /// 添加坐骑皮肤
        /// </summary>
        IEnumerator AddMountSkin(Coroutine coroutine, LogicCharacterProxy _this, AddMountSkinInMessage msg);
        /// <summary>
        /// 挖矿活动领取奖励
        /// </summary>
        IEnumerator ApplyFieldActivityReward(Coroutine coroutine, LogicCharacterProxy _this, ApplyFieldActivityRewardInMessage msg);
        /// <summary>
        /// 请求好友列表数据
        /// </summary>
        IEnumerator ApplyFriendListData(Coroutine coroutine, LogicCharacterProxy _this, ApplyFriendListDataInMessage msg);
        /// <summary>
        /// 使用时装
        /// </summary>
        IEnumerator UseShiZhuang(Coroutine coroutine, LogicCharacterProxy _this, UseShiZhuangInMessage msg);
        /// <summary>
        /// 点击玛雅Tip界面
        /// </summary>
        IEnumerator ClickMayaTip(Coroutine coroutine, LogicCharacterProxy _this, ClickMayaTipInMessage msg);
        /// <summary>
        /// 设置装备状态
        /// </summary>
        IEnumerator ChangeEquipState(Coroutine coroutine, LogicCharacterProxy _this, ChangeEquipStateInMessage msg);
        /// <summary>
        /// </summary>
        IEnumerator RefreshFashionInfo(Coroutine coroutine, LogicCharacterProxy _this, RefreshFashionInfoInMessage msg);
        /// <summary>
        /// </summary>
        IEnumerator ApplySuperVIP(Coroutine coroutine, LogicCharacterProxy _this, ApplySuperVIPInMessage msg);
        /// <summary>
        /// 祭拜
        /// </summary>
        IEnumerator WorshipMonument(Coroutine coroutine, LogicCharacterProxy _this, WorshipMonumentInMessage msg);
        /// <summary>
        /// 装备随灵结果确认
        /// </summary>
        IEnumerator SaveSuperExcellentEquip(Coroutine coroutine, LogicCharacterProxy _this, SaveSuperExcellentEquipInMessage msg);
        /// <summary>
        /// 通知修改玩家名字
        /// </summary>
        IEnumerator ModifyPlayerName(Coroutine coroutine, LogicCharacterProxy _this, ModifyPlayerNameInMessage msg);
        /// <summary>
        /// 发起角斗申请
        /// </summary>
        IEnumerator InviteChallenge(Coroutine coroutine, LogicCharacterProxy _this, InviteChallengeInMessage msg);
        /// <summary>
        /// 是否接受角斗申请
        /// </summary>
        IEnumerator AcceptChallenge(Coroutine coroutine, LogicCharacterProxy _this, AcceptChallengeInMessage msg);
        IEnumerator OnConnected(Coroutine coroutine, LogicCharacterProxy _this, uint packId);
        IEnumerator OnLost(Coroutine coroutine, LogicCharacterProxy _this, uint packId);
        bool OnSyncRequested(LogicCharacterProxy _this, ulong characterId, uint syncId);
    }

    public class LogicCharacterProxy
    {
        public ulong CharacterId { get; private set; }
        public ulong ClientId { get; private set; }
        public LogicService Service { get; private set; }

        public LogicCharacterProxy(LogicService service, ulong characterId, ulong clientId)
        {
            CharacterId = characterId;
            ClientId = clientId;
            Service = service;
            mSyncCenter.ServiceType = ServiceType.Logic;
        }

        private DataSyncCenter mSyncCenter = new DataSyncCenter();
        public DataSyncCenter SyncCenter { get { return mSyncCenter; } }

        public void Sync()
        {
            Service.Sync(ClientId, mSyncCenter);
        }

        /// <summary>
        /// 同步任务数据
        /// </summary>
        public object SyncMission(int missionId, int state, int param)
        {
            Service.SyncMission(CharacterId, ClientId,missionId, state, param);
            return null;
        }
        /// <summary>
        /// 同步标记位
        /// </summary>
        public object SyncFlag(int flagId, int param)
        {
            Service.SyncFlag(CharacterId, ClientId,flagId, param);
            return null;
        }
        /// <summary>
        /// 同步标记位
        /// </summary>
        public object SyncFlagList(Int32Array trueList, Int32Array falseList)
        {
            Service.SyncFlagList(CharacterId, ClientId,trueList, falseList);
            return null;
        }
        /// <summary>
        /// 同步扩展数据
        /// </summary>
        public object SyncExdata(int exdataId, int value)
        {
            Service.SyncExdata(CharacterId, ClientId,exdataId, value);
            return null;
        }
        /// <summary>
        /// 同步扩展数据
        /// </summary>
        public object SyncExdataList(Dict_int_int_Data diff)
        {
            Service.SyncExdataList(CharacterId, ClientId,diff);
            return null;
        }
        /// <summary>
        /// 同步64位扩展数据
        /// </summary>
        public object SyncExdata64(int exdataId, long value)
        {
            Service.SyncExdata64(CharacterId, ClientId,exdataId, value);
            return null;
        }
        /// <summary>
        /// 同步资源数据
        /// </summary>
        public object SyncResources(int resId, int value)
        {
            Service.SyncResources(CharacterId, ClientId,resId, value);
            return null;
        }
        /// <summary>
        /// 同步包裹变化
        /// </summary>
        public object SyncItems(BagsChangeData bag)
        {
            Service.SyncItems(CharacterId, ClientId,bag);
            return null;
        }
        /// <summary>
        /// 同步任务变化
        /// </summary>
        public object SyncMissions(MissionDataMessage missions)
        {
            Service.SyncMissions(CharacterId, ClientId,missions);
            return null;
        }
        /// <summary>
        /// 成就完成提示
        /// </summary>
        public object FinishAchievement(int achievementId)
        {
            Service.FinishAchievement(CharacterId, ClientId,achievementId);
            return null;
        }
        /// <summary>
        /// </summary>
        public object SeekCharactersReceive(CharacterSimpleDataList result)
        {
            Service.SeekCharactersReceive(CharacterId, ClientId,result);
            return null;
        }
        /// <summary>
        /// </summary>
        public object SeekFriendsReceive(CharacterSimpleDataList result)
        {
            Service.SeekFriendsReceive(CharacterId, ClientId,result);
            return null;
        }
        /// <summary>
        /// 副本结束，通知结果
        /// </summary>
        public object DungeonComplete(FubenResult result)
        {
            Service.DungeonComplete(CharacterId, ClientId,result);
            return null;
        }
        /// <summary>
        /// 主动更新图鉴组激活状态
        /// </summary>
        public object ActivateBookGroup(int groupId)
        {
            Service.ActivateBookGroup(CharacterId, ClientId,groupId);
            return null;
        }
        /// <summary>
        /// 主动更新邮件
        /// </summary>
        public object SyncMails(MailList mails)
        {
            Service.SyncMails(CharacterId, ClientId,mails);
            return null;
        }
        /// <summary>
        /// 同步家园建筑数据
        /// </summary>
        public object SyncCityBuildingData(BuildingList data)
        {
            Service.SyncCityBuildingData(CharacterId, ClientId,data);
            return null;
        }
        /// <summary>
        /// 同步随从任务数据
        /// </summary>
        public object SyncPetMission(PetMissionList msg)
        {
            Service.SyncPetMission(CharacterId, ClientId,msg);
            return null;
        }
        /// <summary>
        /// 有装备损坏
        /// </summary>
        public object EquipDurableBroken(int partId, int value)
        {
            Service.EquipDurableBroken(CharacterId, ClientId,partId, value);
            return null;
        }
        /// <summary>
        /// 装备耐久第一次变化，希望客户端可以下次开界面时请求耐久
        /// </summary>
        public object EquipDurableChange(int placeholder)
        {
            Service.EquipDurableChange(CharacterId, ClientId,placeholder);
            return null;
        }
        /// <summary>
        /// 删除宠物任务
        /// </summary>
        public object DeletePetMission(int missionId)
        {
            Service.DeletePetMission(CharacterId, ClientId,missionId);
            return null;
        }
        /// <summary>
        /// 天梯的奖励界面
        /// </summary>
        public object LogicP1vP1FightResult(P1vP1RewardData data)
        {
            Service.LogicP1vP1FightResult(CharacterId, ClientId,data);
            return null;
        }
        /// <summary>
        /// 战盟信息通知 type：0=name1邀请您加入name2的战盟
        /// </summary>
        public object LogicSyncAllianceMessage(int type, string name1, int allianceId, string name2)
        {
            Service.LogicSyncAllianceMessage(CharacterId, ClientId,type, name1, allianceId, name2);
            return null;
        }
        /// <summary>
        /// 精灵的抽奖结果
        /// </summary>
        public object ElfDrawOver(DrawItemResult Items, long getTime)
        {
            Service.ElfDrawOver(CharacterId, ClientId,Items, getTime);
            return null;
        }
        /// <summary>
        /// 增加天赋数量变化的通知界面
        /// </summary>
        public object TalentCountChange(int talentId, int value)
        {
            Service.TalentCountChange(CharacterId, ClientId,talentId, value);
            return null;
        }
        /// <summary>
        /// 通知有东西被买了
        /// </summary>
        public object NotifyStoreBuyed(long storeId, ulong Aid, string Aname)
        {
            Service.NotifyStoreBuyed(CharacterId, ClientId,storeId, Aid, Aname);
            return null;
        }
        /// <summary>
        /// 占星台抽奖结果
        /// </summary>
        public object AstrologyDrawOver(DrawItemResult Items, long getTime)
        {
            Service.AstrologyDrawOver(CharacterId, ClientId,Items, getTime);
            return null;
        }
        /// <summary>
        /// 额外增加了仇人
        /// </summary>
        public object SyncAddFriend(int type, CharacterSimpleData character)
        {
            Service.SyncAddFriend(CharacterId, ClientId,type, character);
            return null;
        }
        /// <summary>
        /// 通知一些消息 type:0提示字典
        /// </summary>
        public object LogicNotifyMessage(int type, string info, int addChat)
        {
            Service.LogicNotifyMessage(CharacterId, ClientId,type, info, addChat);
            return null;
        }
        /// <summary>
        /// 通知客户端获得经验
        /// </summary>
        public object NotifGainRes(DataChangeList changes)
        {
            Service.NotifGainRes(CharacterId, ClientId,changes);
            return null;
        }
        /// <summary>
        /// 通知战场的结果界面信息
        /// </summary>
        public object BattleResult(int dungeonId, int resultType, int first)
        {
            Service.BattleResult(CharacterId, ClientId,dungeonId, resultType, first);
            return null;
        }
        /// <summary>
        /// 自己被打了
        /// </summary>
        public object NotifyP1vP1Change(P1vP1Change_One one)
        {
            Service.NotifyP1vP1Change(CharacterId, ClientId,one);
            return null;
        }
        /// <summary>
        /// 通知好友数据变化
        /// </summary>
        public object SyncFriendDataChange(CharacterSimpleDataList Changes)
        {
            Service.SyncFriendDataChange(CharacterId, ClientId,Changes);
            return null;
        }
        /// <summary>
        /// 通知好友删除
        /// </summary>
        public object SyncFriendDelete(int type, ulong characterId)
        {
            Service.SyncFriendDelete(CharacterId, ClientId,type, characterId);
            return null;
        }
        /// <summary>
        /// 通知客户端，充值成功
        /// </summary>
        public object NotifyRechargeSuccess(int rechargeId)
        {
            Service.NotifyRechargeSuccess(CharacterId, ClientId,rechargeId);
            return null;
        }
        /// <summary>
        /// 同步运营活动内容
        /// </summary>
        public object SyncOperationActivityItem(MsgOperActivtyItemList items)
        {
            Service.SyncOperationActivityItem(CharacterId, ClientId,items);
            return null;
        }
        /// <summary>
        /// 同步运营活动内容
        /// </summary>
        public object SyncOperationActivityTerm(int id, int param)
        {
            Service.SyncOperationActivityTerm(CharacterId, ClientId,id, param);
            return null;
        }
        /// <summary>
        /// </summary>
        public object SendMountData(MountData data)
        {
            Service.SendMountData(CharacterId, ClientId,data);
            return null;
        }
        /// <summary>
        /// 通知记录角色结果
        /// </summary>
        public object NotifySnapShotResult(int state)
        {
            Service.NotifySnapShotResult(CharacterId, ClientId,state);
            return null;
        }
        /// <summary>
        /// 增加技能点
        /// </summary>
        public object AddSkillPoint(int skillId, int point)
        {
            Service.AddSkillPoint(CharacterId, ClientId,skillId, point);
            return null;
        }
        /// <summary>
        /// 收到角斗申请
        /// </summary>
        public object ReceiveChallenge(ulong characterId, string name, string server)
        {
            Service.ReceiveChallenge(CharacterId, ClientId,characterId, name, server);
            return null;
        }
        public object Wait(Coroutine coroutine, TimeSpan timeSpan)
        {
            return Service.Wait(coroutine, timeSpan);
        }
    }
}
