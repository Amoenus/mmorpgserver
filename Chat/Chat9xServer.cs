// Generated by the rpc compiler.  DO NOT EDIT!
using System;
using System.Collections;
using System.IO;
using Scorpion;
using System.Collections.Generic;
using ProtoBuf;
using DataContract;

#pragma warning disable 0162,0108
namespace ChatServerService
{

    public interface IChatService
    {
        /// <summary>
        /// </summary>
        IEnumerator PrepareDataForEnterGame(Coroutine coroutine, ChatService _this, PrepareDataForEnterGameInMessage msg);
        /// <summary>
        /// </summary>
        IEnumerator PrepareDataForCreateCharacter(Coroutine coroutine, ChatService _this, PrepareDataForCreateCharacterInMessage msg);
        /// <summary>
        /// </summary>
        IEnumerator PrepareDataForCommonUse(Coroutine coroutine, ChatService _this, PrepareDataForCommonUseInMessage msg);
        /// <summary>
        /// </summary>
        IEnumerator PrepareDataForLogout(Coroutine coroutine, ChatService _this, PrepareDataForLogoutInMessage msg);
        /// <summary>
        /// </summary>
        IEnumerator CreateCharacter(Coroutine coroutine, ChatService _this, CreateCharacterInMessage msg);
        /// <summary>
        /// </summary>
        IEnumerator DelectCharacter(Coroutine coroutine, ChatService _this, DelectCharacterInMessage msg);
        /// <summary>
        /// 检查客户端是否已经连接到对应服务器
        /// </summary>
        IEnumerator CheckConnected(Coroutine coroutine, ChatService _this, CheckConnectedInMessage msg);
        /// <summary>
        /// 检查相应客户端连接是否已经断开
        /// </summary>
        IEnumerator CheckLost(Coroutine coroutine, ChatService _this, CheckLostInMessage msg);
        /// <summary>
        /// 查询服务器状态
        /// </summary>
        IEnumerator QueryStatus(Coroutine coroutine, ChatService _this, QueryStatusInMessage msg);
        /// <summary>
        /// 广播表格重载
        /// </summary>
        IEnumerator ServerGMCommand(Coroutine coroutine, ChatService _this, ServerGMCommandInMessage msg);
        /// <summary>
        /// 查询服务器状态，是否可以进入
        /// </summary>
        IEnumerator ReadyToEnter(Coroutine coroutine, ChatService _this, ReadyToEnterInMessage msg);
        /// <summary>
        /// 更新服务器
        /// </summary>
        IEnumerator UpdateServer(Coroutine coroutine, ChatService _this, UpdateServerInMessage msg);
        /// <summary>
        /// 增加最近联系人
        /// </summary>
        IEnumerator AddRecentcontacts(Coroutine coroutine, ChatService _this, AddRecentcontactsInMessage msg);
        /// <summary>
        /// 缓存私聊
        /// </summary>
        IEnumerator CacheChatMessage(Coroutine coroutine, ChatService _this, CacheChatMessageInMessage msg);
        /// <summary>
        /// 通知某个角色开始 链接各游戏服务器了
        /// </summary>
        IEnumerator SSNotifyCharacterOnConnet(Coroutine coroutine, ChatService _this, SSNotifyCharacterOnConnetInMessage msg);
        /// <summary>
        /// 通知服务器玩家掉线了
        /// </summary>
        IEnumerator BSNotifyCharacterOnLost(Coroutine coroutine, ChatService _this, BSNotifyCharacterOnLostInMessage msg);
        /// <summary>
        /// 玩家禁言
        /// </summary>
        IEnumerator Silence(Coroutine coroutine, ChatService _this, SilenceInMessage msg);
        /// <summary>
        /// 
        /// </summary>
        IEnumerator GetSilenceState(Coroutine coroutine, ChatService _this, GetSilenceStateInMessage msg);
        /// <summary>
        ///  广播送花信息
        /// </summary>
        IEnumerator SSBroadcastAllServerMsg(Coroutine coroutine, ChatService _this, SSBroadcastAllServerMsgInMessage msg);
        /// <summary>
        /// </summary>
        IEnumerator SSGetCurrentAnchor(Coroutine coroutine, ChatService _this, SSGetCurrentAnchorInMessage msg);
        /// <summary>
        /// GM相关 begin  逻辑包放GM工具前
        /// </summary>
        IEnumerator GMCommand(Coroutine coroutine, ChatService _this, GMCommandInMessage msg);
        /// <summary>
        /// 拷贝一个角色数据到另一个角色id
        /// </summary>
        IEnumerator CloneCharacterDbById(Coroutine coroutine, ChatService _this, CloneCharacterDbByIdInMessage msg);
        /// <summary>
        /// GM相关 end
        /// </summary>
        IEnumerator NotifyPlayerEnterGame(Coroutine coroutine, ChatService _this, NotifyPlayerEnterGameInMessage msg);
        /// <summary>
        /// </summary>
        IEnumerator AddPlayerToChatMonitor(Coroutine coroutine, ChatService _this, AddPlayerToChatMonitorInMessage msg);
        /// <summary>
        /// </summary>
        IEnumerator GetAnchorIsInRoom(Coroutine coroutine, ChatService _this, GetAnchorIsInRoomInMessage msg);
        /// <summary>
        /// 通知修改玩家名字
        /// </summary>
        IEnumerator NodifyModifyPlayerName(Coroutine coroutine, ChatService _this, NodifyModifyPlayerNameInMessage msg);
        IEnumerator OnServerStart(Coroutine coroutine, ChatService _this);
        IEnumerator OnServerStop(Coroutine coroutine, ChatService _this);
    }

    public abstract class ChatService : ServerAgentBase
    {

        protected static IChatService mImpl;
        public static IChatCharacterProxy mProxyImpl;
        public void SetServiceImpl(IChatService impl)
        {
            mImpl = impl;
        }
        public void SetProxyImpl(IChatCharacterProxy proxyImpl)
        {
            mProxyImpl = proxyImpl;
        }
        public abstract ChatCharacterProxy NewCharacterIn(ulong characterId, ulong clientId);
        public Dictionary<ulong, ChatCharacterProxy> Proxys = new Dictionary<ulong, ChatCharacterProxy>();
        protected override object GetRequestData(uint p, byte[] list)
        {
            switch(p)
            {
            case 5000:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Chat_PrepareDataForEnterGame_ARG_int32_serverId__>(ms);
                }
                break;
            case 5001:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Chat_PrepareDataForCreateCharacter_ARG_int32_type__>(ms);
                }
                break;
            case 5002:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Chat_PrepareDataForCommonUse_ARG_uint32_placeholder__>(ms);
                }
                break;
            case 5003:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Chat_PrepareDataForLogout_ARG_uint32_placeholder__>(ms);
                }
                break;
            case 5015:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Chat_CreateCharacter_ARG_int32_type__>(ms);
                }
                break;
            case 5016:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Chat_DelectCharacter_ARG_int32_type__>(ms);
                }
                break;
            case 5030:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Chat_SBGetAllOnlineCharacterInServer_ARG_int32_serverId__>(ms);
                }
                break;
            case 5031:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Chat_CheckConnected_ARG_uint64_characterId__>(ms);
                }
                break;
            case 5032:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Chat_CheckLost_ARG_uint64_characterId__>(ms);
                }
                break;
            case 5033:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Chat_QueryStatus_ARG_uint32_placeholder__>(ms);
                }
                break;
            case 5040:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Chat_QueryBrokerStatus_ARG_uint32_placeholder__>(ms);
                }
                break;
            case 5041:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Chat_GMChat_ARG_string_commond__>(ms);
                }
                break;
            case 5042:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Chat_ChatChatMessage_ARG_int32_chatType_ChatMessageContent_Content_uint64_characterId__>(ms);
                }
                break;
            case 5043:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Chat_ChatNotify_ARG_int32_chatType_uint64_characterId_string_characterName_ChatMessageContent_content__>(ms);
                }
                break;
            case 5044:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Chat_SendHornMessage_ARG_uint32_serverId_int32_chatType_uint64_characterId_string_characterName_ChatMessageContent_content__>(ms);
                }
                break;
            case 5046:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Chat_SyncChatMessage_ARG_int32_chatType_uint64_characterId_string_characterName_ChatMessageContent_content__>(ms);
                }
                break;
            case 5047:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Chat_BroadcastWorldMessage_ARG_int32_chatType_uint64_characterId_string_characterName_ChatMessageContent_content__>(ms);
                }
                break;
            case 5048:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Chat_ServerGMCommand_ARG_string_cmd_string_param__>(ms);
                }
                break;
            case 5049:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Chat_ReadyToEnter_ARG_int32_placeholder__>(ms);
                }
                break;
            case 5050:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Chat_UpdateServer_ARG_int32_placeholder__>(ms);
                }
                break;
            case 5051:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Chat_GetRecentcontacts_ARG_int32_placeholder__>(ms);
                }
                break;
            case 5052:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Chat_DeleteRecentcontacts_ARG_uint64_characterId__>(ms);
                }
                break;
            case 5053:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Chat_AddRecentcontacts_ARG_LogicSimpleData_simpleData__>(ms);
                }
                break;
            case 5054:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Chat_EnterChannel_ARG_uint64_channelId_string_password__>(ms);
                }
                break;
            case 5055:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Chat_LeaveChannel_ARG_uint64_channelId__>(ms);
                }
                break;
            case 5056:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Chat_SyncToListCityChatMessage_ARG_int32_chatType_uint64_characterId_string_characterName_ChatMessageContent_Content_string_ChannelName__>(ms);
                }
                break;
            case 5057:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Chat_CacheChatMessage_ARG_int32_chatType_uint64_characterId_string_characterName_ChatMessageContent_content__>(ms);
                }
                break;
            case 5500:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Chat_SBCleanClientCharacterData_ARG_uint64_clientId_uint64_characterId__>(ms);
                }
                break;
            case 5501:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Chat_SSNotifyCharacterOnConnet_ARG_uint64_clientId_uint64_characterId__>(ms);
                }
                break;
            case 5503:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Chat_BSNotifyCharacterOnLost_ARG_uint64_clientId_uint64_characterId__>(ms);
                }
                break;
            case 5504:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Chat_Silence_ARG_uint32_mask__>(ms);
                }
                break;
            case 5505:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Chat_GetSilenceState_ARG_int32_placeholder__>(ms);
                }
                break;
            case 5506:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Chat_ApplyAnchorRoomInfo_ARG_int32_placeholder__>(ms);
                }
                break;
            case 5507:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Chat_SSBroadcastAllServerMsg_ARG_int32_chatType_string_charName_ChatMessageContent_content__>(ms);
                }
                break;
            case 5508:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Chat_SSGetCurrentAnchor_ARG_int32_placeholder__>(ms);
                }
                break;
            case 5509:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Chat_PresentGift_ARG_int32_itemId_int32_count__>(ms);
                }
                break;
            case 5510:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Chat_BroadcastAnchorOnline_ARG_string_charName_int32_online__>(ms);
                }
                break;
            case 5511:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Chat_NotifyChatRoseEffectChange_ARG_int32_chatType__>(ms);
                }
                break;
            case 5512:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Chat_NotifyAnchorEnterRoomChange_ARG_int32_chat__>(ms);
                }
                break;
            case 5513:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Chat_BroadcastAnchorEnterRoom_ARG_string_charName__>(ms);
                }
                break;
            case 5514:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Chat_AnchorExitRoom_ARG_int32_chat__>(ms);
                }
                break;
            case 5900:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Chat_GMCommand_ARG_StringArray_commonds__>(ms);
                }
                break;
            case 5901:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Chat_CloneCharacterDbById_ARG_uint64_fromId_uint64_toId__>(ms);
                }
                break;
            case 5902:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Chat_NotifyPlayerEnterGame_ARG_MsgChatMoniterData_data__>(ms);
                }
                break;
            case 5903:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Chat_AddPlayerToChatMonitor_ARG_int32_placeholder__>(ms);
                }
                break;
            case 5904:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Chat_GetAnchorIsInRoom_ARG_int32_placeholder__>(ms);
                }
                break;
            case 5905:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Chat_NodifyModifyPlayerName_ARG_uint64_characterId_string_modifyName__>(ms);
                }
                break;
            default:
                break;
            }

            return null;
        }

        public override IEnumerator OnClientConnected(Coroutine coroutine, string target, ulong clientId, ulong characterId, uint packId)
        {
            if (target != "client")
            {
                return null;
            }

            var proxy = NewCharacterIn(characterId, clientId);
            if (proxy != null)
            {
                Proxys[characterId] = proxy;
                return mProxyImpl.OnConnected(coroutine, proxy, packId);
            }
            return null;
        }
        public override IEnumerator OnClientLost(Coroutine coroutine, string target, ulong clientId, ulong characterId, uint packId)
        {
            if (target != "client")
            {
                yield break;
            }
            ChatCharacterProxy proxy = null;
            if (Proxys.TryGetValue(characterId, out proxy))
            {
                var co = CoroutineFactory.NewSubroutine(mProxyImpl.OnLost, coroutine, proxy, packId);
                if (co.MoveNext())
                {
                    yield return co;
                }
                Proxys.Remove(characterId);
            }
        }
        public void CharacterId2ClientId(IEnumerable<ulong> ids, List<ulong> known, List<ulong> unknown)
        {
            foreach (var id in ids)
            {
                ChatCharacterProxy proxy;
                if (Proxys.TryGetValue(id, out proxy))
                {
                    known.Add(((ChatCharacterProxy)proxy).ClientId);
                }
                else
                {
                    unknown.Add(id);
                }
            }
        }
        /// <summary>
        /// GM命令数据
        /// </summary>
        public IEnumerator GMChat(Coroutine coroutine, GMChatInMessage msg)
        {
            ChatCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.GMChat(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 聊天信息
        /// </summary>
        public IEnumerator ChatChatMessage(Coroutine coroutine, ChatChatMessageInMessage msg)
        {
            ChatCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.ChatChatMessage(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 接受聊天数据
        /// </summary>
        public object ChatNotify(IEnumerable<ulong> __characterIds__, int chatType, ulong characterId, string characterName, ChatMessageContent content)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 5043;
            desc.PacketId = 0;

            var __data__ = new __RPC_Chat_ChatNotify_ARG_int32_chatType_uint64_characterId_string_characterName_ChatMessageContent_content__();
            __data__.ChatType=chatType;
            __data__.CharacterId=characterId;
            __data__.CharacterName=characterName;
            __data__.Content=content;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            var routerDesc = new ServiceDesc();
            routerDesc.FuncId = 5043;
            CharacterId2ClientId(__characterIds__, desc.Routing, routerDesc.Routing);
            if(desc.Routing.Count == 0 && routerDesc.Routing.Count == 0)
                return null;
            if(routerDesc.Routing.Count > 0)
            {
                routerDesc.PacketId = 1;
                routerDesc.Type = (int)MessageType.SCList;
                routerDesc.ServiceType = (int) ServiceType.Chat;
                routerDesc.Data = __s__.ToArray();
                Send(routerDesc);
            }
            desc.Type = (int)MessageType.SCList;
            desc.ServiceType = (int) ServiceType.Chat;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// 接受聊天数据
        /// </summary>
        public IEnumerator SendHornMessage(Coroutine coroutine, SendHornMessageInMessage msg)
        {
            ChatCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.SendHornMessage(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 聊天广播
        /// </summary>
        public object SyncChatMessage(ulong __characterId__, ulong __clientId__, int chatType, ulong characterId, string characterName, ChatMessageContent content)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 5046;
            desc.CharacterId = __characterId__;
            desc.ClientId = __clientId__;
            desc.PacketId = 0;

            var __data__ = new __RPC_Chat_SyncChatMessage_ARG_int32_chatType_uint64_characterId_string_characterName_ChatMessageContent_content__();
            __data__.ChatType=chatType;
            __data__.CharacterId=characterId;
            __data__.CharacterName=characterName;
            __data__.Content=content;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            desc.Type = (int)MessageType.SC;
            desc.ServiceType = (int) ServiceType.Chat;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// 广播服务器数据
        /// </summary>
        public object BroadcastWorldMessage(uint __serverId__, int chatType, ulong characterId, string characterName, ChatMessageContent content)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 5047;
            desc.PacketId = __serverId__;

            var __data__ = new __RPC_Chat_BroadcastWorldMessage_ARG_int32_chatType_uint64_characterId_string_characterName_ChatMessageContent_content__();
            __data__.ChatType=chatType;
            __data__.CharacterId=characterId;
            __data__.CharacterName=characterName;
            __data__.Content=content;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            desc.Type = (int)MessageType.SCServer;
            desc.ServiceType = (int) ServiceType.Chat;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// 获取最近联系人
        /// </summary>
        public IEnumerator GetRecentcontacts(Coroutine coroutine, GetRecentcontactsInMessage msg)
        {
            ChatCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.GetRecentcontacts(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 删除最近联系人
        /// </summary>
        public IEnumerator DeleteRecentcontacts(Coroutine coroutine, DeleteRecentcontactsInMessage msg)
        {
            ChatCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.DeleteRecentcontacts(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 进入频道
        /// </summary>
        public IEnumerator EnterChannel(Coroutine coroutine, EnterChannelInMessage msg)
        {
            ChatCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.EnterChannel(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 离开频道
        /// </summary>
        public IEnumerator LeaveChannel(Coroutine coroutine, LeaveChannelInMessage msg)
        {
            ChatCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.LeaveChannel(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 同城频道的广播
        /// </summary>
        public object SyncToListCityChatMessage(IEnumerable<ulong> __characterIds__, int chatType, ulong characterId, string characterName, ChatMessageContent Content, string ChannelName)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 5056;
            desc.PacketId = 0;

            var __data__ = new __RPC_Chat_SyncToListCityChatMessage_ARG_int32_chatType_uint64_characterId_string_characterName_ChatMessageContent_Content_string_ChannelName__();
            __data__.ChatType=chatType;
            __data__.CharacterId=characterId;
            __data__.CharacterName=characterName;
            __data__.Content=Content;
            __data__.ChannelName=ChannelName;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            var routerDesc = new ServiceDesc();
            routerDesc.FuncId = 5056;
            CharacterId2ClientId(__characterIds__, desc.Routing, routerDesc.Routing);
            if(desc.Routing.Count == 0 && routerDesc.Routing.Count == 0)
                return null;
            if(routerDesc.Routing.Count > 0)
            {
                routerDesc.PacketId = 1;
                routerDesc.Type = (int)MessageType.SCList;
                routerDesc.ServiceType = (int) ServiceType.Chat;
                routerDesc.Data = __s__.ToArray();
                Send(routerDesc);
            }
            desc.Type = (int)MessageType.SCList;
            desc.ServiceType = (int) ServiceType.Chat;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// 请求直播间信息
        /// </summary>
        public IEnumerator ApplyAnchorRoomInfo(Coroutine coroutine, ApplyAnchorRoomInfoInMessage msg)
        {
            ChatCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.ApplyAnchorRoomInfo(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 主播送礼
        /// </summary>
        public IEnumerator PresentGift(Coroutine coroutine, PresentGiftInMessage msg)
        {
            ChatCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.PresentGift(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// </summary>
        public object BroadcastAnchorOnline(uint __serverId__, string charName, int online)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 5510;
            desc.PacketId = __serverId__;

            var __data__ = new __RPC_Chat_BroadcastAnchorOnline_ARG_string_charName_int32_online__();
            __data__.CharName=charName;
            __data__.Online=online;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            desc.Type = (int)MessageType.SCServer;
            desc.ServiceType = (int) ServiceType.Chat;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// 通知所有在线客户端播放玫瑰特效
        /// </summary>
        public object NotifyChatRoseEffectChange(int chatType)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 5511;
            desc.PacketId = 0;

            var __data__ = new __RPC_Chat_NotifyChatRoseEffectChange_ARG_int32_chatType__();
            __data__.ChatType=chatType;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            desc.Type = (int)MessageType.SCAll;
            desc.ServiceType = (int) ServiceType.Chat;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// 主播进入直播间
        /// </summary>
        public IEnumerator NotifyAnchorEnterRoomChange(Coroutine coroutine, NotifyAnchorEnterRoomChangeInMessage msg)
        {
            ChatCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.NotifyAnchorEnterRoomChange(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 同步客户端主播已进入房间
        /// </summary>
        public object BroadcastAnchorEnterRoom(string charName)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 5513;
            desc.PacketId = 0;

            var __data__ = new __RPC_Chat_BroadcastAnchorEnterRoom_ARG_string_charName__();
            __data__.CharName=charName;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            desc.Type = (int)MessageType.SCAll;
            desc.ServiceType = (int) ServiceType.Chat;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// 主播推出直播间
        /// </summary>
        public IEnumerator AnchorExitRoom(Coroutine coroutine, AnchorExitRoomInMessage msg)
        {
            ChatCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.AnchorExitRoom(coroutine, proxy, msg);
            }
            return null;
        }

        protected override void DispatchMessage(MessageRecievedEvent evt)
        {
            switch (evt.Message.FuncId)
            {
                case 5000:
                {
                    var msg = new PrepareDataForEnterGameInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.PrepareDataForEnterGame(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 5001:
                {
                    var msg = new PrepareDataForCreateCharacterInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.PrepareDataForCreateCharacter(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 5002:
                {
                    var msg = new PrepareDataForCommonUseInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.PrepareDataForCommonUse(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 5003:
                {
                    var msg = new PrepareDataForLogoutInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.PrepareDataForLogout(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 5015:
                {
                    var msg = new CreateCharacterInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.CreateCharacter(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 5016:
                {
                    var msg = new DelectCharacterInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.DelectCharacter(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 5031:
                {
                    var msg = new CheckConnectedInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.CheckConnected(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 5032:
                {
                    var msg = new CheckLostInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.CheckLost(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 5033:
                {
                    var msg = new QueryStatusInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.QueryStatus(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 5041:
                {
                    var msg = new GMChatInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => GMChat(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 5042:
                {
                    var msg = new ChatChatMessageInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => ChatChatMessage(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 5044:
                {
                    var msg = new SendHornMessageInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => SendHornMessage(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 5048:
                {
                    var msg = new ServerGMCommandInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.ServerGMCommand(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 5049:
                {
                    var msg = new ReadyToEnterInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.ReadyToEnter(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 5050:
                {
                    var msg = new UpdateServerInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.UpdateServer(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 5051:
                {
                    var msg = new GetRecentcontactsInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => GetRecentcontacts(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 5052:
                {
                    var msg = new DeleteRecentcontactsInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => DeleteRecentcontacts(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 5053:
                {
                    var msg = new AddRecentcontactsInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.AddRecentcontacts(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 5054:
                {
                    var msg = new EnterChannelInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => EnterChannel(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 5055:
                {
                    var msg = new LeaveChannelInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => LeaveChannel(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 5057:
                {
                    var msg = new CacheChatMessageInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.CacheChatMessage(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 5501:
                {
                    var msg = new SSNotifyCharacterOnConnetInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.SSNotifyCharacterOnConnet(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 5503:
                {
                    var msg = new BSNotifyCharacterOnLostInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.BSNotifyCharacterOnLost(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 5504:
                {
                    var msg = new SilenceInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.Silence(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 5505:
                {
                    var msg = new GetSilenceStateInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.GetSilenceState(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 5506:
                {
                    var msg = new ApplyAnchorRoomInfoInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => ApplyAnchorRoomInfo(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 5507:
                {
                    var msg = new SSBroadcastAllServerMsgInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.SSBroadcastAllServerMsg(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 5508:
                {
                    var msg = new SSGetCurrentAnchorInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.SSGetCurrentAnchor(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 5509:
                {
                    var msg = new PresentGiftInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => PresentGift(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 5512:
                {
                    var msg = new NotifyAnchorEnterRoomChangeInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => NotifyAnchorEnterRoomChange(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 5514:
                {
                    var msg = new AnchorExitRoomInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => AnchorExitRoom(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 5900:
                {
                    var msg = new GMCommandInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.GMCommand(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 5901:
                {
                    var msg = new CloneCharacterDbByIdInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.CloneCharacterDbById(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 5902:
                {
                    var msg = new NotifyPlayerEnterGameInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.NotifyPlayerEnterGame(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 5903:
                {
                    var msg = new AddPlayerToChatMonitorInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.AddPlayerToChatMonitor(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 5904:
                {
                    var msg = new GetAnchorIsInRoomInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.GetAnchorIsInRoom(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 5905:
                {
                    var msg = new NodifyModifyPlayerNameInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.NodifyModifyPlayerName(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                default:
                    break;
            }
        }
    }
    public class PrepareDataForEnterGameInMessage : InMessage
    {
        public PrepareDataForEnterGameInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Chat_PrepareDataForEnterGame_ARG_int32_serverId__;

            mResponse = new __RPC_Chat_PrepareDataForEnterGame_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Chat_PrepareDataForEnterGame_ARG_int32_serverId__ Request { get; private set; }

        private __RPC_Chat_PrepareDataForEnterGame_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public PrepareDataForEnterGameInMessage Clone()
        { 
            return new PrepareDataForEnterGameInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class PrepareDataForCreateCharacterInMessage : InMessage
    {
        public PrepareDataForCreateCharacterInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Chat_PrepareDataForCreateCharacter_ARG_int32_type__;

            mResponse = new __RPC_Chat_PrepareDataForCreateCharacter_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Chat_PrepareDataForCreateCharacter_ARG_int32_type__ Request { get; private set; }

        private __RPC_Chat_PrepareDataForCreateCharacter_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public PrepareDataForCreateCharacterInMessage Clone()
        { 
            return new PrepareDataForCreateCharacterInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class PrepareDataForCommonUseInMessage : InMessage
    {
        public PrepareDataForCommonUseInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Chat_PrepareDataForCommonUse_ARG_uint32_placeholder__;

            mResponse = new __RPC_Chat_PrepareDataForCommonUse_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Chat_PrepareDataForCommonUse_ARG_uint32_placeholder__ Request { get; private set; }

        private __RPC_Chat_PrepareDataForCommonUse_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public PrepareDataForCommonUseInMessage Clone()
        { 
            return new PrepareDataForCommonUseInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class PrepareDataForLogoutInMessage : InMessage
    {
        public PrepareDataForLogoutInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Chat_PrepareDataForLogout_ARG_uint32_placeholder__;

            mResponse = new __RPC_Chat_PrepareDataForLogout_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Chat_PrepareDataForLogout_ARG_uint32_placeholder__ Request { get; private set; }

        private __RPC_Chat_PrepareDataForLogout_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public PrepareDataForLogoutInMessage Clone()
        { 
            return new PrepareDataForLogoutInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class CreateCharacterInMessage : InMessage
    {
        public CreateCharacterInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Chat_CreateCharacter_ARG_int32_type__;

            mResponse = new __RPC_Chat_CreateCharacter_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Chat_CreateCharacter_ARG_int32_type__ Request { get; private set; }

        private __RPC_Chat_CreateCharacter_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public CreateCharacterInMessage Clone()
        { 
            return new CreateCharacterInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class DelectCharacterInMessage : InMessage
    {
        public DelectCharacterInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Chat_DelectCharacter_ARG_int32_type__;

            mResponse = new __RPC_Chat_DelectCharacter_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Chat_DelectCharacter_ARG_int32_type__ Request { get; private set; }

        private __RPC_Chat_DelectCharacter_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public DelectCharacterInMessage Clone()
        { 
            return new DelectCharacterInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SBGetAllOnlineCharacterInServerInMessage : InMessage
    {
        public SBGetAllOnlineCharacterInServerInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Chat_SBGetAllOnlineCharacterInServer_ARG_int32_serverId__;

            mResponse = new __RPC_Chat_SBGetAllOnlineCharacterInServer_RET_Uint64Array__();
            mResponse.ReturnValue = new Uint64Array();
        }


        public __RPC_Chat_SBGetAllOnlineCharacterInServer_ARG_int32_serverId__ Request { get; private set; }

        private __RPC_Chat_SBGetAllOnlineCharacterInServer_RET_Uint64Array__ mResponse;
        public Uint64Array Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public SBGetAllOnlineCharacterInServerInMessage Clone()
        { 
            return new SBGetAllOnlineCharacterInServerInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class CheckConnectedInMessage : InMessage
    {
        public CheckConnectedInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Chat_CheckConnected_ARG_uint64_characterId__;

            mResponse = new __RPC_Chat_CheckConnected_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Chat_CheckConnected_ARG_uint64_characterId__ Request { get; private set; }

        private __RPC_Chat_CheckConnected_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public CheckConnectedInMessage Clone()
        { 
            return new CheckConnectedInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class CheckLostInMessage : InMessage
    {
        public CheckLostInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Chat_CheckLost_ARG_uint64_characterId__;

            mResponse = new __RPC_Chat_CheckLost_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Chat_CheckLost_ARG_uint64_characterId__ Request { get; private set; }

        private __RPC_Chat_CheckLost_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public CheckLostInMessage Clone()
        { 
            return new CheckLostInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class QueryStatusInMessage : InMessage
    {
        public QueryStatusInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Chat_QueryStatus_ARG_uint32_placeholder__;

            mResponse = new __RPC_Chat_QueryStatus_RET_ChatServerStatus__();
            mResponse.ReturnValue = new ChatServerStatus();
        }


        public __RPC_Chat_QueryStatus_ARG_uint32_placeholder__ Request { get; private set; }

        private __RPC_Chat_QueryStatus_RET_ChatServerStatus__ mResponse;
        public ChatServerStatus Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public QueryStatusInMessage Clone()
        { 
            return new QueryStatusInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class QueryBrokerStatusInMessage : InMessage
    {
        public QueryBrokerStatusInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Chat_QueryBrokerStatus_ARG_uint32_placeholder__;

            mResponse = new __RPC_Chat_QueryBrokerStatus_RET_CommonBrokerStatus__();
            mResponse.ReturnValue = new CommonBrokerStatus();
        }


        public __RPC_Chat_QueryBrokerStatus_ARG_uint32_placeholder__ Request { get; private set; }

        private __RPC_Chat_QueryBrokerStatus_RET_CommonBrokerStatus__ mResponse;
        public CommonBrokerStatus Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public QueryBrokerStatusInMessage Clone()
        { 
            return new QueryBrokerStatusInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class GMChatInMessage : InMessage
    {
        public GMChatInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Chat_GMChat_ARG_string_commond__;

            mResponse = new __RPC_Chat_GMChat_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Chat_GMChat_ARG_string_commond__ Request { get; private set; }

        private __RPC_Chat_GMChat_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public GMChatInMessage Clone()
        { 
            return new GMChatInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class ChatChatMessageInMessage : InMessage
    {
        public ChatChatMessageInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Chat_ChatChatMessage_ARG_int32_chatType_ChatMessageContent_Content_uint64_characterId__;
            if (Request.Content == null) throw new ArgumentNullException("Content is null.");

            mResponse = new __RPC_Chat_ChatChatMessage_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Chat_ChatChatMessage_ARG_int32_chatType_ChatMessageContent_Content_uint64_characterId__ Request { get; private set; }

        private __RPC_Chat_ChatChatMessage_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public ChatChatMessageInMessage Clone()
        { 
            return new ChatChatMessageInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SendHornMessageInMessage : InMessage
    {
        public SendHornMessageInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Chat_SendHornMessage_ARG_uint32_serverId_int32_chatType_uint64_characterId_string_characterName_ChatMessageContent_content__;
            if (Request.Content == null) throw new ArgumentNullException("Content is null.");

            mResponse = new __RPC_Chat_SendHornMessage_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Chat_SendHornMessage_ARG_uint32_serverId_int32_chatType_uint64_characterId_string_characterName_ChatMessageContent_content__ Request { get; private set; }

        private __RPC_Chat_SendHornMessage_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public SendHornMessageInMessage Clone()
        { 
            return new SendHornMessageInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class ServerGMCommandInMessage : InMessage
    {
        public ServerGMCommandInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Chat_ServerGMCommand_ARG_string_cmd_string_param__;

        }


        public __RPC_Chat_ServerGMCommand_ARG_string_cmd_string_param__ Request { get; private set; }

        public ServerGMCommandInMessage Clone()
        { 
            return new ServerGMCommandInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class ReadyToEnterInMessage : InMessage
    {
        public ReadyToEnterInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Chat_ReadyToEnter_ARG_int32_placeholder__;

            mResponse = new __RPC_Chat_ReadyToEnter_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Chat_ReadyToEnter_ARG_int32_placeholder__ Request { get; private set; }

        private __RPC_Chat_ReadyToEnter_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public ReadyToEnterInMessage Clone()
        { 
            return new ReadyToEnterInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class UpdateServerInMessage : InMessage
    {
        public UpdateServerInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Chat_UpdateServer_ARG_int32_placeholder__;

        }


        public __RPC_Chat_UpdateServer_ARG_int32_placeholder__ Request { get; private set; }

        public UpdateServerInMessage Clone()
        { 
            return new UpdateServerInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class GetRecentcontactsInMessage : InMessage
    {
        public GetRecentcontactsInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Chat_GetRecentcontacts_ARG_int32_placeholder__;

            mResponse = new __RPC_Chat_GetRecentcontacts_RET_PlayerHeadInfoMsgList__();
            mResponse.ReturnValue = new PlayerHeadInfoMsgList();
        }


        public __RPC_Chat_GetRecentcontacts_ARG_int32_placeholder__ Request { get; private set; }

        private __RPC_Chat_GetRecentcontacts_RET_PlayerHeadInfoMsgList__ mResponse;
        public PlayerHeadInfoMsgList Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public GetRecentcontactsInMessage Clone()
        { 
            return new GetRecentcontactsInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class DeleteRecentcontactsInMessage : InMessage
    {
        public DeleteRecentcontactsInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Chat_DeleteRecentcontacts_ARG_uint64_characterId__;

            mResponse = new __RPC_Chat_DeleteRecentcontacts_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Chat_DeleteRecentcontacts_ARG_uint64_characterId__ Request { get; private set; }

        private __RPC_Chat_DeleteRecentcontacts_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public DeleteRecentcontactsInMessage Clone()
        { 
            return new DeleteRecentcontactsInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class AddRecentcontactsInMessage : InMessage
    {
        public AddRecentcontactsInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Chat_AddRecentcontacts_ARG_LogicSimpleData_simpleData__;
            if (Request.SimpleData == null) throw new ArgumentNullException("SimpleData is null.");

        }


        public __RPC_Chat_AddRecentcontacts_ARG_LogicSimpleData_simpleData__ Request { get; private set; }

        public AddRecentcontactsInMessage Clone()
        { 
            return new AddRecentcontactsInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class EnterChannelInMessage : InMessage
    {
        public EnterChannelInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Chat_EnterChannel_ARG_uint64_channelId_string_password__;

            mResponse = new __RPC_Chat_EnterChannel_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Chat_EnterChannel_ARG_uint64_channelId_string_password__ Request { get; private set; }

        private __RPC_Chat_EnterChannel_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public EnterChannelInMessage Clone()
        { 
            return new EnterChannelInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class LeaveChannelInMessage : InMessage
    {
        public LeaveChannelInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Chat_LeaveChannel_ARG_uint64_channelId__;

            mResponse = new __RPC_Chat_LeaveChannel_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Chat_LeaveChannel_ARG_uint64_channelId__ Request { get; private set; }

        private __RPC_Chat_LeaveChannel_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public LeaveChannelInMessage Clone()
        { 
            return new LeaveChannelInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class CacheChatMessageInMessage : InMessage
    {
        public CacheChatMessageInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Chat_CacheChatMessage_ARG_int32_chatType_uint64_characterId_string_characterName_ChatMessageContent_content__;
            if (Request.Content == null) throw new ArgumentNullException("Content is null.");

        }


        public __RPC_Chat_CacheChatMessage_ARG_int32_chatType_uint64_characterId_string_characterName_ChatMessageContent_content__ Request { get; private set; }

        public CacheChatMessageInMessage Clone()
        { 
            return new CacheChatMessageInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class SBCleanClientCharacterDataInMessage : InMessage
    {
        public SBCleanClientCharacterDataInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Chat_SBCleanClientCharacterData_ARG_uint64_clientId_uint64_characterId__;

        }


        public __RPC_Chat_SBCleanClientCharacterData_ARG_uint64_clientId_uint64_characterId__ Request { get; private set; }

        public SBCleanClientCharacterDataInMessage Clone()
        { 
            return new SBCleanClientCharacterDataInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class SSNotifyCharacterOnConnetInMessage : InMessage
    {
        public SSNotifyCharacterOnConnetInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Chat_SSNotifyCharacterOnConnet_ARG_uint64_clientId_uint64_characterId__;

            mResponse = new __RPC_Chat_SSNotifyCharacterOnConnet_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Chat_SSNotifyCharacterOnConnet_ARG_uint64_clientId_uint64_characterId__ Request { get; private set; }

        private __RPC_Chat_SSNotifyCharacterOnConnet_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public SSNotifyCharacterOnConnetInMessage Clone()
        { 
            return new SSNotifyCharacterOnConnetInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class BSNotifyCharacterOnLostInMessage : InMessage
    {
        public BSNotifyCharacterOnLostInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Chat_BSNotifyCharacterOnLost_ARG_uint64_clientId_uint64_characterId__;

        }


        public __RPC_Chat_BSNotifyCharacterOnLost_ARG_uint64_clientId_uint64_characterId__ Request { get; private set; }

        public BSNotifyCharacterOnLostInMessage Clone()
        { 
            return new BSNotifyCharacterOnLostInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class SilenceInMessage : InMessage
    {
        public SilenceInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Chat_Silence_ARG_uint32_mask__;

            mResponse = new __RPC_Chat_Silence_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Chat_Silence_ARG_uint32_mask__ Request { get; private set; }

        private __RPC_Chat_Silence_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public SilenceInMessage Clone()
        { 
            return new SilenceInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class GetSilenceStateInMessage : InMessage
    {
        public GetSilenceStateInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Chat_GetSilenceState_ARG_int32_placeholder__;

            mResponse = new __RPC_Chat_GetSilenceState_RET_uint32__();
            mResponse.ReturnValue = new uint();
        }


        public __RPC_Chat_GetSilenceState_ARG_int32_placeholder__ Request { get; private set; }

        private __RPC_Chat_GetSilenceState_RET_uint32__ mResponse;
        public uint Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public GetSilenceStateInMessage Clone()
        { 
            return new GetSilenceStateInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class ApplyAnchorRoomInfoInMessage : InMessage
    {
        public ApplyAnchorRoomInfoInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Chat_ApplyAnchorRoomInfo_ARG_int32_placeholder__;

            mResponse = new __RPC_Chat_ApplyAnchorRoomInfo_RET_MsgAnchorInfo__();
            mResponse.ReturnValue = new MsgAnchorInfo();
        }


        public __RPC_Chat_ApplyAnchorRoomInfo_ARG_int32_placeholder__ Request { get; private set; }

        private __RPC_Chat_ApplyAnchorRoomInfo_RET_MsgAnchorInfo__ mResponse;
        public MsgAnchorInfo Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public ApplyAnchorRoomInfoInMessage Clone()
        { 
            return new ApplyAnchorRoomInfoInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SSBroadcastAllServerMsgInMessage : InMessage
    {
        public SSBroadcastAllServerMsgInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Chat_SSBroadcastAllServerMsg_ARG_int32_chatType_string_charName_ChatMessageContent_content__;
            if (Request.Content == null) throw new ArgumentNullException("Content is null.");

            mResponse = new __RPC_Chat_SSBroadcastAllServerMsg_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Chat_SSBroadcastAllServerMsg_ARG_int32_chatType_string_charName_ChatMessageContent_content__ Request { get; private set; }

        private __RPC_Chat_SSBroadcastAllServerMsg_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public SSBroadcastAllServerMsgInMessage Clone()
        { 
            return new SSBroadcastAllServerMsgInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SSGetCurrentAnchorInMessage : InMessage
    {
        public SSGetCurrentAnchorInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Chat_SSGetCurrentAnchor_ARG_int32_placeholder__;

            mResponse = new __RPC_Chat_SSGetCurrentAnchor_RET_uint64__();
            mResponse.ReturnValue = new ulong();
        }


        public __RPC_Chat_SSGetCurrentAnchor_ARG_int32_placeholder__ Request { get; private set; }

        private __RPC_Chat_SSGetCurrentAnchor_RET_uint64__ mResponse;
        public ulong Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public SSGetCurrentAnchorInMessage Clone()
        { 
            return new SSGetCurrentAnchorInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class PresentGiftInMessage : InMessage
    {
        public PresentGiftInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Chat_PresentGift_ARG_int32_itemId_int32_count__;

            mResponse = new __RPC_Chat_PresentGift_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Chat_PresentGift_ARG_int32_itemId_int32_count__ Request { get; private set; }

        private __RPC_Chat_PresentGift_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public PresentGiftInMessage Clone()
        { 
            return new PresentGiftInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class NotifyAnchorEnterRoomChangeInMessage : InMessage
    {
        public NotifyAnchorEnterRoomChangeInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Chat_NotifyAnchorEnterRoomChange_ARG_int32_chat__;

            mResponse = new __RPC_Chat_NotifyAnchorEnterRoomChange_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Chat_NotifyAnchorEnterRoomChange_ARG_int32_chat__ Request { get; private set; }

        private __RPC_Chat_NotifyAnchorEnterRoomChange_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public NotifyAnchorEnterRoomChangeInMessage Clone()
        { 
            return new NotifyAnchorEnterRoomChangeInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class AnchorExitRoomInMessage : InMessage
    {
        public AnchorExitRoomInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Chat_AnchorExitRoom_ARG_int32_chat__;

        }


        public __RPC_Chat_AnchorExitRoom_ARG_int32_chat__ Request { get; private set; }

        public AnchorExitRoomInMessage Clone()
        { 
            return new AnchorExitRoomInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class GMCommandInMessage : InMessage
    {
        public GMCommandInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Chat_GMCommand_ARG_StringArray_commonds__;
            if (Request.Commonds == null) throw new ArgumentNullException("Commonds is null.");

            mResponse = new __RPC_Chat_GMCommand_RET_Int32Array__();
            mResponse.ReturnValue = new Int32Array();
        }


        public __RPC_Chat_GMCommand_ARG_StringArray_commonds__ Request { get; private set; }

        private __RPC_Chat_GMCommand_RET_Int32Array__ mResponse;
        public Int32Array Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public GMCommandInMessage Clone()
        { 
            return new GMCommandInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class CloneCharacterDbByIdInMessage : InMessage
    {
        public CloneCharacterDbByIdInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Chat_CloneCharacterDbById_ARG_uint64_fromId_uint64_toId__;

            mResponse = new __RPC_Chat_CloneCharacterDbById_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Chat_CloneCharacterDbById_ARG_uint64_fromId_uint64_toId__ Request { get; private set; }

        private __RPC_Chat_CloneCharacterDbById_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public CloneCharacterDbByIdInMessage Clone()
        { 
            return new CloneCharacterDbByIdInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class NotifyPlayerEnterGameInMessage : InMessage
    {
        public NotifyPlayerEnterGameInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Chat_NotifyPlayerEnterGame_ARG_MsgChatMoniterData_data__;
            if (Request.Data == null) throw new ArgumentNullException("Data is null.");

        }


        public __RPC_Chat_NotifyPlayerEnterGame_ARG_MsgChatMoniterData_data__ Request { get; private set; }

        public NotifyPlayerEnterGameInMessage Clone()
        { 
            return new NotifyPlayerEnterGameInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class AddPlayerToChatMonitorInMessage : InMessage
    {
        public AddPlayerToChatMonitorInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Chat_AddPlayerToChatMonitor_ARG_int32_placeholder__;

        }


        public __RPC_Chat_AddPlayerToChatMonitor_ARG_int32_placeholder__ Request { get; private set; }

        public AddPlayerToChatMonitorInMessage Clone()
        { 
            return new AddPlayerToChatMonitorInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class GetAnchorIsInRoomInMessage : InMessage
    {
        public GetAnchorIsInRoomInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Chat_GetAnchorIsInRoom_ARG_int32_placeholder__;

            mResponse = new __RPC_Chat_GetAnchorIsInRoom_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Chat_GetAnchorIsInRoom_ARG_int32_placeholder__ Request { get; private set; }

        private __RPC_Chat_GetAnchorIsInRoom_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public GetAnchorIsInRoomInMessage Clone()
        { 
            return new GetAnchorIsInRoomInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class NodifyModifyPlayerNameInMessage : InMessage
    {
        public NodifyModifyPlayerNameInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Chat_NodifyModifyPlayerName_ARG_uint64_characterId_string_modifyName__;

        }


        public __RPC_Chat_NodifyModifyPlayerName_ARG_uint64_characterId_string_modifyName__ Request { get; private set; }

        public NodifyModifyPlayerNameInMessage Clone()
        { 
            return new NodifyModifyPlayerNameInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public interface IChatCharacterProxy
    {
        /// <summary>
        /// GM命令数据
        /// </summary>
        IEnumerator GMChat(Coroutine coroutine, ChatCharacterProxy _this, GMChatInMessage msg);
        /// <summary>
        /// 聊天信息
        /// </summary>
        IEnumerator ChatChatMessage(Coroutine coroutine, ChatCharacterProxy _this, ChatChatMessageInMessage msg);
        /// <summary>
        /// 接受聊天数据
        /// </summary>
        IEnumerator SendHornMessage(Coroutine coroutine, ChatCharacterProxy _this, SendHornMessageInMessage msg);
        /// <summary>
        /// 获取最近联系人
        /// </summary>
        IEnumerator GetRecentcontacts(Coroutine coroutine, ChatCharacterProxy _this, GetRecentcontactsInMessage msg);
        /// <summary>
        /// 删除最近联系人
        /// </summary>
        IEnumerator DeleteRecentcontacts(Coroutine coroutine, ChatCharacterProxy _this, DeleteRecentcontactsInMessage msg);
        /// <summary>
        /// 进入频道
        /// </summary>
        IEnumerator EnterChannel(Coroutine coroutine, ChatCharacterProxy _this, EnterChannelInMessage msg);
        /// <summary>
        /// 离开频道
        /// </summary>
        IEnumerator LeaveChannel(Coroutine coroutine, ChatCharacterProxy _this, LeaveChannelInMessage msg);
        /// <summary>
        /// 请求直播间信息
        /// </summary>
        IEnumerator ApplyAnchorRoomInfo(Coroutine coroutine, ChatCharacterProxy _this, ApplyAnchorRoomInfoInMessage msg);
        /// <summary>
        /// 主播送礼
        /// </summary>
        IEnumerator PresentGift(Coroutine coroutine, ChatCharacterProxy _this, PresentGiftInMessage msg);
        /// <summary>
        /// 主播进入直播间
        /// </summary>
        IEnumerator NotifyAnchorEnterRoomChange(Coroutine coroutine, ChatCharacterProxy _this, NotifyAnchorEnterRoomChangeInMessage msg);
        /// <summary>
        /// 主播推出直播间
        /// </summary>
        IEnumerator AnchorExitRoom(Coroutine coroutine, ChatCharacterProxy _this, AnchorExitRoomInMessage msg);
        IEnumerator OnConnected(Coroutine coroutine, ChatCharacterProxy _this, uint packId);
        IEnumerator OnLost(Coroutine coroutine, ChatCharacterProxy _this, uint packId);
        bool OnSyncRequested(ChatCharacterProxy _this, ulong characterId, uint syncId);
    }

    public class ChatCharacterProxy
    {
        public ulong CharacterId { get; private set; }
        public ulong ClientId { get; private set; }
        public ChatService Service { get; private set; }

        public ChatCharacterProxy(ChatService service, ulong characterId, ulong clientId)
        {
            CharacterId = characterId;
            ClientId = clientId;
            Service = service;
            mSyncCenter.ServiceType = ServiceType.Logic;
        }

        private DataSyncCenter mSyncCenter = new DataSyncCenter();
        public DataSyncCenter SyncCenter { get { return mSyncCenter; } }

        public void Sync()
        {
            Service.Sync(ClientId, mSyncCenter);
        }

        /// <summary>
        /// 接受聊天数据
        /// </summary>
        public object ChatNotify(IEnumerable<ulong> __characterIds__, int chatType, ulong characterId, string characterName, ChatMessageContent content)
        {
            Service.ChatNotify(__characterIds__, chatType, characterId, characterName, content);
            return null;
        }
        /// <summary>
        /// 聊天广播
        /// </summary>
        public object SyncChatMessage(int chatType, ulong characterId, string characterName, ChatMessageContent content)
        {
            Service.SyncChatMessage(CharacterId, ClientId,chatType, characterId, characterName, content);
            return null;
        }
        /// <summary>
        /// 广播服务器数据
        /// </summary>
        public object BroadcastWorldMessage(uint __serverId__, int chatType, ulong characterId, string characterName, ChatMessageContent content)
        {
            Service.BroadcastWorldMessage(__serverId__, chatType, characterId, characterName, content);
            return null;
        }
        /// <summary>
        /// 同城频道的广播
        /// </summary>
        public object SyncToListCityChatMessage(IEnumerable<ulong> __characterIds__, int chatType, ulong characterId, string characterName, ChatMessageContent Content, string ChannelName)
        {
            Service.SyncToListCityChatMessage(__characterIds__, chatType, characterId, characterName, Content, ChannelName);
            return null;
        }
        /// <summary>
        /// </summary>
        public object BroadcastAnchorOnline(uint __serverId__, string charName, int online)
        {
            Service.BroadcastAnchorOnline(__serverId__, charName, online);
            return null;
        }
        /// <summary>
        /// 通知所有在线客户端播放玫瑰特效
        /// </summary>
        public object NotifyChatRoseEffectChange(int chatType)
        {
            Service.NotifyChatRoseEffectChange(chatType);
            return null;
        }
        /// <summary>
        /// 同步客户端主播已进入房间
        /// </summary>
        public object BroadcastAnchorEnterRoom(string charName)
        {
            Service.BroadcastAnchorEnterRoom(charName);
            return null;
        }
        public object Wait(Coroutine coroutine, TimeSpan timeSpan)
        {
            return Service.Wait(coroutine, timeSpan);
        }
    }
}
