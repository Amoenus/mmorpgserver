// Generated by the rpc compiler.  DO NOT EDIT!
using System;
using System.Collections;
using System.IO;
using Scorpion;
using System.Collections.Generic;
using ProtoBuf;
using DataContract;

#pragma warning disable 0162,0108
namespace SceneServerService
{

    public interface ISceneService
    {
        /// <summary>
        /// </summary>
        IEnumerator BSCreateScene(Coroutine coroutine, SceneService _this, BSCreateSceneInMessage msg);
        /// <summary>
        /// </summary>
        IEnumerator UnloadData(Coroutine coroutine, SceneService _this, UnloadDataInMessage msg);
        /// <summary>
        /// </summary>
        IEnumerator PrepareDataForEnterGame(Coroutine coroutine, SceneService _this, PrepareDataForEnterGameInMessage msg);
        /// <summary>
        /// </summary>
        IEnumerator PrepareDataForCreateCharacter(Coroutine coroutine, SceneService _this, PrepareDataForCreateCharacterInMessage msg);
        /// <summary>
        /// </summary>
        IEnumerator PrepareDataForCommonUse(Coroutine coroutine, SceneService _this, PrepareDataForCommonUseInMessage msg);
        /// <summary>
        /// </summary>
        IEnumerator PrepareDataForLogout(Coroutine coroutine, SceneService _this, PrepareDataForLogoutInMessage msg);
        /// <summary>
        /// </summary>
        IEnumerator CreateCharacter(Coroutine coroutine, SceneService _this, CreateCharacterInMessage msg);
        /// <summary>
        /// </summary>
        IEnumerator DelectCharacter(Coroutine coroutine, SceneService _this, DelectCharacterInMessage msg);
        /// <summary>
        /// 
        /// </summary>
        IEnumerator SSEnterScene(Coroutine coroutine, SceneService _this, SSEnterSceneInMessage msg);
        /// <summary>
        /// 获得Scene的Simple数据
        /// </summary>
        IEnumerator GetSceneSimpleData(Coroutine coroutine, SceneService _this, GetSceneSimpleDataInMessage msg);
        /// <summary>
        /// 检查客户端是否已经连接到对应服务器，如果对方没有Connected，这个函数会卡住直到相应的客户端Connected
        /// </summary>
        IEnumerator CheckConnected(Coroutine coroutine, SceneService _this, CheckConnectedInMessage msg);
        /// <summary>
        /// 检查相应客户端连接是否已经断开，如果对方没有Lost，这个函数会卡住知道对方Lost
        /// </summary>
        IEnumerator CheckLost(Coroutine coroutine, SceneService _this, CheckLostInMessage msg);
        /// <summary>
        /// 查询服务器状态
        /// </summary>
        IEnumerator QueryStatus(Coroutine coroutine, SceneService _this, QueryStatusInMessage msg);
        /// <summary>
        /// 请求进入副本
        /// </summary>
        IEnumerator AskEnterDungeon(Coroutine coroutine, SceneService _this, AskEnterDungeonInMessage msg);
        /// <summary>
        /// </summary>
        IEnumerator NotifyPlayerPickUpFubenReward(Coroutine coroutine, SceneService _this, NotifyPlayerPickUpFubenRewardInMessage msg);
        /// <summary>
        /// login请求准备数据完毕请求scene进入场景
        /// </summary>
        IEnumerator LoginEnterScene(Coroutine coroutine, SceneService _this, LoginEnterSceneInMessage msg);
        /// <summary>
        /// 同步装备变化
        /// </summary>
        IEnumerator SceneEquipChange(Coroutine coroutine, SceneService _this, SceneEquipChangeInMessage msg);
        /// <summary>
        /// 同步技能变化
        /// </summary>
        IEnumerator SceneSkillChange(Coroutine coroutine, SceneService _this, SceneSkillChangeInMessage msg);
        /// <summary>
        /// 同步装备的技能
        /// </summary>
        IEnumerator SceneEquipSkill(Coroutine coroutine, SceneService _this, SceneEquipSkillInMessage msg);
        /// <summary>
        /// 同步天赋变化
        /// </summary>
        IEnumerator SceneInnateChange(Coroutine coroutine, SceneService _this, SceneInnateChangeInMessage msg);
        /// <summary>
        /// 同步图鉴属性
        /// </summary>
        IEnumerator SceneBookAttrChange(Coroutine coroutine, SceneService _this, SceneBookAttrChangeInMessage msg);
        /// <summary>
        /// 组队消息
        /// </summary>
        IEnumerator SceneTeamMessage(Coroutine coroutine, SceneService _this, SceneTeamMessageInMessage msg);
        /// <summary>
        /// 使用技能道具
        /// </summary>
        IEnumerator UseSkillItem(Coroutine coroutine, SceneService _this, UseSkillItemInMessage msg);
        /// <summary>
        /// 广播表格重载
        /// </summary>
        IEnumerator ServerGMCommand(Coroutine coroutine, SceneService _this, ServerGMCommandInMessage msg);
        /// <summary>
        /// 获得数据接口
        /// </summary>
        IEnumerator FindCharacterName(Coroutine coroutine, SceneService _this, FindCharacterNameInMessage msg);
        /// <summary>
        /// 获得数据接口
        /// </summary>
        IEnumerator FindCharacterFriend(Coroutine coroutine, SceneService _this, FindCharacterFriendInMessage msg);
        /// <summary>
        /// 同步家园数据到场景服务器
        /// </summary>
        IEnumerator NotifyScenePlayerCityData(Coroutine coroutine, SceneService _this, NotifyScenePlayerCityDataInMessage msg);
        /// <summary>
        /// Logic玩家希望进入天梯场景
        /// </summary>
        IEnumerator SSGoToSceneAndPvP(Coroutine coroutine, SceneService _this, SSGoToSceneAndPvPInMessage msg);
        /// <summary>
        /// 通知场景这些人的坐标归属
        /// </summary>
        IEnumerator SSPvPSceneCampSet(Coroutine coroutine, SceneService _this, SSPvPSceneCampSetInMessage msg);
        /// <summary>
        /// 通知各Scene服务器
        /// </summary>
        IEnumerator NotifyCreateSpeMonster(Coroutine coroutine, SceneService _this, NotifyCreateSpeMonsterInMessage msg);
        /// <summary>
        /// 获得某人的SceneData
        /// </summary>
        IEnumerator SSGetCharacterSceneData(Coroutine coroutine, SceneService _this, SSGetCharacterSceneDataInMessage msg);
        /// <summary>
        /// 通知各个Scene，世界boss死了
        /// </summary>
        IEnumerator BossDie(Coroutine coroutine, SceneService _this, BossDieInMessage msg);
        /// <summary>
        /// 查询服务器状态，是否可以进入
        /// </summary>
        IEnumerator ReadyToEnter(Coroutine coroutine, SceneService _this, ReadyToEnterInMessage msg);
        /// <summary>
        /// 通知好友上线了，并且取SimpleData
        /// </summary>
        IEnumerator GetFriendSceneSimpleData(Coroutine coroutine, SceneService _this, GetFriendSceneSimpleDataInMessage msg);
        /// <summary>
        /// 通知添加好友了
        /// </summary>
        IEnumerator SendAddFriend(Coroutine coroutine, SceneService _this, SendAddFriendInMessage msg);
        /// <summary>
        /// 通知删除好友了
        /// </summary>
        IEnumerator SendDeleteFriend(Coroutine coroutine, SceneService _this, SendDeleteFriendInMessage msg);
        /// <summary>
        /// 通知好友下线了
        /// </summary>
        IEnumerator SendOutLineFriend(Coroutine coroutine, SceneService _this, SendOutLineFriendInMessage msg);
        /// <summary>
        /// SS退出副本
        /// </summary>
        IEnumerator SSExitDungeon(Coroutine coroutine, SceneService _this, SSExitDungeonInMessage msg);
        /// <summary>
        /// 战盟Buff发生变化
        /// </summary>
        IEnumerator SSAllianceBuffDataChange(Coroutine coroutine, SceneService _this, SSAllianceBuffDataChangeInMessage msg);
        /// <summary>
        /// 战盟Buff发生变化
        /// </summary>
        IEnumerator SSAllianceDataChange(Coroutine coroutine, SceneService _this, SSAllianceDataChangeInMessage msg);
        /// <summary>
        /// 同步称号属性(type = 0表示设置当前使用的称号，type = 1表示刷新已获得的称号列表)
        /// </summary>
        IEnumerator SceneTitleChange(Coroutine coroutine, SceneService _this, SceneTitleChangeInMessage msg);
        /// <summary>
        /// 通知Scene，玩家的某个物品数量变了
        /// </summary>
        IEnumerator NotifyItemCount(Coroutine coroutine, SceneService _this, NotifyItemCountInMessage msg);
        /// <summary>
        /// 获得同步服务器平均玩家等级
        /// </summary>
        IEnumerator MotifyServerAvgLevel(Coroutine coroutine, SceneService _this, MotifyServerAvgLevelInMessage msg);
        /// <summary>
        /// 动态激活活动
        /// </summary>
        IEnumerator AddAutoActvity(Coroutine coroutine, SceneService _this, AddAutoActvityInMessage msg);
        /// <summary>
        /// 给某玩家上个buff
        /// </summary>
        IEnumerator SSAddBuff(Coroutine coroutine, SceneService _this, SSAddBuffInMessage msg);
        /// <summary>
        /// 玩家禁言
        /// </summary>
        IEnumerator Silence(Coroutine coroutine, SceneService _this, SilenceInMessage msg);
        /// <summary>
        /// 查询某个对象剩余血量
        /// </summary>
        IEnumerator SSApplyNpcHP(Coroutine coroutine, SceneService _this, SSApplyNpcHPInMessage msg);
        /// <summary>
        /// 灵兽数据变化
        /// </summary>
        IEnumerator SSSceneElfChange(Coroutine coroutine, SceneService _this, SSSceneElfChangeInMessage msg);
        /// <summary>
        /// 通知某个角色开始 链接各游戏服务器了
        /// </summary>
        IEnumerator SSNotifyCharacterOnConnet(Coroutine coroutine, SceneService _this, SSNotifyCharacterOnConnetInMessage msg);
        /// <summary>
        /// 通知服务器玩家掉线了
        /// </summary>
        IEnumerator BSNotifyCharacterOnLost(Coroutine coroutine, SceneService _this, BSNotifyCharacterOnLostInMessage msg);
        /// <summary>
        /// 灭世
        /// </summary>
        IEnumerator SyncTowerSkillLevel(Coroutine coroutine, SceneService _this, SyncTowerSkillLevelInMessage msg);
        /// <summary>
        /// </summary>
        IEnumerator SyncPlayerMieshiContribution(Coroutine coroutine, SceneService _this, SyncPlayerMieshiContributionInMessage msg);
        /// <summary>
        /// 通知scene 刷新扩展数据
        /// </summary>
        IEnumerator SyncExData(Coroutine coroutine, SceneService _this, SyncExDataInMessage msg);
        /// <summary>
        /// </summary>
        IEnumerator SyncSceneMount(Coroutine coroutine, SceneService _this, SyncSceneMountInMessage msg);
        /// <summary>
        /// 请求副本商店数据
        /// </summary>
        IEnumerator SSGetFubenStoreItems(Coroutine coroutine, SceneService _this, SSGetFubenStoreItemsInMessage msg);
        /// <summary>
        /// </summary>
        IEnumerator SSGetFubenStoreItemCount(Coroutine coroutine, SceneService _this, SSGetFubenStoreItemCountInMessage msg);
        /// <summary>
        /// </summary>
        IEnumerator SSChangeFubenStoreItem(Coroutine coroutine, SceneService _this, SSChangeFubenStoreItemInMessage msg);
        /// <summary>
        /// 同步魔物出站ID
        /// </summary>
        IEnumerator SSBookFightingMonsterId(Coroutine coroutine, SceneService _this, SSBookFightingMonsterIdInMessage msg);
        /// <summary>
        /// 任务切换场景
        /// </summary>
        IEnumerator MissionChangeSceneRequest(Coroutine coroutine, SceneService _this, MissionChangeSceneRequestInMessage msg);
        /// <summary>
        /// ----------------------------------------------------------------------------GM相关放在最后
        /// GM相关 begin
        /// </summary>
        IEnumerator GetCharacterData(Coroutine coroutine, SceneService _this, GetCharacterDataInMessage msg);
        /// <summary>
        /// 更新服务器
        /// </summary>
        IEnumerator UpdateServer(Coroutine coroutine, SceneService _this, UpdateServerInMessage msg);
        /// <summary>
        /// </summary>
        IEnumerator GMCommand(Coroutine coroutine, SceneService _this, GMCommandInMessage msg);
        /// <summary>
        /// 拷贝一个角色数据到另一个角色id
        /// </summary>
        IEnumerator CloneCharacterDbById(Coroutine coroutine, SceneService _this, CloneCharacterDbByIdInMessage msg);
        /// <summary>
        /// 修改战盟占领属性
        /// </summary>
        IEnumerator UpdateHoldId(Coroutine coroutine, SceneService _this, UpdateHoldIdInMessage msg);
        /// <summary>
        /// 通知scene 刷新扩展数据
        /// </summary>
        IEnumerator NotifyRefreshLodeTimer(Coroutine coroutine, SceneService _this, NotifyRefreshLodeTimerInMessage msg);
        /// <summary>
        /// </summary>
        IEnumerator SyncFlagData(Coroutine coroutine, SceneService _this, SyncFlagDataInMessage msg);
        /// <summary>
        /// 同步时装状态
        /// </summary>
        IEnumerator SceneEquipModelStateChange(Coroutine coroutine, SceneService _this, SceneEquipModelStateChangeInMessage msg);
        /// <summary>
        /// 通知修改玩家名字
        /// </summary>
        IEnumerator NodifyModifyPlayerName(Coroutine coroutine, SceneService _this, NodifyModifyPlayerNameInMessage msg);
        /// <summary>
        /// 通知各Scene服务器
        /// </summary>
        IEnumerator NotifyRefreshBossHome(Coroutine coroutine, SceneService _this, NotifyRefreshBossHomeInMessage msg);
        /// <summary>
        /// </summary>
        IEnumerator NotifyBossHomeKill(Coroutine coroutine, SceneService _this, NotifyBossHomeKillInMessage msg);
        /// <summary>
        /// 通知scene检查character是否能够接受决斗
        /// </summary>
        IEnumerator CheckCanAcceptChallenge(Coroutine coroutine, SceneService _this, CheckCanAcceptChallengeInMessage msg);
        IEnumerator OnServerStart(Coroutine coroutine, SceneService _this);
        IEnumerator OnServerStop(Coroutine coroutine, SceneService _this);
    }

    public abstract class SceneService : ServerAgentBase
    {

        protected static ISceneService mImpl;
        public static ISceneCharacterProxy mProxyImpl;
        public void SetServiceImpl(ISceneService impl)
        {
            mImpl = impl;
        }
        public void SetProxyImpl(ISceneCharacterProxy proxyImpl)
        {
            mProxyImpl = proxyImpl;
        }
        public abstract SceneCharacterProxy NewCharacterIn(ulong characterId, ulong clientId);
        public Dictionary<ulong, SceneCharacterProxy> Proxys = new Dictionary<ulong, SceneCharacterProxy>();
        protected override object GetRequestData(uint p, byte[] list)
        {
            switch(p)
            {
            case 3000:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_SBChangeScene_ARG_uint64_characterId_int32_serverId_int32_sceneId_uint64_guid_int32_changeType_SceneParam_sceneParam__>(ms);
                }
                break;
            case 3001:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_SBDestroyScene_ARG_uint64_guid__>(ms);
                }
                break;
            case 3002:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_NotifySceneNotExist_ARG_uint64_sceneId_uint64_characterId__>(ms);
                }
                break;
            case 3010:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_BSCreateScene_ARG_int32_serverId_int32_sceneId_uint64_guid_SceneParam_sceneParam__>(ms);
                }
                break;
            case 3020:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_UnloadData_ARG_uint64_characterId__>(ms);
                }
                break;
            case 3030:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_SBGetAllOnlineCharacterInServer_ARG_int32_serverId__>(ms);
                }
                break;
            case 3039:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_SBCheckCharacterOnline_ARG_Uint64Array_toList__>(ms);
                }
                break;
            case 3040:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_QueryBrokerStatus_ARG_uint32_placeholder__>(ms);
                }
                break;
            case 3050:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_SBReloadTable_ARG_string_tableName__>(ms);
                }
                break;
            case 3051:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_PrepareDataForEnterGame_ARG_int32_serverId__>(ms);
                }
                break;
            case 3052:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_PrepareDataForCreateCharacter_ARG_int32_type__>(ms);
                }
                break;
            case 3053:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_PrepareDataForCommonUse_ARG_uint32_placeholder__>(ms);
                }
                break;
            case 3054:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_PrepareDataForLogout_ARG_uint32_placeholder__>(ms);
                }
                break;
            case 3015:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_CreateCharacter_ARG_int32_type_bool_isGM__>(ms);
                }
                break;
            case 3016:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_DelectCharacter_ARG_int32_type__>(ms);
                }
                break;
            case 3055:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_SSEnterScene_ARG_uint64_characterId_uint64_guid_uint64_applyGuid_int32_changeType_SceneParam_sceneParam__>(ms);
                }
                break;
            case 3056:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_GetSceneSimpleData_ARG_uint32_placeholder__>(ms);
                }
                break;
            case 3057:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_CheckConnected_ARG_uint64_characterId__>(ms);
                }
                break;
            case 3058:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_CheckLost_ARG_uint64_characterId__>(ms);
                }
                break;
            case 3059:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_QueryStatus_ARG_uint32_placeholder__>(ms);
                }
                break;
            case 3061:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_NotifyConnected_ARG_uint32_placeholder__>(ms);
                }
                break;
            case 3062:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_NotifyLost_ARG_uint32_placeholder__>(ms);
                }
                break;
            case 3063:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_NotifySceneFinished_ARG_uint64_guid__>(ms);
                }
                break;
            case 3064:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_AskEnterDungeon_ARG_int32_serverId_int32_sceneId_uint64_guid_SceneParam_param__>(ms);
                }
                break;
            case 3065:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_CreateObjAround_ARG_uint32_placeholder__>(ms);
                }
                break;
            case 3066:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_NotifyPlayerPickUpFubenReward_ARG_uint64_characterId__>(ms);
                }
                break;
            case 3069:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_SBChangeSceneByTeam_ARG_ChangeSceneInfo_changeSceneData__>(ms);
                }
                break;
            case 3071:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_MergeSceneByTeam_ARG_IdList_ids__>(ms);
                }
                break;
            case 3072:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_IsSceneExist_ARG_uint64_sceneGuid__>(ms);
                }
                break;
            case 3073:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_LoginEnterScene_ARG_int32_serverId_int64_logout__>(ms);
                }
                break;
            case 3074:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_ReplyChangeScene_ARG_PlayerData_data__>(ms);
                }
                break;
            case 3075:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_ApplyPlayerData_ARG_int32_placeholder__>(ms);
                }
                break;
            case 3076:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_ChangeSceneOver_ARG_int32_sceneId_uint64_sceneGuid__>(ms);
                }
                break;
            case 3077:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_ApplyAttribute_ARG_int32_placeholder__>(ms);
                }
                break;
            case 3078:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_CreateObj_ARG_CreateObjMsg_msg__>(ms);
                }
                break;
            case 3079:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_DeleteObj_ARG_Uint64Array_objs_uint32_reason__>(ms);
                }
                break;
            case 3080:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_DeleteObjList_ARG_DeleteObjMsgList_dels__>(ms);
                }
                break;
            case 3081:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_MoveTo_ARG_int32_sceneId_Vec2Array_targetList_float_offset_int64_time__>(ms);
                }
                break;
            case 3082:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_SyncMoveTo_ARG_CharacterMoveMsg_msg__>(ms);
                }
                break;
            case 3083:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_SyncMoveToList_ARG_CharacterMoveMsgList_msg__>(ms);
                }
                break;
            case 3084:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_StopMove_ARG_int32_sceneId_PositionData_pos__>(ms);
                }
                break;
            case 3085:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_SyncStopMove_ARG_SyncPostionMsg_msg__>(ms);
                }
                break;
            case 3086:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_DirectTo_ARG_int32_dirX_int32_dirZ__>(ms);
                }
                break;
            case 3087:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_SyncDirection_ARG_uint64_characterId_int32_dirX_int32_dirZ__>(ms);
                }
                break;
            case 3088:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_SendUseSkillRequest_ARG_int32_sceneId_CharacterUseSkillMsg_msg__>(ms);
                }
                break;
            case 3089:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_NotifyUseSkill_ARG_CharacterUseSkillMsg_msg__>(ms);
                }
                break;
            case 3090:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_NotifyUseSkillList_ARG_CharacterUseSkillMsgList_msg__>(ms);
                }
                break;
            case 3091:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_SyncBuff_ARG_BuffResultMsg_msg__>(ms);
                }
                break;
            case 3092:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_SceneEquipChange_ARG_int32_type_int32_part_ItemBaseData_equip__>(ms);
                }
                break;
            case 3093:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_SceneSkillChange_ARG_int32_type_int32_id_int32_level__>(ms);
                }
                break;
            case 3094:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_SceneEquipSkill_ARG_Int32Array_delSkills_Int32Array_SkillIds_Int32Array_SkillLevels__>(ms);
                }
                break;
            case 3095:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_SceneInnateChange_ARG_int32_type_int32_id_int32_level__>(ms);
                }
                break;
            case 3096:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_SceneBookAttrChange_ARG_Dict_int_int_Data_attrs_Dict_int_int_Data_monsterAttrs__>(ms);
                }
                break;
            case 3097:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_GMScene_ARG_string_commond__>(ms);
                }
                break;
            case 3098:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_NotifyShootBullet_ARG_BulletMsg_msg__>(ms);
                }
                break;
            case 3099:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_NotifyShootBulletList_ARG_BulletMsgList_msg__>(ms);
                }
                break;
            case 3100:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_SendTeleportRequest_ARG_int32_type__>(ms);
                }
                break;
            case 3101:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_ChangeSceneRequest_ARG_int32_sceneId__>(ms);
                }
                break;
            case 3102:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_NotifyEquipChanged_ARG_uint64_characterId_int32_part_int32_ItemId__>(ms);
                }
                break;
            case 3103:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_SceneTeamMessage_ARG_uint64_characterId_int32_type_uint64_teamId_int32_state__>(ms);
                }
                break;
            case 3104:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_ApplySceneObj_ARG_int32_placeholder__>(ms);
                }
                break;
            case 3105:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_PickUpItem_ARG_uint64_dropItemId__>(ms);
                }
                break;
            case 3106:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_SceneChatMessage_ARG_int32_chatType_ChatMessageContent_Content_uint64_characterId__>(ms);
                }
                break;
            case 3107:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_UseSkillItem_ARG_int32_itemId_int32_count_int32_bagId_int32_bagIndex__>(ms);
                }
                break;
            case 3108:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_ServerGMCommand_ARG_string_cmd_string_param__>(ms);
                }
                break;
            case 3109:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_FindCharacterName_ARG_string_likeName__>(ms);
                }
                break;
            case 3110:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_FindCharacterFriend_ARG_int32_serverId_int32_level__>(ms);
                }
                break;
            case 3111:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_ExitDungeon_ARG_int32_type__>(ms);
                }
                break;
            case 3112:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_PickUpItemSuccess_ARG_uint64_dropItemId__>(ms);
                }
                break;
            case 3113:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_NotifySceneAction_ARG_int32_ActionId__>(ms);
                }
                break;
            case 3114:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_BagisFull_ARG_uint64_dropItemId_int32_itemId_int32_itemCount__>(ms);
                }
                break;
            case 3115:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_NotifySomeClientMessage_ARG_int32_type_int32_value__>(ms);
                }
                break;
            case 3116:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_MoveToRobot_ARG_Vector2Int32_postion__>(ms);
                }
                break;
            case 3117:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_NpcService_ARG_uint64_npcGuid_int32_serviceId__>(ms);
                }
                break;
            case 3118:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_NotifyDungeonTime_ARG_int32_state_uint64_time__>(ms);
                }
                break;
            case 3119:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_NotifyScenePlayerCityData_ARG_uint64_sceneGuid_BuildingList_data__>(ms);
                }
                break;
            case 3120:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_SyncSceneBuilding_ARG_BuildingList_data__>(ms);
                }
                break;
            case 3121:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_ReliveType_ARG_int32_type__>(ms);
                }
                break;
            case 3122:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_DebugObjPosition_ARG_uint64_characterId_PositionData_pos__>(ms);
                }
                break;
            case 3123:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_SSGoToSceneAndPvP_ARG_int32_sceneId_uint64_PvPcharacterId__>(ms);
                }
                break;
            case 3124:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_SyncCharacterPostion_ARG_uint64_characterId_PositionData_pos__>(ms);
                }
                break;
            case 3126:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_ChangePKModel_ARG_int32_pkModel__>(ms);
                }
                break;
            case 3128:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_FlyTo_ARG_int32_sceneId_Vector2Int32_postion__>(ms);
                }
                break;
            case 3129:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_SSPvPSceneCampSet_ARG_int32_type__>(ms);
                }
                break;
            case 3132:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_NotifyBattleReminder_ARG_int32_type_string_info_int32_param__>(ms);
                }
                break;
            case 3133:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_NotifyCountdown_ARG_uint64_time_int32_type__>(ms);
                }
                break;
            case 3134:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_NotifyCreateSpeMonster_ARG_Int32Array_ids__>(ms);
                }
                break;
            case 3135:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_ApplySceneTeamLeaderObj_ARG_int32_placeholder__>(ms);
                }
                break;
            case 3136:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_SSGetCharacterSceneData_ARG_uint64_characterId__>(ms);
                }
                break;
            case 3137:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_NotifyDamageList_ARG_DamageList_list__>(ms);
                }
                break;
            case 3138:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_NotifyFubenInfo_ARG_FubenInfoMsg_info__>(ms);
                }
                break;
            case 3139:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_BossDie_ARG_int32_serverId__>(ms);
                }
                break;
            case 3140:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_ReadyToEnter_ARG_int32_placeholder__>(ms);
                }
                break;
            case 3141:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_NotifyMessage_ARG_int32_type_string_info_int32_addChat__>(ms);
                }
                break;
            case 3142:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_NotifyCampChange_ARG_int32_campId_Vector2Int32_pos__>(ms);
                }
                break;
            case 3143:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_GetLeaveExp_ARG_int32_type_int32_needCount__>(ms);
                }
                break;
            case 3144:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_ApplyLeaveExp_ARG_int32_placeholder__>(ms);
                }
                break;
            case 3145:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_GetFriendSceneSimpleData_ARG_int32_type_uint64_haveId_uint64_getId__>(ms);
                }
                break;
            case 3146:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_SendAddFriend_ARG_int32_type_uint64_haveId_uint64_getId__>(ms);
                }
                break;
            case 3147:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_SendDeleteFriend_ARG_int32_type_uint64_haveId_uint64_getId__>(ms);
                }
                break;
            case 3148:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_SendOutLineFriend_ARG_int32_type_uint64_haveId_uint64_getId__>(ms);
                }
                break;
            case 3150:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_SyncDataToClient_ARG_SceneSyncData_data__>(ms);
                }
                break;
            case 3151:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_SyncMyDataToClient_ARG_SceneSyncData_data__>(ms);
                }
                break;
            case 3152:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_SSExitDungeon_ARG_int32_placeholder__>(ms);
                }
                break;
            case 3153:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_NotifyStrongpointStateChanged_ARG_int32_camp_int32_index_int32_state_float_time__>(ms);
                }
                break;
            case 3154:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_ChangeSceneRequestByMission_ARG_int32_sceneId_int32_missionId__>(ms);
                }
                break;
            case 3155:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_ApplyPlayerPostionList_ARG_Uint64Array_characterIds__>(ms);
                }
                break;
            case 3156:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_SyncObjPosition_ARG_SyncPathPosMsg_msg__>(ms);
                }
                break;
            case 3157:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_SSAllianceBuffDataChange_ARG_int32_buffId__>(ms);
                }
                break;
            case 3158:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_SSAllianceDataChange_ARG_int32_alianceId_int32_type_string_name__>(ms);
                }
                break;
            case 3159:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_Inspire_ARG_int32_placeholder__>(ms);
                }
                break;
            case 3160:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_ObjSpeak_ARG_uint64_id_int32_dictId_string_content__>(ms);
                }
                break;
            case 3161:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_SceneTitleChange_ARG_Int32Array_titles_int32_type__>(ms);
                }
                break;
            case 3162:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_NotifyItemCount_ARG_int32_itemId_int32_count__>(ms);
                }
                break;
            case 3163:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_SyncLevelChange_ARG_LevelUpAttrData_Attr__>(ms);
                }
                break;
            case 3164:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_AllianceWarRespawnGuard_ARG_int32_index__>(ms);
                }
                break;
            case 3165:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_MotifyServerAvgLevel_ARG_Dict_int_int_Data_ServerAvgLevel__>(ms);
                }
                break;
            case 3166:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_NotifyAllianceWarNpcData_ARG_int32_reliveCount_Int32Array_data__>(ms);
                }
                break;
            case 3167:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_NotifyScenePlayerInfos_ARG_ScenePlayerInfos_info__>(ms);
                }
                break;
            case 3168:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_NotifyNpcStatus_ARG_MapNpcInfos_infos__>(ms);
                }
                break;
            case 3169:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_AddAutoActvity_ARG_int32_fubenId_int64_startTime_int64_endTime_int32_count__>(ms);
                }
                break;
            case 3170:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_SSAddBuff_ARG_uint64_characterId_int32_buffId_int32_buffLevel__>(ms);
                }
                break;
            case 3171:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_Silence_ARG_uint32_mask__>(ms);
                }
                break;
            case 3172:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_SSApplyNpcHP_ARG_int32_serverId_int32_sceneId_uint64_npcGuid__>(ms);
                }
                break;
            case 3173:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_NotifyPointList_ARG_PointList_list__>(ms);
                }
                break;
            case 3174:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_NotifyStartWarning_ARG_uint64_timeOut__>(ms);
                }
                break;
            case 3175:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_SSSceneElfChange_ARG_Int32Array_removeBuff_Dict_int_int_Data_addBuff_int32_fightPoint__>(ms);
                }
                break;
            case 3499:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_SBReconnectNotifyScene_ARG_uint64_oldclientId_uint64_newclientId_uint64_characterId__>(ms);
                }
                break;
            case 3500:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_SBCleanClientCharacterData_ARG_uint64_clientId_uint64_characterId__>(ms);
                }
                break;
            case 3501:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_SSNotifyCharacterOnConnet_ARG_uint64_clientId_uint64_characterId__>(ms);
                }
                break;
            case 3502:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_SBGetServerCharacterCount_ARG_uint32_placeholder__>(ms);
                }
                break;
            case 3503:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_BSNotifyCharacterOnLost_ARG_uint64_clientId_uint64_characterId__>(ms);
                }
                break;
            case 3600:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_SyncTowerSkillLevel_ARG_uint64_sceneGuid_int32_towerId_int32_level__>(ms);
                }
                break;
            case 3601:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_GetSceneNpcPos_ARG_uint32_placeholder__>(ms);
                }
                break;
            case 3602:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_SendMieshiResult_ARG_MieshiResultMsg_msg__>(ms);
                }
                break;
            case 3603:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_SyncPlayerMieshiContribution_ARG_uint64_sceneGuid_uint64_characterId_int32_Contribution_string_name_float_rate__>(ms);
                }
                break;
            case 3604:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_NotifyRefreshDungeonInfo_ARG_DungeonInfo_info__>(ms);
                }
                break;
            case 3605:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_RequestSceneInfo_ARG_int32_serverId_int32_sceneTypeId__>(ms);
                }
                break;
            case 3606:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_SyncExData_ARG_Dict_int_int_Data_changes__>(ms);
                }
                break;
            case 3607:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_NotifyStartXpSkillGuide_ARG_int32_placeholder__>(ms);
                }
                break;
            case 3608:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_NotifyStartMaYaFuBenGuide_ARG_int32_type__>(ms);
                }
                break;
            case 3610:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_BroadcastSceneMonsterCount_ARG_int32_count__>(ms);
                }
                break;
            case 3611:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_SummonMonster_ARG_int32_monsterId__>(ms);
                }
                break;
            case 3612:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_SyncSceneMount_ARG_int32_MountId__>(ms);
                }
                break;
            case 3613:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_SSGetFubenStoreItems_ARG_int32_shopType__>(ms);
                }
                break;
            case 3614:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_SSGetFubenStoreItemCount_ARG_int32_shopType_int32_id__>(ms);
                }
                break;
            case 3616:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_SSChangeFubenStoreItem_ARG_int32_shopType_int32_id_int32_num__>(ms);
                }
                break;
            case 3617:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_FastReach_ARG_int32_sceneId_Vector2Int32_postion__>(ms);
                }
                break;
            case 3618:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_BroadcastSceneChat_ARG_string_content_int32_dictId__>(ms);
                }
                break;
            case 3619:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_SSBookFightingMonsterId_ARG_int32_handbookId__>(ms);
                }
                break;
            case 3700:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_SyncFuBenStore_ARG_StoneItems_itemlst_int32_storeType__>(ms);
                }
                break;
            case 3701:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_NotifyTeamMemberScene_ARG_uint64_characterId_uint64_changeCharacterId_uint64_sceneId__>(ms);
                }
                break;
            case 3702:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_ForceStopMove_ARG_PositionData_pos__>(ms);
                }
                break;
            case 3703:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_NotifyCommonCountdown_ARG_int32_time__>(ms);
                }
                break;
            case 3704:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_MissionChangeSceneRequest_ARG_int32_transId__>(ms);
                }
                break;
            case 3705:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_CK_NotifyClientLevelup_ARG_uint64_objId_int32_lv_int32_exp_Dict_int_int_Data_addBuff__>(ms);
                }
                break;
            case 3706:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_CK_ApplyLevelupBuff_ARG_int32_buffId__>(ms);
                }
                break;
            case 3707:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_CK_NotifyCheckenSceneInfo_ARG_MsgCheckenSceneInfo_info__>(ms);
                }
                break;
            case 3708:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_CK_NotifyHurt_ARG_int32_placeholder__>(ms);
                }
                break;
            case 3709:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_CK_NotifyRankList_ARG_MsgCheckenRankList_rank__>(ms);
                }
                break;
            case 3710:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_ApplySolveStuck_ARG_int32_placeholder__>(ms);
                }
                break;
            case 3990:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_GetCharacterData_ARG_uint64_id__>(ms);
                }
                break;
            case 3991:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_UpdateServer_ARG_int32_placeholder__>(ms);
                }
                break;
            case 3992:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_SyncModelId_ARG_int32_model__>(ms);
                }
                break;
            case 3993:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_GMCommand_ARG_StringArray_commonds__>(ms);
                }
                break;
            case 3994:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_CloneCharacterDbById_ARG_uint64_fromId_uint64_toId__>(ms);
                }
                break;
            case 3995:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_CollectLode_ARG_int32_LodeId__>(ms);
                }
                break;
            case 3996:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_UpdateHoldId_ARG_int32_GuildId__>(ms);
                }
                break;
            case 3997:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_HoldLode_ARG_int32_param__>(ms);
                }
                break;
            case 3998:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_NotifyLodeInfo_ARG_MsgSceneLode_info__>(ms);
                }
                break;
            case 3713:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_NotifyRefreshLodeTimer_ARG_int32_ServerId_Int32Array_ids__>(ms);
                }
                break;
            case 3999:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_SyncFlagData_ARG_Dict_int_int_Data_changes__>(ms);
                }
                break;
            case 4000:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_SceneEquipModelStateChange_ARG_int32_part_int32_state_ItemBaseData_equip__>(ms);
                }
                break;
            case 3712:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_NodifyModifyPlayerName_ARG_uint64_characterId_string_modifyName__>(ms);
                }
                break;
            case 4002:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_NotifyPlayEffect_ARG_int32_effectId__>(ms);
                }
                break;
            case 3711:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_NotifyRefreshBossHome_ARG_Int32Array_ids__>(ms);
                }
                break;
            case 3714:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_NotifyBossHomeKill_ARG_int32_placeholder__>(ms);
                }
                break;
            case 3715:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Scene_CheckCanAcceptChallenge_ARG_int32_placeholder__>(ms);
                }
                break;
            default:
                break;
            }

            return null;
        }

        public override IEnumerator OnClientConnected(Coroutine coroutine, string target, ulong clientId, ulong characterId, uint packId)
        {
            if (target != "client")
            {
                return null;
            }

            var proxy = NewCharacterIn(characterId, clientId);
            if (proxy != null)
            {
                Proxys[characterId] = proxy;
                return mProxyImpl.OnConnected(coroutine, proxy, packId);
            }
            return null;
        }
        public override IEnumerator OnClientLost(Coroutine coroutine, string target, ulong clientId, ulong characterId, uint packId)
        {
            if (target != "client")
            {
                yield break;
            }
            SceneCharacterProxy proxy = null;
            if (Proxys.TryGetValue(characterId, out proxy))
            {
                var co = CoroutineFactory.NewSubroutine(mProxyImpl.OnLost, coroutine, proxy, packId);
                if (co.MoveNext())
                {
                    yield return co;
                }
                Proxys.Remove(characterId);
            }
        }
        public void CharacterId2ClientId(IEnumerable<ulong> ids, List<ulong> known, List<ulong> unknown)
        {
            foreach (var id in ids)
            {
                SceneCharacterProxy proxy;
                if (Proxys.TryGetValue(id, out proxy))
                {
                    known.Add(((SceneCharacterProxy)proxy).ClientId);
                }
                else
                {
                    unknown.Add(id);
                }
            }
        }
        /// <summary>
        /// 请求玩家周围的所有东西
        /// </summary>
        public IEnumerator CreateObjAround(Coroutine coroutine, CreateObjAroundInMessage msg)
        {
            SceneCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.CreateObjAround(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 服务端返回进入场景结果(服务端可主动发，让玩家强制进入某个场景)
        /// </summary>
        public object ReplyChangeScene(ulong __characterId__, ulong __clientId__, PlayerData data)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 3074;
            desc.CharacterId = __characterId__;
            desc.ClientId = __clientId__;
            desc.PacketId = 0;

            var __data__ = new __RPC_Scene_ReplyChangeScene_ARG_PlayerData_data__();
            __data__.Data=data;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            desc.Type = (int)MessageType.SC;
            desc.ServiceType = (int) ServiceType.Scene;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// 客户端请求PlayerData
        /// </summary>
        public IEnumerator ApplyPlayerData(Coroutine coroutine, ApplyPlayerDataInMessage msg)
        {
            SceneCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.ApplyPlayerData(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 客户端已经进入场景
        /// </summary>
        public IEnumerator ChangeSceneOver(Coroutine coroutine, ChangeSceneOverInMessage msg)
        {
            SceneCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.ChangeSceneOver(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 客户端请求属性数据
        /// </summary>
        public IEnumerator ApplyAttribute(Coroutine coroutine, ApplyAttributeInMessage msg)
        {
            SceneCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.ApplyAttribute(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 通知创建角色
        /// </summary>
        public object CreateObj(IEnumerable<ulong> __characterIds__, CreateObjMsg msg)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 3078;
            desc.PacketId = 0;

            var __data__ = new __RPC_Scene_CreateObj_ARG_CreateObjMsg_msg__();
            __data__.Msg=msg;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            var routerDesc = new ServiceDesc();
            routerDesc.FuncId = 3078;
            CharacterId2ClientId(__characterIds__, desc.Routing, routerDesc.Routing);
            if(desc.Routing.Count == 0 && routerDesc.Routing.Count == 0)
                return null;
            if(routerDesc.Routing.Count > 0)
            {
                routerDesc.PacketId = 1;
                routerDesc.Type = (int)MessageType.SCList;
                routerDesc.ServiceType = (int) ServiceType.Scene;
                routerDesc.Data = __s__.ToArray();
                Send(routerDesc);
            }
            desc.Type = (int)MessageType.SCList;
            desc.ServiceType = (int) ServiceType.Scene;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// 广播删除角色
        /// 创建OBJ的原因，2种，0不可见 1死亡移除
        /// </summary>
        public object DeleteObj(IEnumerable<ulong> __characterIds__, Uint64Array objs, uint reason)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 3079;
            desc.PacketId = 0;

            var __data__ = new __RPC_Scene_DeleteObj_ARG_Uint64Array_objs_uint32_reason__();
            __data__.Objs=objs;
            __data__.Reason=reason;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            var routerDesc = new ServiceDesc();
            routerDesc.FuncId = 3079;
            CharacterId2ClientId(__characterIds__, desc.Routing, routerDesc.Routing);
            if(desc.Routing.Count == 0 && routerDesc.Routing.Count == 0)
                return null;
            if(routerDesc.Routing.Count > 0)
            {
                routerDesc.PacketId = 1;
                routerDesc.Type = (int)MessageType.SCList;
                routerDesc.ServiceType = (int) ServiceType.Scene;
                routerDesc.Data = __s__.ToArray();
                Send(routerDesc);
            }
            desc.Type = (int)MessageType.SCList;
            desc.ServiceType = (int) ServiceType.Scene;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// </summary>
        public object DeleteObjList(IEnumerable<ulong> __characterIds__, DeleteObjMsgList dels)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 3080;
            desc.PacketId = 0;

            var __data__ = new __RPC_Scene_DeleteObjList_ARG_DeleteObjMsgList_dels__();
            __data__.Dels=dels;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            var routerDesc = new ServiceDesc();
            routerDesc.FuncId = 3080;
            CharacterId2ClientId(__characterIds__, desc.Routing, routerDesc.Routing);
            if(desc.Routing.Count == 0 && routerDesc.Routing.Count == 0)
                return null;
            if(routerDesc.Routing.Count > 0)
            {
                routerDesc.PacketId = 1;
                routerDesc.Type = (int)MessageType.SCList;
                routerDesc.ServiceType = (int) ServiceType.Scene;
                routerDesc.Data = __s__.ToArray();
                Send(routerDesc);
            }
            desc.Type = (int)MessageType.SCList;
            desc.ServiceType = (int) ServiceType.Scene;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// 主角移动
        /// </summary>
        public IEnumerator MoveTo(Coroutine coroutine, MoveToInMessage msg)
        {
            SceneCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.MoveTo(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 同步移动
        /// </summary>
        public object SyncMoveTo(IEnumerable<ulong> __characterIds__, CharacterMoveMsg msg)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 3082;
            desc.PacketId = 0;

            var __data__ = new __RPC_Scene_SyncMoveTo_ARG_CharacterMoveMsg_msg__();
            __data__.Msg=msg;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            var routerDesc = new ServiceDesc();
            routerDesc.FuncId = 3082;
            CharacterId2ClientId(__characterIds__, desc.Routing, routerDesc.Routing);
            if(desc.Routing.Count == 0 && routerDesc.Routing.Count == 0)
                return null;
            if(routerDesc.Routing.Count > 0)
            {
                routerDesc.PacketId = 1;
                routerDesc.Type = (int)MessageType.SCList;
                routerDesc.ServiceType = (int) ServiceType.Scene;
                routerDesc.Data = __s__.ToArray();
                Send(routerDesc);
            }
            desc.Type = (int)MessageType.SCList;
            desc.ServiceType = (int) ServiceType.Scene;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// 同步移动
        /// </summary>
        public object SyncMoveToList(IEnumerable<ulong> __characterIds__, CharacterMoveMsgList msg)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 3083;
            desc.PacketId = 0;

            var __data__ = new __RPC_Scene_SyncMoveToList_ARG_CharacterMoveMsgList_msg__();
            __data__.Msg=msg;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            var routerDesc = new ServiceDesc();
            routerDesc.FuncId = 3083;
            CharacterId2ClientId(__characterIds__, desc.Routing, routerDesc.Routing);
            if(desc.Routing.Count == 0 && routerDesc.Routing.Count == 0)
                return null;
            if(routerDesc.Routing.Count > 0)
            {
                routerDesc.PacketId = 1;
                routerDesc.Type = (int)MessageType.SCList;
                routerDesc.ServiceType = (int) ServiceType.Scene;
                routerDesc.Data = __s__.ToArray();
                Send(routerDesc);
            }
            desc.Type = (int)MessageType.SCList;
            desc.ServiceType = (int) ServiceType.Scene;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// 主角停止移动
        /// </summary>
        public IEnumerator StopMove(Coroutine coroutine, StopMoveInMessage msg)
        {
            SceneCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.StopMove(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 同步停止移动
        /// </summary>
        public object SyncStopMove(IEnumerable<ulong> __characterIds__, SyncPostionMsg msg)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 3085;
            desc.PacketId = 0;

            var __data__ = new __RPC_Scene_SyncStopMove_ARG_SyncPostionMsg_msg__();
            __data__.Msg=msg;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            var routerDesc = new ServiceDesc();
            routerDesc.FuncId = 3085;
            CharacterId2ClientId(__characterIds__, desc.Routing, routerDesc.Routing);
            if(desc.Routing.Count == 0 && routerDesc.Routing.Count == 0)
                return null;
            if(routerDesc.Routing.Count > 0)
            {
                routerDesc.PacketId = 1;
                routerDesc.Type = (int)MessageType.SCList;
                routerDesc.ServiceType = (int) ServiceType.Scene;
                routerDesc.Data = __s__.ToArray();
                Send(routerDesc);
            }
            desc.Type = (int)MessageType.SCList;
            desc.ServiceType = (int) ServiceType.Scene;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// 主角朝向
        /// </summary>
        public IEnumerator DirectTo(Coroutine coroutine, DirectToInMessage msg)
        {
            SceneCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.DirectTo(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 同步主角
        /// </summary>
        public object SyncDirection(IEnumerable<ulong> __characterIds__, ulong characterId, int dirX, int dirZ)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 3087;
            desc.PacketId = 0;

            var __data__ = new __RPC_Scene_SyncDirection_ARG_uint64_characterId_int32_dirX_int32_dirZ__();
            __data__.CharacterId=characterId;
            __data__.DirX=dirX;
            __data__.DirZ=dirZ;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            var routerDesc = new ServiceDesc();
            routerDesc.FuncId = 3087;
            CharacterId2ClientId(__characterIds__, desc.Routing, routerDesc.Routing);
            if(desc.Routing.Count == 0 && routerDesc.Routing.Count == 0)
                return null;
            if(routerDesc.Routing.Count > 0)
            {
                routerDesc.PacketId = 1;
                routerDesc.Type = (int)MessageType.SCList;
                routerDesc.ServiceType = (int) ServiceType.Scene;
                routerDesc.Data = __s__.ToArray();
                Send(routerDesc);
            }
            desc.Type = (int)MessageType.SCList;
            desc.ServiceType = (int) ServiceType.Scene;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// 客户端请求使用技能
        /// </summary>
        public IEnumerator SendUseSkillRequest(Coroutine coroutine, SendUseSkillRequestInMessage msg)
        {
            SceneCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.SendUseSkillRequest(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 广播使用技能
        /// </summary>
        public object NotifyUseSkill(IEnumerable<ulong> __characterIds__, CharacterUseSkillMsg msg)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 3089;
            desc.PacketId = 0;

            var __data__ = new __RPC_Scene_NotifyUseSkill_ARG_CharacterUseSkillMsg_msg__();
            __data__.Msg=msg;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            var routerDesc = new ServiceDesc();
            routerDesc.FuncId = 3089;
            CharacterId2ClientId(__characterIds__, desc.Routing, routerDesc.Routing);
            if(desc.Routing.Count == 0 && routerDesc.Routing.Count == 0)
                return null;
            if(routerDesc.Routing.Count > 0)
            {
                routerDesc.PacketId = 1;
                routerDesc.Type = (int)MessageType.SCList;
                routerDesc.ServiceType = (int) ServiceType.Scene;
                routerDesc.Data = __s__.ToArray();
                Send(routerDesc);
            }
            desc.Type = (int)MessageType.SCList;
            desc.ServiceType = (int) ServiceType.Scene;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// 广播使用一组技能
        /// </summary>
        public object NotifyUseSkillList(IEnumerable<ulong> __characterIds__, CharacterUseSkillMsgList msg)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 3090;
            desc.PacketId = 0;

            var __data__ = new __RPC_Scene_NotifyUseSkillList_ARG_CharacterUseSkillMsgList_msg__();
            __data__.Msg=msg;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            var routerDesc = new ServiceDesc();
            routerDesc.FuncId = 3090;
            CharacterId2ClientId(__characterIds__, desc.Routing, routerDesc.Routing);
            if(desc.Routing.Count == 0 && routerDesc.Routing.Count == 0)
                return null;
            if(routerDesc.Routing.Count > 0)
            {
                routerDesc.PacketId = 1;
                routerDesc.Type = (int)MessageType.SCList;
                routerDesc.ServiceType = (int) ServiceType.Scene;
                routerDesc.Data = __s__.ToArray();
                Send(routerDesc);
            }
            desc.Type = (int)MessageType.SCList;
            desc.ServiceType = (int) ServiceType.Scene;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// 广播Buff结果
        /// </summary>
        public object SyncBuff(IEnumerable<ulong> __characterIds__, BuffResultMsg msg)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 3091;
            desc.PacketId = 0;

            var __data__ = new __RPC_Scene_SyncBuff_ARG_BuffResultMsg_msg__();
            __data__.Msg=msg;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            var routerDesc = new ServiceDesc();
            routerDesc.FuncId = 3091;
            CharacterId2ClientId(__characterIds__, desc.Routing, routerDesc.Routing);
            if(desc.Routing.Count == 0 && routerDesc.Routing.Count == 0)
                return null;
            if(routerDesc.Routing.Count > 0)
            {
                routerDesc.PacketId = 1;
                routerDesc.Type = (int)MessageType.SCList;
                routerDesc.ServiceType = (int) ServiceType.Scene;
                routerDesc.Data = __s__.ToArray();
                Send(routerDesc);
            }
            desc.Type = (int)MessageType.SCList;
            desc.ServiceType = (int) ServiceType.Scene;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// GM命令
        /// </summary>
        public IEnumerator GMScene(Coroutine coroutine, GMSceneInMessage msg)
        {
            SceneCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.GMScene(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 广播释放子弹
        /// </summary>
        public object NotifyShootBullet(IEnumerable<ulong> __characterIds__, BulletMsg msg)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 3098;
            desc.PacketId = 0;

            var __data__ = new __RPC_Scene_NotifyShootBullet_ARG_BulletMsg_msg__();
            __data__.Msg=msg;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            var routerDesc = new ServiceDesc();
            routerDesc.FuncId = 3098;
            CharacterId2ClientId(__characterIds__, desc.Routing, routerDesc.Routing);
            if(desc.Routing.Count == 0 && routerDesc.Routing.Count == 0)
                return null;
            if(routerDesc.Routing.Count > 0)
            {
                routerDesc.PacketId = 1;
                routerDesc.Type = (int)MessageType.SCList;
                routerDesc.ServiceType = (int) ServiceType.Scene;
                routerDesc.Data = __s__.ToArray();
                Send(routerDesc);
            }
            desc.Type = (int)MessageType.SCList;
            desc.ServiceType = (int) ServiceType.Scene;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// 广播释放子弹
        /// </summary>
        public object NotifyShootBulletList(IEnumerable<ulong> __characterIds__, BulletMsgList msg)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 3099;
            desc.PacketId = 0;

            var __data__ = new __RPC_Scene_NotifyShootBulletList_ARG_BulletMsgList_msg__();
            __data__.Msg=msg;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            var routerDesc = new ServiceDesc();
            routerDesc.FuncId = 3099;
            CharacterId2ClientId(__characterIds__, desc.Routing, routerDesc.Routing);
            if(desc.Routing.Count == 0 && routerDesc.Routing.Count == 0)
                return null;
            if(routerDesc.Routing.Count > 0)
            {
                routerDesc.PacketId = 1;
                routerDesc.Type = (int)MessageType.SCList;
                routerDesc.ServiceType = (int) ServiceType.Scene;
                routerDesc.Data = __s__.ToArray();
                Send(routerDesc);
            }
            desc.Type = (int)MessageType.SCList;
            desc.ServiceType = (int) ServiceType.Scene;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// 传送
        /// </summary>
        public IEnumerator SendTeleportRequest(Coroutine coroutine, SendTeleportRequestInMessage msg)
        {
            SceneCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.SendTeleportRequest(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 切换场景
        /// </summary>
        public IEnumerator ChangeSceneRequest(Coroutine coroutine, ChangeSceneRequestInMessage msg)
        {
            SceneCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.ChangeSceneRequest(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 通知客户端修改装备模型
        /// </summary>
        public object NotifyEquipChanged(IEnumerable<ulong> __characterIds__, ulong characterId, int part, int ItemId)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 3102;
            desc.PacketId = 0;

            var __data__ = new __RPC_Scene_NotifyEquipChanged_ARG_uint64_characterId_int32_part_int32_ItemId__();
            __data__.CharacterId=characterId;
            __data__.Part=part;
            __data__.ItemId=ItemId;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            var routerDesc = new ServiceDesc();
            routerDesc.FuncId = 3102;
            CharacterId2ClientId(__characterIds__, desc.Routing, routerDesc.Routing);
            if(desc.Routing.Count == 0 && routerDesc.Routing.Count == 0)
                return null;
            if(routerDesc.Routing.Count > 0)
            {
                routerDesc.PacketId = 1;
                routerDesc.Type = (int)MessageType.SCList;
                routerDesc.ServiceType = (int) ServiceType.Scene;
                routerDesc.Data = __s__.ToArray();
                Send(routerDesc);
            }
            desc.Type = (int)MessageType.SCList;
            desc.ServiceType = (int) ServiceType.Scene;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// 请求场景内没有队伍的所有玩家
        /// </summary>
        public IEnumerator ApplySceneObj(Coroutine coroutine, ApplySceneObjInMessage msg)
        {
            SceneCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.ApplySceneObj(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 拾取物品
        /// </summary>
        public IEnumerator PickUpItem(Coroutine coroutine, PickUpItemInMessage msg)
        {
            SceneCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.PickUpItem(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 接受聊天数据
        /// </summary>
        public IEnumerator SceneChatMessage(Coroutine coroutine, SceneChatMessageInMessage msg)
        {
            SceneCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.SceneChatMessage(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 退出副本
        /// -1 普通
        /// 0 强制切场景
        /// </summary>
        public IEnumerator ExitDungeon(Coroutine coroutine, ExitDungeonInMessage msg)
        {
            SceneCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.ExitDungeon(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 拾取某个物品
        /// </summary>
        public object PickUpItemSuccess(ulong __characterId__, ulong __clientId__, ulong dropItemId)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 3112;
            desc.CharacterId = __characterId__;
            desc.ClientId = __clientId__;
            desc.PacketId = 0;

            var __data__ = new __RPC_Scene_PickUpItemSuccess_ARG_uint64_dropItemId__();
            __data__.DropItemId=dropItemId;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            desc.Type = (int)MessageType.SC;
            desc.ServiceType = (int) ServiceType.Scene;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// 通知客户端场景动画
        /// </summary>
        public object NotifySceneAction(IEnumerable<ulong> __characterIds__, int ActionId)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 3113;
            desc.PacketId = 0;

            var __data__ = new __RPC_Scene_NotifySceneAction_ARG_int32_ActionId__();
            __data__.ActionId=ActionId;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            var routerDesc = new ServiceDesc();
            routerDesc.FuncId = 3113;
            CharacterId2ClientId(__characterIds__, desc.Routing, routerDesc.Routing);
            if(desc.Routing.Count == 0 && routerDesc.Routing.Count == 0)
                return null;
            if(routerDesc.Routing.Count > 0)
            {
                routerDesc.PacketId = 1;
                routerDesc.Type = (int)MessageType.SCList;
                routerDesc.ServiceType = (int) ServiceType.Scene;
                routerDesc.Data = __s__.ToArray();
                Send(routerDesc);
            }
            desc.Type = (int)MessageType.SCList;
            desc.ServiceType = (int) ServiceType.Scene;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// 包裹已满的提示
        /// </summary>
        public object BagisFull(ulong __characterId__, ulong __clientId__, ulong dropItemId, int itemId, int itemCount)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 3114;
            desc.CharacterId = __characterId__;
            desc.ClientId = __clientId__;
            desc.PacketId = 0;

            var __data__ = new __RPC_Scene_BagisFull_ARG_uint64_dropItemId_int32_itemId_int32_itemCount__();
            __data__.DropItemId=dropItemId;
            __data__.ItemId=itemId;
            __data__.ItemCount=itemCount;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            desc.Type = (int)MessageType.SC;
            desc.ServiceType = (int) ServiceType.Scene;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// 通知一些客户端事情
        /// </summary>
        public IEnumerator NotifySomeClientMessage(Coroutine coroutine, NotifySomeClientMessageInMessage msg)
        {
            SceneCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.NotifySomeClientMessage(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// </summary>
        public IEnumerator MoveToRobot(Coroutine coroutine, MoveToRobotInMessage msg)
        {
            SceneCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.MoveToRobot(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// NPC服务
        /// </summary>
        public IEnumerator NpcService(Coroutine coroutine, NpcServiceInMessage msg)
        {
            SceneCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.NpcService(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 同步副本时间
        /// </summary>
        public object NotifyDungeonTime(ulong __characterId__, ulong __clientId__, int state, ulong time)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 3118;
            desc.CharacterId = __characterId__;
            desc.ClientId = __clientId__;
            desc.PacketId = 0;

            var __data__ = new __RPC_Scene_NotifyDungeonTime_ARG_int32_state_uint64_time__();
            __data__.State=state;
            __data__.Time=time;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            desc.Type = (int)MessageType.SC;
            desc.ServiceType = (int) ServiceType.Scene;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// 同步家园场景数据
        /// </summary>
        public object SyncSceneBuilding(IEnumerable<ulong> __characterIds__, BuildingList data)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 3120;
            desc.PacketId = 0;

            var __data__ = new __RPC_Scene_SyncSceneBuilding_ARG_BuildingList_data__();
            __data__.Data=data;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            var routerDesc = new ServiceDesc();
            routerDesc.FuncId = 3120;
            CharacterId2ClientId(__characterIds__, desc.Routing, routerDesc.Routing);
            if(desc.Routing.Count == 0 && routerDesc.Routing.Count == 0)
                return null;
            if(routerDesc.Routing.Count > 0)
            {
                routerDesc.PacketId = 1;
                routerDesc.Type = (int)MessageType.SCList;
                routerDesc.ServiceType = (int) ServiceType.Scene;
                routerDesc.Data = __s__.ToArray();
                Send(routerDesc);
            }
            desc.Type = (int)MessageType.SCList;
            desc.ServiceType = (int) ServiceType.Scene;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// 复活的选项
        /// </summary>
        public IEnumerator ReliveType(Coroutine coroutine, ReliveTypeInMessage msg)
        {
            SceneCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.ReliveType(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// Debug模式下客户端坐标
        /// </summary>
        public object DebugObjPosition(IEnumerable<ulong> __characterIds__, ulong characterId, PositionData pos)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 3122;
            desc.PacketId = 0;

            var __data__ = new __RPC_Scene_DebugObjPosition_ARG_uint64_characterId_PositionData_pos__();
            __data__.CharacterId=characterId;
            __data__.Pos=pos;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            var routerDesc = new ServiceDesc();
            routerDesc.FuncId = 3122;
            CharacterId2ClientId(__characterIds__, desc.Routing, routerDesc.Routing);
            if(desc.Routing.Count == 0 && routerDesc.Routing.Count == 0)
                return null;
            if(routerDesc.Routing.Count > 0)
            {
                routerDesc.PacketId = 1;
                routerDesc.Type = (int)MessageType.SCList;
                routerDesc.ServiceType = (int) ServiceType.Scene;
                routerDesc.Data = __s__.ToArray();
                Send(routerDesc);
            }
            desc.Type = (int)MessageType.SCList;
            desc.ServiceType = (int) ServiceType.Scene;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// 强制客户端改变坐标
        /// </summary>
        public object SyncCharacterPostion(IEnumerable<ulong> __characterIds__, ulong characterId, PositionData pos)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 3124;
            desc.PacketId = 0;

            var __data__ = new __RPC_Scene_SyncCharacterPostion_ARG_uint64_characterId_PositionData_pos__();
            __data__.CharacterId=characterId;
            __data__.Pos=pos;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            var routerDesc = new ServiceDesc();
            routerDesc.FuncId = 3124;
            CharacterId2ClientId(__characterIds__, desc.Routing, routerDesc.Routing);
            if(desc.Routing.Count == 0 && routerDesc.Routing.Count == 0)
                return null;
            if(routerDesc.Routing.Count > 0)
            {
                routerDesc.PacketId = 1;
                routerDesc.Type = (int)MessageType.SCList;
                routerDesc.ServiceType = (int) ServiceType.Scene;
                routerDesc.Data = __s__.ToArray();
                Send(routerDesc);
            }
            desc.Type = (int)MessageType.SCList;
            desc.ServiceType = (int) ServiceType.Scene;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// 修改pk模式
        /// </summary>
        public IEnumerator ChangePKModel(Coroutine coroutine, ChangePKModelInMessage msg)
        {
            SceneCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.ChangePKModel(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 激活Buff
        /// CS int32  				ActivationAllianceBuff(int32 buffId)=3127;
        /// 直接移动
        /// </summary>
        public IEnumerator FlyTo(Coroutine coroutine, FlyToInMessage msg)
        {
            SceneCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.FlyTo(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 广播战场提示信息
        /// </summary>
        public object NotifyBattleReminder(ulong __characterId__, ulong __clientId__, int type, string info, int param)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 3132;
            desc.CharacterId = __characterId__;
            desc.ClientId = __clientId__;
            desc.PacketId = 0;

            var __data__ = new __RPC_Scene_NotifyBattleReminder_ARG_int32_type_string_info_int32_param__();
            __data__.Type=type;
            __data__.Info=info;
            __data__.Param=param;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            desc.Type = (int)MessageType.SC;
            desc.ServiceType = (int) ServiceType.Scene;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// 同步一个倒计时
        /// </summary>
        public object NotifyCountdown(ulong __characterId__, ulong __clientId__, ulong time, int type)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 3133;
            desc.CharacterId = __characterId__;
            desc.ClientId = __clientId__;
            desc.PacketId = 0;

            var __data__ = new __RPC_Scene_NotifyCountdown_ARG_uint64_time_int32_type__();
            __data__.Time=time;
            __data__.Type=type;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            desc.Type = (int)MessageType.SC;
            desc.ServiceType = (int) ServiceType.Scene;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// 请求附近队伍的所有队长
        /// </summary>
        public IEnumerator ApplySceneTeamLeaderObj(Coroutine coroutine, ApplySceneTeamLeaderObjInMessage msg)
        {
            SceneCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.ApplySceneTeamLeaderObj(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 通知客户端，某只怪物的伤害列表
        /// </summary>
        public object NotifyDamageList(ulong __characterId__, ulong __clientId__, DamageList list)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 3137;
            desc.CharacterId = __characterId__;
            desc.ClientId = __clientId__;
            desc.PacketId = 0;

            var __data__ = new __RPC_Scene_NotifyDamageList_ARG_DamageList_list__();
            __data__.List=list;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            desc.Type = (int)MessageType.SC;
            desc.ServiceType = (int) ServiceType.Scene;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// 通知客户端，任务进度
        /// </summary>
        public object NotifyFubenInfo(ulong __characterId__, ulong __clientId__, FubenInfoMsg info)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 3138;
            desc.CharacterId = __characterId__;
            desc.ClientId = __clientId__;
            desc.PacketId = 0;

            var __data__ = new __RPC_Scene_NotifyFubenInfo_ARG_FubenInfoMsg_info__();
            __data__.Info=info;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            desc.Type = (int)MessageType.SC;
            desc.ServiceType = (int) ServiceType.Scene;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// 通知一些消息 type:0死亡
        /// </summary>
        public object NotifyMessage(ulong __characterId__, ulong __clientId__, int type, string info, int addChat)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 3141;
            desc.CharacterId = __characterId__;
            desc.ClientId = __clientId__;
            desc.PacketId = 0;

            var __data__ = new __RPC_Scene_NotifyMessage_ARG_int32_type_string_info_int32_addChat__();
            __data__.Type=type;
            __data__.Info=info;
            __data__.AddChat=addChat;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            desc.Type = (int)MessageType.SC;
            desc.ServiceType = (int) ServiceType.Scene;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// 通知客户端自己的阵营发生变化
        /// </summary>
        public object NotifyCampChange(ulong __characterId__, ulong __clientId__, int campId, Vector2Int32 pos)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 3142;
            desc.CharacterId = __characterId__;
            desc.ClientId = __clientId__;
            desc.PacketId = 0;

            var __data__ = new __RPC_Scene_NotifyCampChange_ARG_int32_campId_Vector2Int32_pos__();
            __data__.CampId=campId;
            __data__.Pos=pos;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            desc.Type = (int)MessageType.SC;
            desc.ServiceType = (int) ServiceType.Scene;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// 收获离线经验
        /// </summary>
        public IEnumerator GetLeaveExp(Coroutine coroutine, GetLeaveExpInMessage msg)
        {
            SceneCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.GetLeaveExp(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 请求离线经验数据
        /// </summary>
        public IEnumerator ApplyLeaveExp(Coroutine coroutine, ApplyLeaveExpInMessage msg)
        {
            SceneCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.ApplyLeaveExp(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        ///  同步客户端数据
        /// </summary>
        public object SyncDataToClient(IEnumerable<ulong> __characterIds__, SceneSyncData data)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 3150;
            desc.PacketId = 0;

            var __data__ = new __RPC_Scene_SyncDataToClient_ARG_SceneSyncData_data__();
            __data__.Data=data;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            var routerDesc = new ServiceDesc();
            routerDesc.FuncId = 3150;
            CharacterId2ClientId(__characterIds__, desc.Routing, routerDesc.Routing);
            if(desc.Routing.Count == 0 && routerDesc.Routing.Count == 0)
                return null;
            if(routerDesc.Routing.Count > 0)
            {
                routerDesc.PacketId = 1;
                routerDesc.Type = (int)MessageType.SCList;
                routerDesc.ServiceType = (int) ServiceType.Scene;
                routerDesc.Data = __s__.ToArray();
                Send(routerDesc);
            }
            desc.Type = (int)MessageType.SCList;
            desc.ServiceType = (int) ServiceType.Scene;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        ///  同步自己客户端数据
        /// </summary>
        public object SyncMyDataToClient(ulong __characterId__, ulong __clientId__, SceneSyncData data)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 3151;
            desc.CharacterId = __characterId__;
            desc.ClientId = __clientId__;
            desc.PacketId = 0;

            var __data__ = new __RPC_Scene_SyncMyDataToClient_ARG_SceneSyncData_data__();
            __data__.Data=data;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            desc.Type = (int)MessageType.SC;
            desc.ServiceType = (int) ServiceType.Scene;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// 通知客户端，据点状态改变了
        /// </summary>
        public object NotifyStrongpointStateChanged(ulong __characterId__, ulong __clientId__, int camp, int index, int state, float time)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 3153;
            desc.CharacterId = __characterId__;
            desc.ClientId = __clientId__;
            desc.PacketId = 0;

            var __data__ = new __RPC_Scene_NotifyStrongpointStateChanged_ARG_int32_camp_int32_index_int32_state_float_time__();
            __data__.Camp=camp;
            __data__.Index=index;
            __data__.State=state;
            __data__.Time=time;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            desc.Type = (int)MessageType.SC;
            desc.ServiceType = (int) ServiceType.Scene;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// 切换相位场景
        /// </summary>
        public IEnumerator ChangeSceneRequestByMission(Coroutine coroutine, ChangeSceneRequestByMissionInMessage msg)
        {
            SceneCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.ChangeSceneRequestByMission(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 请求玩家坐标
        /// </summary>
        public IEnumerator ApplyPlayerPostionList(Coroutine coroutine, ApplyPlayerPostionListInMessage msg)
        {
            SceneCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.ApplyPlayerPostionList(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 同步NPC位置
        /// </summary>
        public object SyncObjPosition(IEnumerable<ulong> __characterIds__, SyncPathPosMsg msg)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 3156;
            desc.PacketId = 0;

            var __data__ = new __RPC_Scene_SyncObjPosition_ARG_SyncPathPosMsg_msg__();
            __data__.Msg=msg;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            var routerDesc = new ServiceDesc();
            routerDesc.FuncId = 3156;
            CharacterId2ClientId(__characterIds__, desc.Routing, routerDesc.Routing);
            if(desc.Routing.Count == 0 && routerDesc.Routing.Count == 0)
                return null;
            if(routerDesc.Routing.Count > 0)
            {
                routerDesc.PacketId = 1;
                routerDesc.Type = (int)MessageType.SCList;
                routerDesc.ServiceType = (int) ServiceType.Scene;
                routerDesc.Data = __s__.ToArray();
                Send(routerDesc);
            }
            desc.Type = (int)MessageType.SCList;
            desc.ServiceType = (int) ServiceType.Scene;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// 鼓舞
        /// </summary>
        public IEnumerator Inspire(Coroutine coroutine, InspireInMessage msg)
        {
            SceneCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.Inspire(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 服务器通知客户端，某个id的obj说了一句话,如果字典id不为空，就说字典，如果为空，就说字符串
        /// </summary>
        public object ObjSpeak(IEnumerable<ulong> __characterIds__, ulong id, int dictId, string content)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 3160;
            desc.PacketId = 0;

            var __data__ = new __RPC_Scene_ObjSpeak_ARG_uint64_id_int32_dictId_string_content__();
            __data__.Id=id;
            __data__.DictId=dictId;
            __data__.Content=content;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            var routerDesc = new ServiceDesc();
            routerDesc.FuncId = 3160;
            CharacterId2ClientId(__characterIds__, desc.Routing, routerDesc.Routing);
            if(desc.Routing.Count == 0 && routerDesc.Routing.Count == 0)
                return null;
            if(routerDesc.Routing.Count > 0)
            {
                routerDesc.PacketId = 1;
                routerDesc.Type = (int)MessageType.SCList;
                routerDesc.ServiceType = (int) ServiceType.Scene;
                routerDesc.Data = __s__.ToArray();
                Send(routerDesc);
            }
            desc.Type = (int)MessageType.SCList;
            desc.ServiceType = (int) ServiceType.Scene;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// 玩家等级变化同步属性变化值
        /// </summary>
        public object SyncLevelChange(ulong __characterId__, ulong __clientId__, LevelUpAttrData Attr)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 3163;
            desc.CharacterId = __characterId__;
            desc.ClientId = __clientId__;
            desc.PacketId = 0;

            var __data__ = new __RPC_Scene_SyncLevelChange_ARG_LevelUpAttrData_Attr__();
            __data__.Attr=Attr;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            desc.Type = (int)MessageType.SC;
            desc.ServiceType = (int) ServiceType.Scene;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// 攻城战：复活守卫
        /// </summary>
        public IEnumerator AllianceWarRespawnGuard(Coroutine coroutine, AllianceWarRespawnGuardInMessage msg)
        {
            SceneCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.AllianceWarRespawnGuard(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 向玩家通知攻城战npc信息
        /// </summary>
        public object NotifyAllianceWarNpcData(IEnumerable<ulong> __characterIds__, int reliveCount, Int32Array data)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 3166;
            desc.PacketId = 0;

            var __data__ = new __RPC_Scene_NotifyAllianceWarNpcData_ARG_int32_reliveCount_Int32Array_data__();
            __data__.ReliveCount=reliveCount;
            __data__.Data=data;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            var routerDesc = new ServiceDesc();
            routerDesc.FuncId = 3166;
            CharacterId2ClientId(__characterIds__, desc.Routing, routerDesc.Routing);
            if(desc.Routing.Count == 0 && routerDesc.Routing.Count == 0)
                return null;
            if(routerDesc.Routing.Count > 0)
            {
                routerDesc.PacketId = 1;
                routerDesc.Type = (int)MessageType.SCList;
                routerDesc.ServiceType = (int) ServiceType.Scene;
                routerDesc.Data = __s__.ToArray();
                Send(routerDesc);
            }
            desc.Type = (int)MessageType.SCList;
            desc.ServiceType = (int) ServiceType.Scene;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// 向玩家通知场景内玩家的信息，主要是位置信息
        /// </summary>
        public object NotifyScenePlayerInfos(IEnumerable<ulong> __characterIds__, ScenePlayerInfos info)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 3167;
            desc.PacketId = 0;

            var __data__ = new __RPC_Scene_NotifyScenePlayerInfos_ARG_ScenePlayerInfos_info__();
            __data__.Info=info;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            var routerDesc = new ServiceDesc();
            routerDesc.FuncId = 3167;
            CharacterId2ClientId(__characterIds__, desc.Routing, routerDesc.Routing);
            if(desc.Routing.Count == 0 && routerDesc.Routing.Count == 0)
                return null;
            if(routerDesc.Routing.Count > 0)
            {
                routerDesc.PacketId = 1;
                routerDesc.Type = (int)MessageType.SCList;
                routerDesc.ServiceType = (int) ServiceType.Scene;
                routerDesc.Data = __s__.ToArray();
                Send(routerDesc);
            }
            desc.Type = (int)MessageType.SCList;
            desc.ServiceType = (int) ServiceType.Scene;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// 向玩家通知小地图怪物的存活状态
        /// </summary>
        public object NotifyNpcStatus(ulong __characterId__, ulong __clientId__, MapNpcInfos infos)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 3168;
            desc.CharacterId = __characterId__;
            desc.ClientId = __clientId__;
            desc.PacketId = 0;

            var __data__ = new __RPC_Scene_NotifyNpcStatus_ARG_MapNpcInfos_infos__();
            __data__.Infos=infos;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            desc.Type = (int)MessageType.SC;
            desc.ServiceType = (int) ServiceType.Scene;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// 通知客户端，积分列表
        /// </summary>
        public object NotifyPointList(ulong __characterId__, ulong __clientId__, PointList list)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 3173;
            desc.CharacterId = __characterId__;
            desc.ClientId = __clientId__;
            desc.PacketId = 0;

            var __data__ = new __RPC_Scene_NotifyPointList_ARG_PointList_list__();
            __data__.List=list;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            desc.Type = (int)MessageType.SC;
            desc.ServiceType = (int) ServiceType.Scene;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// 通知客户端开始预警
        /// </summary>
        public object NotifyStartWarning(ulong __characterId__, ulong __clientId__, ulong timeOut)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 3174;
            desc.CharacterId = __characterId__;
            desc.ClientId = __clientId__;
            desc.PacketId = 0;

            var __data__ = new __RPC_Scene_NotifyStartWarning_ARG_uint64_timeOut__();
            __data__.TimeOut=timeOut;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            desc.Type = (int)MessageType.SC;
            desc.ServiceType = (int) ServiceType.Scene;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// </summary>
        public IEnumerator GetSceneNpcPos(Coroutine coroutine, GetSceneNpcPosInMessage msg)
        {
            SceneCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.GetSceneNpcPos(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// </summary>
        public object SendMieshiResult(ulong __characterId__, ulong __clientId__, MieshiResultMsg msg)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 3602;
            desc.CharacterId = __characterId__;
            desc.ClientId = __clientId__;
            desc.PacketId = 0;

            var __data__ = new __RPC_Scene_SendMieshiResult_ARG_MieshiResultMsg_msg__();
            __data__.Msg=msg;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            desc.Type = (int)MessageType.SC;
            desc.ServiceType = (int) ServiceType.Scene;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// 通知客户端，刷新副本信息
        /// </summary>
        public object NotifyRefreshDungeonInfo(ulong __characterId__, ulong __clientId__, DungeonInfo info)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 3604;
            desc.CharacterId = __characterId__;
            desc.ClientId = __clientId__;
            desc.PacketId = 0;

            var __data__ = new __RPC_Scene_NotifyRefreshDungeonInfo_ARG_DungeonInfo_info__();
            __data__.Info=info;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            desc.Type = (int)MessageType.SC;
            desc.ServiceType = (int) ServiceType.Scene;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// 通知客户端，开启xp技能引导
        /// </summary>
        public object NotifyStartXpSkillGuide(ulong __characterId__, ulong __clientId__, int placeholder)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 3607;
            desc.CharacterId = __characterId__;
            desc.ClientId = __clientId__;
            desc.PacketId = 0;

            var __data__ = new __RPC_Scene_NotifyStartXpSkillGuide_ARG_int32_placeholder__();
            __data__.Placeholder=placeholder;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            desc.Type = (int)MessageType.SC;
            desc.ServiceType = (int) ServiceType.Scene;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// 通知客户端，开启玛雅武器副本引导
        /// </summary>
        public object NotifyStartMaYaFuBenGuide(ulong __characterId__, ulong __clientId__, int type)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 3608;
            desc.CharacterId = __characterId__;
            desc.ClientId = __clientId__;
            desc.PacketId = 0;

            var __data__ = new __RPC_Scene_NotifyStartMaYaFuBenGuide_ARG_int32_type__();
            __data__.Type=type;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            desc.Type = (int)MessageType.SC;
            desc.ServiceType = (int) ServiceType.Scene;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// 服务端广播爬塔怪物个数
        /// </summary>
        public object BroadcastSceneMonsterCount(ulong __characterId__, ulong __clientId__, int count)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 3610;
            desc.CharacterId = __characterId__;
            desc.ClientId = __clientId__;
            desc.PacketId = 0;

            var __data__ = new __RPC_Scene_BroadcastSceneMonsterCount_ARG_int32_count__();
            __data__.Count=count;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            desc.Type = (int)MessageType.SC;
            desc.ServiceType = (int) ServiceType.Scene;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// 鼓舞
        /// </summary>
        public IEnumerator SummonMonster(Coroutine coroutine, SummonMonsterInMessage msg)
        {
            SceneCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.SummonMonster(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 快速到达目标点
        /// </summary>
        public IEnumerator FastReach(Coroutine coroutine, FastReachInMessage msg)
        {
            SceneCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.FastReach(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 场景内广播消息，dictId不为-1时，优先用字典内容， 字符串可以用"|"分开进行格式化
        /// </summary>
        public object BroadcastSceneChat(IEnumerable<ulong> __characterIds__, string content, int dictId)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 3618;
            desc.PacketId = 0;

            var __data__ = new __RPC_Scene_BroadcastSceneChat_ARG_string_content_int32_dictId__();
            __data__.Content=content;
            __data__.DictId=dictId;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            var routerDesc = new ServiceDesc();
            routerDesc.FuncId = 3618;
            CharacterId2ClientId(__characterIds__, desc.Routing, routerDesc.Routing);
            if(desc.Routing.Count == 0 && routerDesc.Routing.Count == 0)
                return null;
            if(routerDesc.Routing.Count > 0)
            {
                routerDesc.PacketId = 1;
                routerDesc.Type = (int)MessageType.SCList;
                routerDesc.ServiceType = (int) ServiceType.Scene;
                routerDesc.Data = __s__.ToArray();
                Send(routerDesc);
            }
            desc.Type = (int)MessageType.SCList;
            desc.ServiceType = (int) ServiceType.Scene;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// 刷新副本商店购买数据
        /// </summary>
        public object SyncFuBenStore(ulong __characterId__, ulong __clientId__, StoneItems itemlst, int storeType)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 3700;
            desc.CharacterId = __characterId__;
            desc.ClientId = __clientId__;
            desc.PacketId = 0;

            var __data__ = new __RPC_Scene_SyncFuBenStore_ARG_StoneItems_itemlst_int32_storeType__();
            __data__.Itemlst=itemlst;
            __data__.StoreType=storeType;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            desc.Type = (int)MessageType.SC;
            desc.ServiceType = (int) ServiceType.Scene;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// 队伍：有队员场景typeId变化时，同步队员数据
        /// </summary>
        public object NotifyTeamMemberScene(ulong __characterId__, ulong __clientId__, ulong characterId, ulong changeCharacterId, ulong sceneId)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 3701;
            desc.CharacterId = __characterId__;
            desc.ClientId = __clientId__;
            desc.PacketId = 0;

            var __data__ = new __RPC_Scene_NotifyTeamMemberScene_ARG_uint64_characterId_uint64_changeCharacterId_uint64_sceneId__();
            __data__.CharacterId=characterId;
            __data__.ChangeCharacterId=changeCharacterId;
            __data__.SceneId=sceneId;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            desc.Type = (int)MessageType.SC;
            desc.ServiceType = (int) ServiceType.Scene;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// 强制停止移动
        /// </summary>
        public object ForceStopMove(ulong __characterId__, ulong __clientId__, PositionData pos)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 3702;
            desc.CharacterId = __characterId__;
            desc.ClientId = __clientId__;
            desc.PacketId = 0;

            var __data__ = new __RPC_Scene_ForceStopMove_ARG_PositionData_pos__();
            __data__.Pos=pos;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            desc.Type = (int)MessageType.SC;
            desc.ServiceType = (int) ServiceType.Scene;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// 同步倒计时
        /// </summary>
        public object NotifyCommonCountdown(ulong __characterId__, ulong __clientId__, int time)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 3703;
            desc.CharacterId = __characterId__;
            desc.ClientId = __clientId__;
            desc.PacketId = 0;

            var __data__ = new __RPC_Scene_NotifyCommonCountdown_ARG_int32_time__();
            __data__.Time=time;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            desc.Type = (int)MessageType.SC;
            desc.ServiceType = (int) ServiceType.Scene;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// 吃鸡玩法通知客户端升级
        /// </summary>
        public object CK_NotifyClientLevelup(ulong __characterId__, ulong __clientId__, ulong objId, int lv, int exp, Dict_int_int_Data addBuff)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 3705;
            desc.CharacterId = __characterId__;
            desc.ClientId = __clientId__;
            desc.PacketId = 0;

            var __data__ = new __RPC_Scene_CK_NotifyClientLevelup_ARG_uint64_objId_int32_lv_int32_exp_Dict_int_int_Data_addBuff__();
            __data__.ObjId=objId;
            __data__.Lv=lv;
            __data__.Exp=exp;
            __data__.AddBuff=addBuff;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            desc.Type = (int)MessageType.SC;
            desc.ServiceType = (int) ServiceType.Scene;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// 吃鸡玩法通知服务器选择升级Buff
        /// </summary>
        public IEnumerator CK_ApplyLevelupBuff(Coroutine coroutine, CK_ApplyLevelupBuffInMessage msg)
        {
            SceneCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.CK_ApplyLevelupBuff(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 发送吃鸡地图信息
        /// </summary>
        public object CK_NotifyCheckenSceneInfo(ulong __characterId__, ulong __clientId__, MsgCheckenSceneInfo info)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 3707;
            desc.CharacterId = __characterId__;
            desc.ClientId = __clientId__;
            desc.PacketId = 0;

            var __data__ = new __RPC_Scene_CK_NotifyCheckenSceneInfo_ARG_MsgCheckenSceneInfo_info__();
            __data__.Info=info;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            desc.Type = (int)MessageType.SC;
            desc.ServiceType = (int) ServiceType.Scene;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// 发送收到地图伤害
        /// </summary>
        public object CK_NotifyHurt(ulong __characterId__, ulong __clientId__, int placeholder)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 3708;
            desc.CharacterId = __characterId__;
            desc.ClientId = __clientId__;
            desc.PacketId = 0;

            var __data__ = new __RPC_Scene_CK_NotifyHurt_ARG_int32_placeholder__();
            __data__.Placeholder=placeholder;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            desc.Type = (int)MessageType.SC;
            desc.ServiceType = (int) ServiceType.Scene;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// </summary>
        public object CK_NotifyRankList(ulong __characterId__, ulong __clientId__, MsgCheckenRankList rank)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 3709;
            desc.CharacterId = __characterId__;
            desc.ClientId = __clientId__;
            desc.PacketId = 0;

            var __data__ = new __RPC_Scene_CK_NotifyRankList_ARG_MsgCheckenRankList_rank__();
            __data__.Rank=rank;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            desc.Type = (int)MessageType.SC;
            desc.ServiceType = (int) ServiceType.Scene;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// </summary>
        public IEnumerator ApplySolveStuck(Coroutine coroutine, ApplySolveStuckInMessage msg)
        {
            SceneCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.ApplySolveStuck(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 同步模型Id
        /// </summary>
        public object SyncModelId(ulong __characterId__, ulong __clientId__, int model)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 3992;
            desc.CharacterId = __characterId__;
            desc.ClientId = __clientId__;
            desc.PacketId = 0;

            var __data__ = new __RPC_Scene_SyncModelId_ARG_int32_model__();
            __data__.Model=model;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            desc.Type = (int)MessageType.SC;
            desc.ServiceType = (int) ServiceType.Scene;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// GM相关 end
        /// 采矿
        /// </summary>
        public IEnumerator CollectLode(Coroutine coroutine, CollectLodeInMessage msg)
        {
            SceneCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.CollectLode(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 占领矿脉(占旗)
        /// </summary>
        public IEnumerator HoldLode(Coroutine coroutine, HoldLodeInMessage msg)
        {
            SceneCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.HoldLode(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// </summary>
        public object NotifyLodeInfo(ulong __characterId__, ulong __clientId__, MsgSceneLode info)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 3998;
            desc.CharacterId = __characterId__;
            desc.ClientId = __clientId__;
            desc.PacketId = 0;

            var __data__ = new __RPC_Scene_NotifyLodeInfo_ARG_MsgSceneLode_info__();
            __data__.Info=info;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            desc.Type = (int)MessageType.SC;
            desc.ServiceType = (int) ServiceType.Scene;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// </summary>
        public object NotifyPlayEffect(ulong __characterId__, ulong __clientId__, int effectId)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 4002;
            desc.CharacterId = __characterId__;
            desc.ClientId = __clientId__;
            desc.PacketId = 0;

            var __data__ = new __RPC_Scene_NotifyPlayEffect_ARG_int32_effectId__();
            __data__.EffectId=effectId;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            desc.Type = (int)MessageType.SC;
            desc.ServiceType = (int) ServiceType.Scene;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }

        protected override void DispatchMessage(MessageRecievedEvent evt)
        {
            switch (evt.Message.FuncId)
            {
                case 3010:
                {
                    var msg = new BSCreateSceneInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.BSCreateScene(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 3020:
                {
                    var msg = new UnloadDataInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.UnloadData(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 3051:
                {
                    var msg = new PrepareDataForEnterGameInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.PrepareDataForEnterGame(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 3052:
                {
                    var msg = new PrepareDataForCreateCharacterInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.PrepareDataForCreateCharacter(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 3053:
                {
                    var msg = new PrepareDataForCommonUseInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.PrepareDataForCommonUse(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 3054:
                {
                    var msg = new PrepareDataForLogoutInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.PrepareDataForLogout(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 3015:
                {
                    var msg = new CreateCharacterInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.CreateCharacter(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 3016:
                {
                    var msg = new DelectCharacterInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.DelectCharacter(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 3055:
                {
                    var msg = new SSEnterSceneInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.SSEnterScene(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 3056:
                {
                    var msg = new GetSceneSimpleDataInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.GetSceneSimpleData(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 3057:
                {
                    var msg = new CheckConnectedInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.CheckConnected(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 3058:
                {
                    var msg = new CheckLostInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.CheckLost(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 3059:
                {
                    var msg = new QueryStatusInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.QueryStatus(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 3064:
                {
                    var msg = new AskEnterDungeonInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.AskEnterDungeon(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 3065:
                {
                    var msg = new CreateObjAroundInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => CreateObjAround(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 3066:
                {
                    var msg = new NotifyPlayerPickUpFubenRewardInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.NotifyPlayerPickUpFubenReward(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 3073:
                {
                    var msg = new LoginEnterSceneInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.LoginEnterScene(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 3075:
                {
                    var msg = new ApplyPlayerDataInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => ApplyPlayerData(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 3076:
                {
                    var msg = new ChangeSceneOverInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => ChangeSceneOver(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 3077:
                {
                    var msg = new ApplyAttributeInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => ApplyAttribute(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 3081:
                {
                    var msg = new MoveToInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => MoveTo(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 3084:
                {
                    var msg = new StopMoveInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => StopMove(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 3086:
                {
                    var msg = new DirectToInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => DirectTo(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 3088:
                {
                    var msg = new SendUseSkillRequestInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => SendUseSkillRequest(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 3092:
                {
                    var msg = new SceneEquipChangeInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.SceneEquipChange(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 3093:
                {
                    var msg = new SceneSkillChangeInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.SceneSkillChange(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 3094:
                {
                    var msg = new SceneEquipSkillInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.SceneEquipSkill(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 3095:
                {
                    var msg = new SceneInnateChangeInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.SceneInnateChange(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 3096:
                {
                    var msg = new SceneBookAttrChangeInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.SceneBookAttrChange(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 3097:
                {
                    var msg = new GMSceneInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => GMScene(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 3100:
                {
                    var msg = new SendTeleportRequestInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => SendTeleportRequest(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 3101:
                {
                    var msg = new ChangeSceneRequestInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => ChangeSceneRequest(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 3103:
                {
                    var msg = new SceneTeamMessageInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.SceneTeamMessage(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 3104:
                {
                    var msg = new ApplySceneObjInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => ApplySceneObj(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 3105:
                {
                    var msg = new PickUpItemInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => PickUpItem(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 3106:
                {
                    var msg = new SceneChatMessageInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => SceneChatMessage(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 3107:
                {
                    var msg = new UseSkillItemInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.UseSkillItem(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 3108:
                {
                    var msg = new ServerGMCommandInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.ServerGMCommand(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 3109:
                {
                    var msg = new FindCharacterNameInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.FindCharacterName(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 3110:
                {
                    var msg = new FindCharacterFriendInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.FindCharacterFriend(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 3111:
                {
                    var msg = new ExitDungeonInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => ExitDungeon(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 3115:
                {
                    var msg = new NotifySomeClientMessageInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => NotifySomeClientMessage(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 3116:
                {
                    var msg = new MoveToRobotInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => MoveToRobot(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 3117:
                {
                    var msg = new NpcServiceInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => NpcService(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 3119:
                {
                    var msg = new NotifyScenePlayerCityDataInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.NotifyScenePlayerCityData(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 3121:
                {
                    var msg = new ReliveTypeInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => ReliveType(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 3123:
                {
                    var msg = new SSGoToSceneAndPvPInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.SSGoToSceneAndPvP(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 3126:
                {
                    var msg = new ChangePKModelInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => ChangePKModel(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 3128:
                {
                    var msg = new FlyToInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => FlyTo(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 3129:
                {
                    var msg = new SSPvPSceneCampSetInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.SSPvPSceneCampSet(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 3134:
                {
                    var msg = new NotifyCreateSpeMonsterInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.NotifyCreateSpeMonster(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 3135:
                {
                    var msg = new ApplySceneTeamLeaderObjInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => ApplySceneTeamLeaderObj(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 3136:
                {
                    var msg = new SSGetCharacterSceneDataInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.SSGetCharacterSceneData(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 3139:
                {
                    var msg = new BossDieInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.BossDie(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 3140:
                {
                    var msg = new ReadyToEnterInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.ReadyToEnter(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 3143:
                {
                    var msg = new GetLeaveExpInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => GetLeaveExp(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 3144:
                {
                    var msg = new ApplyLeaveExpInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => ApplyLeaveExp(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 3145:
                {
                    var msg = new GetFriendSceneSimpleDataInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.GetFriendSceneSimpleData(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 3146:
                {
                    var msg = new SendAddFriendInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.SendAddFriend(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 3147:
                {
                    var msg = new SendDeleteFriendInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.SendDeleteFriend(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 3148:
                {
                    var msg = new SendOutLineFriendInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.SendOutLineFriend(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 3152:
                {
                    var msg = new SSExitDungeonInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.SSExitDungeon(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 3154:
                {
                    var msg = new ChangeSceneRequestByMissionInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => ChangeSceneRequestByMission(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 3155:
                {
                    var msg = new ApplyPlayerPostionListInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => ApplyPlayerPostionList(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 3157:
                {
                    var msg = new SSAllianceBuffDataChangeInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.SSAllianceBuffDataChange(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 3158:
                {
                    var msg = new SSAllianceDataChangeInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.SSAllianceDataChange(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 3159:
                {
                    var msg = new InspireInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => Inspire(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 3161:
                {
                    var msg = new SceneTitleChangeInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.SceneTitleChange(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 3162:
                {
                    var msg = new NotifyItemCountInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.NotifyItemCount(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 3164:
                {
                    var msg = new AllianceWarRespawnGuardInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => AllianceWarRespawnGuard(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 3165:
                {
                    var msg = new MotifyServerAvgLevelInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.MotifyServerAvgLevel(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 3169:
                {
                    var msg = new AddAutoActvityInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.AddAutoActvity(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 3170:
                {
                    var msg = new SSAddBuffInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.SSAddBuff(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 3171:
                {
                    var msg = new SilenceInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.Silence(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 3172:
                {
                    var msg = new SSApplyNpcHPInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.SSApplyNpcHP(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 3175:
                {
                    var msg = new SSSceneElfChangeInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.SSSceneElfChange(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 3501:
                {
                    var msg = new SSNotifyCharacterOnConnetInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.SSNotifyCharacterOnConnet(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 3503:
                {
                    var msg = new BSNotifyCharacterOnLostInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.BSNotifyCharacterOnLost(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 3600:
                {
                    var msg = new SyncTowerSkillLevelInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.SyncTowerSkillLevel(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 3601:
                {
                    var msg = new GetSceneNpcPosInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => GetSceneNpcPos(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 3603:
                {
                    var msg = new SyncPlayerMieshiContributionInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.SyncPlayerMieshiContribution(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 3606:
                {
                    var msg = new SyncExDataInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.SyncExData(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 3611:
                {
                    var msg = new SummonMonsterInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => SummonMonster(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 3612:
                {
                    var msg = new SyncSceneMountInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.SyncSceneMount(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 3613:
                {
                    var msg = new SSGetFubenStoreItemsInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.SSGetFubenStoreItems(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 3614:
                {
                    var msg = new SSGetFubenStoreItemCountInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.SSGetFubenStoreItemCount(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 3616:
                {
                    var msg = new SSChangeFubenStoreItemInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.SSChangeFubenStoreItem(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 3617:
                {
                    var msg = new FastReachInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => FastReach(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 3619:
                {
                    var msg = new SSBookFightingMonsterIdInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.SSBookFightingMonsterId(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 3704:
                {
                    var msg = new MissionChangeSceneRequestInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.MissionChangeSceneRequest(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 3706:
                {
                    var msg = new CK_ApplyLevelupBuffInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => CK_ApplyLevelupBuff(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 3710:
                {
                    var msg = new ApplySolveStuckInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => ApplySolveStuck(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 3990:
                {
                    var msg = new GetCharacterDataInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.GetCharacterData(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 3991:
                {
                    var msg = new UpdateServerInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.UpdateServer(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 3993:
                {
                    var msg = new GMCommandInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.GMCommand(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 3994:
                {
                    var msg = new CloneCharacterDbByIdInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.CloneCharacterDbById(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 3995:
                {
                    var msg = new CollectLodeInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => CollectLode(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 3996:
                {
                    var msg = new UpdateHoldIdInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.UpdateHoldId(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 3997:
                {
                    var msg = new HoldLodeInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => HoldLode(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 3713:
                {
                    var msg = new NotifyRefreshLodeTimerInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.NotifyRefreshLodeTimer(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 3999:
                {
                    var msg = new SyncFlagDataInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.SyncFlagData(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 4000:
                {
                    var msg = new SceneEquipModelStateChangeInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.SceneEquipModelStateChange(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 3712:
                {
                    var msg = new NodifyModifyPlayerNameInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.NodifyModifyPlayerName(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 3711:
                {
                    var msg = new NotifyRefreshBossHomeInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.NotifyRefreshBossHome(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 3714:
                {
                    var msg = new NotifyBossHomeKillInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.NotifyBossHomeKill(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 3715:
                {
                    var msg = new CheckCanAcceptChallengeInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.CheckCanAcceptChallenge(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                default:
                    break;
            }
        }
    }
    public class SBChangeSceneInMessage : InMessage
    {
        public SBChangeSceneInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Scene_SBChangeScene_ARG_uint64_characterId_int32_serverId_int32_sceneId_uint64_guid_int32_changeType_SceneParam_sceneParam__;
            if (Request.SceneParam == null) throw new ArgumentNullException("SceneParam is null.");

            mResponse = new __RPC_Scene_SBChangeScene_RET_uint64__();
            mResponse.ReturnValue = new ulong();
        }


        public __RPC_Scene_SBChangeScene_ARG_uint64_characterId_int32_serverId_int32_sceneId_uint64_guid_int32_changeType_SceneParam_sceneParam__ Request { get; private set; }

        private __RPC_Scene_SBChangeScene_RET_uint64__ mResponse;
        public ulong Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public SBChangeSceneInMessage Clone()
        { 
            return new SBChangeSceneInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SBDestroySceneInMessage : InMessage
    {
        public SBDestroySceneInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Scene_SBDestroyScene_ARG_uint64_guid__;

            mResponse = new __RPC_Scene_SBDestroyScene_RET_uint64__();
            mResponse.ReturnValue = new ulong();
        }


        public __RPC_Scene_SBDestroyScene_ARG_uint64_guid__ Request { get; private set; }

        private __RPC_Scene_SBDestroyScene_RET_uint64__ mResponse;
        public ulong Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public SBDestroySceneInMessage Clone()
        { 
            return new SBDestroySceneInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class NotifySceneNotExistInMessage : InMessage
    {
        public NotifySceneNotExistInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Scene_NotifySceneNotExist_ARG_uint64_sceneId_uint64_characterId__;

        }


        public __RPC_Scene_NotifySceneNotExist_ARG_uint64_sceneId_uint64_characterId__ Request { get; private set; }

        public NotifySceneNotExistInMessage Clone()
        { 
            return new NotifySceneNotExistInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class BSCreateSceneInMessage : InMessage
    {
        public BSCreateSceneInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Scene_BSCreateScene_ARG_int32_serverId_int32_sceneId_uint64_guid_SceneParam_sceneParam__;
            if (Request.SceneParam == null) throw new ArgumentNullException("SceneParam is null.");

            mResponse = new __RPC_Scene_BSCreateScene_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Scene_BSCreateScene_ARG_int32_serverId_int32_sceneId_uint64_guid_SceneParam_sceneParam__ Request { get; private set; }

        private __RPC_Scene_BSCreateScene_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public BSCreateSceneInMessage Clone()
        { 
            return new BSCreateSceneInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class UnloadDataInMessage : InMessage
    {
        public UnloadDataInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Scene_UnloadData_ARG_uint64_characterId__;

            mResponse = new __RPC_Scene_UnloadData_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Scene_UnloadData_ARG_uint64_characterId__ Request { get; private set; }

        private __RPC_Scene_UnloadData_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public UnloadDataInMessage Clone()
        { 
            return new UnloadDataInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SBGetAllOnlineCharacterInServerInMessage : InMessage
    {
        public SBGetAllOnlineCharacterInServerInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Scene_SBGetAllOnlineCharacterInServer_ARG_int32_serverId__;

            mResponse = new __RPC_Scene_SBGetAllOnlineCharacterInServer_RET_Uint64Array__();
            mResponse.ReturnValue = new Uint64Array();
        }


        public __RPC_Scene_SBGetAllOnlineCharacterInServer_ARG_int32_serverId__ Request { get; private set; }

        private __RPC_Scene_SBGetAllOnlineCharacterInServer_RET_Uint64Array__ mResponse;
        public Uint64Array Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public SBGetAllOnlineCharacterInServerInMessage Clone()
        { 
            return new SBGetAllOnlineCharacterInServerInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SBCheckCharacterOnlineInMessage : InMessage
    {
        public SBCheckCharacterOnlineInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Scene_SBCheckCharacterOnline_ARG_Uint64Array_toList__;
            if (Request.ToList == null) throw new ArgumentNullException("ToList is null.");

            mResponse = new __RPC_Scene_SBCheckCharacterOnline_RET_Int32Array__();
            mResponse.ReturnValue = new Int32Array();
        }


        public __RPC_Scene_SBCheckCharacterOnline_ARG_Uint64Array_toList__ Request { get; private set; }

        private __RPC_Scene_SBCheckCharacterOnline_RET_Int32Array__ mResponse;
        public Int32Array Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public SBCheckCharacterOnlineInMessage Clone()
        { 
            return new SBCheckCharacterOnlineInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class QueryBrokerStatusInMessage : InMessage
    {
        public QueryBrokerStatusInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Scene_QueryBrokerStatus_ARG_uint32_placeholder__;

            mResponse = new __RPC_Scene_QueryBrokerStatus_RET_CommonBrokerStatus__();
            mResponse.ReturnValue = new CommonBrokerStatus();
        }


        public __RPC_Scene_QueryBrokerStatus_ARG_uint32_placeholder__ Request { get; private set; }

        private __RPC_Scene_QueryBrokerStatus_RET_CommonBrokerStatus__ mResponse;
        public CommonBrokerStatus Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public QueryBrokerStatusInMessage Clone()
        { 
            return new QueryBrokerStatusInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SBReloadTableInMessage : InMessage
    {
        public SBReloadTableInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Scene_SBReloadTable_ARG_string_tableName__;

        }


        public __RPC_Scene_SBReloadTable_ARG_string_tableName__ Request { get; private set; }

        public SBReloadTableInMessage Clone()
        { 
            return new SBReloadTableInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class PrepareDataForEnterGameInMessage : InMessage
    {
        public PrepareDataForEnterGameInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Scene_PrepareDataForEnterGame_ARG_int32_serverId__;

            mResponse = new __RPC_Scene_PrepareDataForEnterGame_RET_uint64__();
            mResponse.ReturnValue = new ulong();
        }


        public __RPC_Scene_PrepareDataForEnterGame_ARG_int32_serverId__ Request { get; private set; }

        private __RPC_Scene_PrepareDataForEnterGame_RET_uint64__ mResponse;
        public ulong Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public PrepareDataForEnterGameInMessage Clone()
        { 
            return new PrepareDataForEnterGameInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class PrepareDataForCreateCharacterInMessage : InMessage
    {
        public PrepareDataForCreateCharacterInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Scene_PrepareDataForCreateCharacter_ARG_int32_type__;

            mResponse = new __RPC_Scene_PrepareDataForCreateCharacter_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Scene_PrepareDataForCreateCharacter_ARG_int32_type__ Request { get; private set; }

        private __RPC_Scene_PrepareDataForCreateCharacter_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public PrepareDataForCreateCharacterInMessage Clone()
        { 
            return new PrepareDataForCreateCharacterInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class PrepareDataForCommonUseInMessage : InMessage
    {
        public PrepareDataForCommonUseInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Scene_PrepareDataForCommonUse_ARG_uint32_placeholder__;

            mResponse = new __RPC_Scene_PrepareDataForCommonUse_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Scene_PrepareDataForCommonUse_ARG_uint32_placeholder__ Request { get; private set; }

        private __RPC_Scene_PrepareDataForCommonUse_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public PrepareDataForCommonUseInMessage Clone()
        { 
            return new PrepareDataForCommonUseInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class PrepareDataForLogoutInMessage : InMessage
    {
        public PrepareDataForLogoutInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Scene_PrepareDataForLogout_ARG_uint32_placeholder__;

            mResponse = new __RPC_Scene_PrepareDataForLogout_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Scene_PrepareDataForLogout_ARG_uint32_placeholder__ Request { get; private set; }

        private __RPC_Scene_PrepareDataForLogout_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public PrepareDataForLogoutInMessage Clone()
        { 
            return new PrepareDataForLogoutInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class CreateCharacterInMessage : InMessage
    {
        public CreateCharacterInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Scene_CreateCharacter_ARG_int32_type_bool_isGM__;

            mResponse = new __RPC_Scene_CreateCharacter_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Scene_CreateCharacter_ARG_int32_type_bool_isGM__ Request { get; private set; }

        private __RPC_Scene_CreateCharacter_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public CreateCharacterInMessage Clone()
        { 
            return new CreateCharacterInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class DelectCharacterInMessage : InMessage
    {
        public DelectCharacterInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Scene_DelectCharacter_ARG_int32_type__;

            mResponse = new __RPC_Scene_DelectCharacter_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Scene_DelectCharacter_ARG_int32_type__ Request { get; private set; }

        private __RPC_Scene_DelectCharacter_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public DelectCharacterInMessage Clone()
        { 
            return new DelectCharacterInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SSEnterSceneInMessage : InMessage
    {
        public SSEnterSceneInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Scene_SSEnterScene_ARG_uint64_characterId_uint64_guid_uint64_applyGuid_int32_changeType_SceneParam_sceneParam__;
            if (Request.SceneParam == null) throw new ArgumentNullException("SceneParam is null.");

        }


        public __RPC_Scene_SSEnterScene_ARG_uint64_characterId_uint64_guid_uint64_applyGuid_int32_changeType_SceneParam_sceneParam__ Request { get; private set; }

        public SSEnterSceneInMessage Clone()
        { 
            return new SSEnterSceneInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class GetSceneSimpleDataInMessage : InMessage
    {
        public GetSceneSimpleDataInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Scene_GetSceneSimpleData_ARG_uint32_placeholder__;

            mResponse = new __RPC_Scene_GetSceneSimpleData_RET_SceneSimpleData__();
            mResponse.ReturnValue = new SceneSimpleData();
        }


        public __RPC_Scene_GetSceneSimpleData_ARG_uint32_placeholder__ Request { get; private set; }

        private __RPC_Scene_GetSceneSimpleData_RET_SceneSimpleData__ mResponse;
        public SceneSimpleData Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public GetSceneSimpleDataInMessage Clone()
        { 
            return new GetSceneSimpleDataInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class CheckConnectedInMessage : InMessage
    {
        public CheckConnectedInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Scene_CheckConnected_ARG_uint64_characterId__;

            mResponse = new __RPC_Scene_CheckConnected_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Scene_CheckConnected_ARG_uint64_characterId__ Request { get; private set; }

        private __RPC_Scene_CheckConnected_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public CheckConnectedInMessage Clone()
        { 
            return new CheckConnectedInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class CheckLostInMessage : InMessage
    {
        public CheckLostInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Scene_CheckLost_ARG_uint64_characterId__;

            mResponse = new __RPC_Scene_CheckLost_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Scene_CheckLost_ARG_uint64_characterId__ Request { get; private set; }

        private __RPC_Scene_CheckLost_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public CheckLostInMessage Clone()
        { 
            return new CheckLostInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class QueryStatusInMessage : InMessage
    {
        public QueryStatusInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Scene_QueryStatus_ARG_uint32_placeholder__;

            mResponse = new __RPC_Scene_QueryStatus_RET_SceneServerStatus__();
            mResponse.ReturnValue = new SceneServerStatus();
        }


        public __RPC_Scene_QueryStatus_ARG_uint32_placeholder__ Request { get; private set; }

        private __RPC_Scene_QueryStatus_RET_SceneServerStatus__ mResponse;
        public SceneServerStatus Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public QueryStatusInMessage Clone()
        { 
            return new QueryStatusInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class NotifyConnectedInMessage : InMessage
    {
        public NotifyConnectedInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Scene_NotifyConnected_ARG_uint32_placeholder__;

        }


        public __RPC_Scene_NotifyConnected_ARG_uint32_placeholder__ Request { get; private set; }

        public NotifyConnectedInMessage Clone()
        { 
            return new NotifyConnectedInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class NotifyLostInMessage : InMessage
    {
        public NotifyLostInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Scene_NotifyLost_ARG_uint32_placeholder__;

        }


        public __RPC_Scene_NotifyLost_ARG_uint32_placeholder__ Request { get; private set; }

        public NotifyLostInMessage Clone()
        { 
            return new NotifyLostInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class NotifySceneFinishedInMessage : InMessage
    {
        public NotifySceneFinishedInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Scene_NotifySceneFinished_ARG_uint64_guid__;

        }


        public __RPC_Scene_NotifySceneFinished_ARG_uint64_guid__ Request { get; private set; }

        public NotifySceneFinishedInMessage Clone()
        { 
            return new NotifySceneFinishedInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class AskEnterDungeonInMessage : InMessage
    {
        public AskEnterDungeonInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Scene_AskEnterDungeon_ARG_int32_serverId_int32_sceneId_uint64_guid_SceneParam_param__;
            if (Request.Param == null) throw new ArgumentNullException("Param is null.");

        }


        public __RPC_Scene_AskEnterDungeon_ARG_int32_serverId_int32_sceneId_uint64_guid_SceneParam_param__ Request { get; private set; }

        public AskEnterDungeonInMessage Clone()
        { 
            return new AskEnterDungeonInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class CreateObjAroundInMessage : InMessage
    {
        public CreateObjAroundInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Scene_CreateObjAround_ARG_uint32_placeholder__;

            mResponse = new __RPC_Scene_CreateObjAround_RET_CreateObjMsg__();
            mResponse.ReturnValue = new CreateObjMsg();
        }


        public __RPC_Scene_CreateObjAround_ARG_uint32_placeholder__ Request { get; private set; }

        private __RPC_Scene_CreateObjAround_RET_CreateObjMsg__ mResponse;
        public CreateObjMsg Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public CreateObjAroundInMessage Clone()
        { 
            return new CreateObjAroundInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class NotifyPlayerPickUpFubenRewardInMessage : InMessage
    {
        public NotifyPlayerPickUpFubenRewardInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Scene_NotifyPlayerPickUpFubenReward_ARG_uint64_characterId__;

        }


        public __RPC_Scene_NotifyPlayerPickUpFubenReward_ARG_uint64_characterId__ Request { get; private set; }

        public NotifyPlayerPickUpFubenRewardInMessage Clone()
        { 
            return new NotifyPlayerPickUpFubenRewardInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class SBChangeSceneByTeamInMessage : InMessage
    {
        public SBChangeSceneByTeamInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Scene_SBChangeSceneByTeam_ARG_ChangeSceneInfo_changeSceneData__;
            if (Request.ChangeSceneData == null) throw new ArgumentNullException("ChangeSceneData is null.");

            mResponse = new __RPC_Scene_SBChangeSceneByTeam_RET_uint64__();
            mResponse.ReturnValue = new ulong();
        }


        public __RPC_Scene_SBChangeSceneByTeam_ARG_ChangeSceneInfo_changeSceneData__ Request { get; private set; }

        private __RPC_Scene_SBChangeSceneByTeam_RET_uint64__ mResponse;
        public ulong Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public SBChangeSceneByTeamInMessage Clone()
        { 
            return new SBChangeSceneByTeamInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class MergeSceneByTeamInMessage : InMessage
    {
        public MergeSceneByTeamInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Scene_MergeSceneByTeam_ARG_IdList_ids__;
            if (Request.Ids == null) throw new ArgumentNullException("Ids is null.");

        }


        public __RPC_Scene_MergeSceneByTeam_ARG_IdList_ids__ Request { get; private set; }

        public MergeSceneByTeamInMessage Clone()
        { 
            return new MergeSceneByTeamInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class IsSceneExistInMessage : InMessage
    {
        public IsSceneExistInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Scene_IsSceneExist_ARG_uint64_sceneGuid__;

            mResponse = new __RPC_Scene_IsSceneExist_RET_bool__();
            mResponse.ReturnValue = new bool();
        }


        public __RPC_Scene_IsSceneExist_ARG_uint64_sceneGuid__ Request { get; private set; }

        private __RPC_Scene_IsSceneExist_RET_bool__ mResponse;
        public bool Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public IsSceneExistInMessage Clone()
        { 
            return new IsSceneExistInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class LoginEnterSceneInMessage : InMessage
    {
        public LoginEnterSceneInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Scene_LoginEnterScene_ARG_int32_serverId_int64_logout__;

        }


        public __RPC_Scene_LoginEnterScene_ARG_int32_serverId_int64_logout__ Request { get; private set; }

        public LoginEnterSceneInMessage Clone()
        { 
            return new LoginEnterSceneInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class ApplyPlayerDataInMessage : InMessage
    {
        public ApplyPlayerDataInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Scene_ApplyPlayerData_ARG_int32_placeholder__;

            mResponse = new __RPC_Scene_ApplyPlayerData_RET_PlayerData__();
            mResponse.ReturnValue = new PlayerData();
        }


        public __RPC_Scene_ApplyPlayerData_ARG_int32_placeholder__ Request { get; private set; }

        private __RPC_Scene_ApplyPlayerData_RET_PlayerData__ mResponse;
        public PlayerData Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public ApplyPlayerDataInMessage Clone()
        { 
            return new ApplyPlayerDataInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class ChangeSceneOverInMessage : InMessage
    {
        public ChangeSceneOverInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Scene_ChangeSceneOver_ARG_int32_sceneId_uint64_sceneGuid__;

            mResponse = new __RPC_Scene_ChangeSceneOver_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Scene_ChangeSceneOver_ARG_int32_sceneId_uint64_sceneGuid__ Request { get; private set; }

        private __RPC_Scene_ChangeSceneOver_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public ChangeSceneOverInMessage Clone()
        { 
            return new ChangeSceneOverInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class ApplyAttributeInMessage : InMessage
    {
        public ApplyAttributeInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Scene_ApplyAttribute_ARG_int32_placeholder__;

            mResponse = new __RPC_Scene_ApplyAttribute_RET_Int32Array__();
            mResponse.ReturnValue = new Int32Array();
        }


        public __RPC_Scene_ApplyAttribute_ARG_int32_placeholder__ Request { get; private set; }

        private __RPC_Scene_ApplyAttribute_RET_Int32Array__ mResponse;
        public Int32Array Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public ApplyAttributeInMessage Clone()
        { 
            return new ApplyAttributeInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class MoveToInMessage : InMessage
    {
        public MoveToInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Scene_MoveTo_ARG_int32_sceneId_Vec2Array_targetList_float_offset_int64_time__;
            if (Request.TargetList == null) throw new ArgumentNullException("TargetList is null.");

            mResponse = new __RPC_Scene_MoveTo_RET_PositionData__();
            mResponse.ReturnValue = new PositionData();
        }


        public __RPC_Scene_MoveTo_ARG_int32_sceneId_Vec2Array_targetList_float_offset_int64_time__ Request { get; private set; }

        private __RPC_Scene_MoveTo_RET_PositionData__ mResponse;
        public PositionData Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public MoveToInMessage Clone()
        { 
            return new MoveToInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class StopMoveInMessage : InMessage
    {
        public StopMoveInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Scene_StopMove_ARG_int32_sceneId_PositionData_pos__;
            if (Request.Pos == null) throw new ArgumentNullException("Pos is null.");

            mResponse = new __RPC_Scene_StopMove_RET_PositionData__();
            mResponse.ReturnValue = new PositionData();
        }


        public __RPC_Scene_StopMove_ARG_int32_sceneId_PositionData_pos__ Request { get; private set; }

        private __RPC_Scene_StopMove_RET_PositionData__ mResponse;
        public PositionData Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public StopMoveInMessage Clone()
        { 
            return new StopMoveInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class DirectToInMessage : InMessage
    {
        public DirectToInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Scene_DirectTo_ARG_int32_dirX_int32_dirZ__;

            mResponse = new __RPC_Scene_DirectTo_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Scene_DirectTo_ARG_int32_dirX_int32_dirZ__ Request { get; private set; }

        private __RPC_Scene_DirectTo_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public DirectToInMessage Clone()
        { 
            return new DirectToInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SendUseSkillRequestInMessage : InMessage
    {
        public SendUseSkillRequestInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Scene_SendUseSkillRequest_ARG_int32_sceneId_CharacterUseSkillMsg_msg__;
            if (Request.Msg == null) throw new ArgumentNullException("Msg is null.");

            mResponse = new __RPC_Scene_SendUseSkillRequest_RET_Int32Array__();
            mResponse.ReturnValue = new Int32Array();
        }


        public __RPC_Scene_SendUseSkillRequest_ARG_int32_sceneId_CharacterUseSkillMsg_msg__ Request { get; private set; }

        private __RPC_Scene_SendUseSkillRequest_RET_Int32Array__ mResponse;
        public Int32Array Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public SendUseSkillRequestInMessage Clone()
        { 
            return new SendUseSkillRequestInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SceneEquipChangeInMessage : InMessage
    {
        public SceneEquipChangeInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Scene_SceneEquipChange_ARG_int32_type_int32_part_ItemBaseData_equip__;
            if (Request.Equip == null) throw new ArgumentNullException("Equip is null.");

            mResponse = new __RPC_Scene_SceneEquipChange_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Scene_SceneEquipChange_ARG_int32_type_int32_part_ItemBaseData_equip__ Request { get; private set; }

        private __RPC_Scene_SceneEquipChange_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public SceneEquipChangeInMessage Clone()
        { 
            return new SceneEquipChangeInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SceneSkillChangeInMessage : InMessage
    {
        public SceneSkillChangeInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Scene_SceneSkillChange_ARG_int32_type_int32_id_int32_level__;

            mResponse = new __RPC_Scene_SceneSkillChange_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Scene_SceneSkillChange_ARG_int32_type_int32_id_int32_level__ Request { get; private set; }

        private __RPC_Scene_SceneSkillChange_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public SceneSkillChangeInMessage Clone()
        { 
            return new SceneSkillChangeInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SceneEquipSkillInMessage : InMessage
    {
        public SceneEquipSkillInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Scene_SceneEquipSkill_ARG_Int32Array_delSkills_Int32Array_SkillIds_Int32Array_SkillLevels__;
            if (Request.DelSkills == null) throw new ArgumentNullException("DelSkills is null.");
            if (Request.SkillIds == null) throw new ArgumentNullException("SkillIds is null.");
            if (Request.SkillLevels == null) throw new ArgumentNullException("SkillLevels is null.");

            mResponse = new __RPC_Scene_SceneEquipSkill_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Scene_SceneEquipSkill_ARG_Int32Array_delSkills_Int32Array_SkillIds_Int32Array_SkillLevels__ Request { get; private set; }

        private __RPC_Scene_SceneEquipSkill_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public SceneEquipSkillInMessage Clone()
        { 
            return new SceneEquipSkillInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SceneInnateChangeInMessage : InMessage
    {
        public SceneInnateChangeInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Scene_SceneInnateChange_ARG_int32_type_int32_id_int32_level__;

            mResponse = new __RPC_Scene_SceneInnateChange_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Scene_SceneInnateChange_ARG_int32_type_int32_id_int32_level__ Request { get; private set; }

        private __RPC_Scene_SceneInnateChange_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public SceneInnateChangeInMessage Clone()
        { 
            return new SceneInnateChangeInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SceneBookAttrChangeInMessage : InMessage
    {
        public SceneBookAttrChangeInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Scene_SceneBookAttrChange_ARG_Dict_int_int_Data_attrs_Dict_int_int_Data_monsterAttrs__;
            if (Request.Attrs == null) throw new ArgumentNullException("Attrs is null.");
            if (Request.MonsterAttrs == null) throw new ArgumentNullException("MonsterAttrs is null.");

            mResponse = new __RPC_Scene_SceneBookAttrChange_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Scene_SceneBookAttrChange_ARG_Dict_int_int_Data_attrs_Dict_int_int_Data_monsterAttrs__ Request { get; private set; }

        private __RPC_Scene_SceneBookAttrChange_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public SceneBookAttrChangeInMessage Clone()
        { 
            return new SceneBookAttrChangeInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class GMSceneInMessage : InMessage
    {
        public GMSceneInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Scene_GMScene_ARG_string_commond__;

            mResponse = new __RPC_Scene_GMScene_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Scene_GMScene_ARG_string_commond__ Request { get; private set; }

        private __RPC_Scene_GMScene_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public GMSceneInMessage Clone()
        { 
            return new GMSceneInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SendTeleportRequestInMessage : InMessage
    {
        public SendTeleportRequestInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Scene_SendTeleportRequest_ARG_int32_type__;

            mResponse = new __RPC_Scene_SendTeleportRequest_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Scene_SendTeleportRequest_ARG_int32_type__ Request { get; private set; }

        private __RPC_Scene_SendTeleportRequest_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public SendTeleportRequestInMessage Clone()
        { 
            return new SendTeleportRequestInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class ChangeSceneRequestInMessage : InMessage
    {
        public ChangeSceneRequestInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Scene_ChangeSceneRequest_ARG_int32_sceneId__;

            mResponse = new __RPC_Scene_ChangeSceneRequest_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Scene_ChangeSceneRequest_ARG_int32_sceneId__ Request { get; private set; }

        private __RPC_Scene_ChangeSceneRequest_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public ChangeSceneRequestInMessage Clone()
        { 
            return new ChangeSceneRequestInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SceneTeamMessageInMessage : InMessage
    {
        public SceneTeamMessageInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Scene_SceneTeamMessage_ARG_uint64_characterId_int32_type_uint64_teamId_int32_state__;

            mResponse = new __RPC_Scene_SceneTeamMessage_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Scene_SceneTeamMessage_ARG_uint64_characterId_int32_type_uint64_teamId_int32_state__ Request { get; private set; }

        private __RPC_Scene_SceneTeamMessage_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public SceneTeamMessageInMessage Clone()
        { 
            return new SceneTeamMessageInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class ApplySceneObjInMessage : InMessage
    {
        public ApplySceneObjInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Scene_ApplySceneObj_ARG_int32_placeholder__;

            mResponse = new __RPC_Scene_ApplySceneObj_RET_ObjDataListMsg__();
            mResponse.ReturnValue = new ObjDataListMsg();
        }


        public __RPC_Scene_ApplySceneObj_ARG_int32_placeholder__ Request { get; private set; }

        private __RPC_Scene_ApplySceneObj_RET_ObjDataListMsg__ mResponse;
        public ObjDataListMsg Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public ApplySceneObjInMessage Clone()
        { 
            return new ApplySceneObjInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class PickUpItemInMessage : InMessage
    {
        public PickUpItemInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Scene_PickUpItem_ARG_uint64_dropItemId__;

            mResponse = new __RPC_Scene_PickUpItem_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Scene_PickUpItem_ARG_uint64_dropItemId__ Request { get; private set; }

        private __RPC_Scene_PickUpItem_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public PickUpItemInMessage Clone()
        { 
            return new PickUpItemInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SceneChatMessageInMessage : InMessage
    {
        public SceneChatMessageInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Scene_SceneChatMessage_ARG_int32_chatType_ChatMessageContent_Content_uint64_characterId__;
            if (Request.Content == null) throw new ArgumentNullException("Content is null.");

            mResponse = new __RPC_Scene_SceneChatMessage_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Scene_SceneChatMessage_ARG_int32_chatType_ChatMessageContent_Content_uint64_characterId__ Request { get; private set; }

        private __RPC_Scene_SceneChatMessage_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public SceneChatMessageInMessage Clone()
        { 
            return new SceneChatMessageInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class UseSkillItemInMessage : InMessage
    {
        public UseSkillItemInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Scene_UseSkillItem_ARG_int32_itemId_int32_count_int32_bagId_int32_bagIndex__;

            mResponse = new __RPC_Scene_UseSkillItem_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Scene_UseSkillItem_ARG_int32_itemId_int32_count_int32_bagId_int32_bagIndex__ Request { get; private set; }

        private __RPC_Scene_UseSkillItem_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public UseSkillItemInMessage Clone()
        { 
            return new UseSkillItemInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class ServerGMCommandInMessage : InMessage
    {
        public ServerGMCommandInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Scene_ServerGMCommand_ARG_string_cmd_string_param__;

        }


        public __RPC_Scene_ServerGMCommand_ARG_string_cmd_string_param__ Request { get; private set; }

        public ServerGMCommandInMessage Clone()
        { 
            return new ServerGMCommandInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class FindCharacterNameInMessage : InMessage
    {
        public FindCharacterNameInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Scene_FindCharacterName_ARG_string_likeName__;

            mResponse = new __RPC_Scene_FindCharacterName_RET_CharacterSimpleDatas__();
            mResponse.ReturnValue = new CharacterSimpleDatas();
        }


        public __RPC_Scene_FindCharacterName_ARG_string_likeName__ Request { get; private set; }

        private __RPC_Scene_FindCharacterName_RET_CharacterSimpleDatas__ mResponse;
        public CharacterSimpleDatas Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public FindCharacterNameInMessage Clone()
        { 
            return new FindCharacterNameInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class FindCharacterFriendInMessage : InMessage
    {
        public FindCharacterFriendInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Scene_FindCharacterFriend_ARG_int32_serverId_int32_level__;

            mResponse = new __RPC_Scene_FindCharacterFriend_RET_CharacterSimpleDatas__();
            mResponse.ReturnValue = new CharacterSimpleDatas();
        }


        public __RPC_Scene_FindCharacterFriend_ARG_int32_serverId_int32_level__ Request { get; private set; }

        private __RPC_Scene_FindCharacterFriend_RET_CharacterSimpleDatas__ mResponse;
        public CharacterSimpleDatas Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public FindCharacterFriendInMessage Clone()
        { 
            return new FindCharacterFriendInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class ExitDungeonInMessage : InMessage
    {
        public ExitDungeonInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Scene_ExitDungeon_ARG_int32_type__;

            mResponse = new __RPC_Scene_ExitDungeon_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Scene_ExitDungeon_ARG_int32_type__ Request { get; private set; }

        private __RPC_Scene_ExitDungeon_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public ExitDungeonInMessage Clone()
        { 
            return new ExitDungeonInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class NotifySomeClientMessageInMessage : InMessage
    {
        public NotifySomeClientMessageInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Scene_NotifySomeClientMessage_ARG_int32_type_int32_value__;

            mResponse = new __RPC_Scene_NotifySomeClientMessage_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Scene_NotifySomeClientMessage_ARG_int32_type_int32_value__ Request { get; private set; }

        private __RPC_Scene_NotifySomeClientMessage_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public NotifySomeClientMessageInMessage Clone()
        { 
            return new NotifySomeClientMessageInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class MoveToRobotInMessage : InMessage
    {
        public MoveToRobotInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Scene_MoveToRobot_ARG_Vector2Int32_postion__;
            if (Request.Postion == null) throw new ArgumentNullException("Postion is null.");

            mResponse = new __RPC_Scene_MoveToRobot_RET_Vec2Array__();
            mResponse.ReturnValue = new Vec2Array();
        }


        public __RPC_Scene_MoveToRobot_ARG_Vector2Int32_postion__ Request { get; private set; }

        private __RPC_Scene_MoveToRobot_RET_Vec2Array__ mResponse;
        public Vec2Array Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public MoveToRobotInMessage Clone()
        { 
            return new MoveToRobotInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class NpcServiceInMessage : InMessage
    {
        public NpcServiceInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Scene_NpcService_ARG_uint64_npcGuid_int32_serviceId__;

            mResponse = new __RPC_Scene_NpcService_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Scene_NpcService_ARG_uint64_npcGuid_int32_serviceId__ Request { get; private set; }

        private __RPC_Scene_NpcService_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public NpcServiceInMessage Clone()
        { 
            return new NpcServiceInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class NotifyScenePlayerCityDataInMessage : InMessage
    {
        public NotifyScenePlayerCityDataInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Scene_NotifyScenePlayerCityData_ARG_uint64_sceneGuid_BuildingList_data__;
            if (Request.Data == null) throw new ArgumentNullException("Data is null.");

        }


        public __RPC_Scene_NotifyScenePlayerCityData_ARG_uint64_sceneGuid_BuildingList_data__ Request { get; private set; }

        public NotifyScenePlayerCityDataInMessage Clone()
        { 
            return new NotifyScenePlayerCityDataInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class ReliveTypeInMessage : InMessage
    {
        public ReliveTypeInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Scene_ReliveType_ARG_int32_type__;

            mResponse = new __RPC_Scene_ReliveType_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Scene_ReliveType_ARG_int32_type__ Request { get; private set; }

        private __RPC_Scene_ReliveType_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public ReliveTypeInMessage Clone()
        { 
            return new ReliveTypeInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SSGoToSceneAndPvPInMessage : InMessage
    {
        public SSGoToSceneAndPvPInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Scene_SSGoToSceneAndPvP_ARG_int32_sceneId_uint64_PvPcharacterId__;

            mResponse = new __RPC_Scene_SSGoToSceneAndPvP_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Scene_SSGoToSceneAndPvP_ARG_int32_sceneId_uint64_PvPcharacterId__ Request { get; private set; }

        private __RPC_Scene_SSGoToSceneAndPvP_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public SSGoToSceneAndPvPInMessage Clone()
        { 
            return new SSGoToSceneAndPvPInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class ChangePKModelInMessage : InMessage
    {
        public ChangePKModelInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Scene_ChangePKModel_ARG_int32_pkModel__;

            mResponse = new __RPC_Scene_ChangePKModel_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Scene_ChangePKModel_ARG_int32_pkModel__ Request { get; private set; }

        private __RPC_Scene_ChangePKModel_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public ChangePKModelInMessage Clone()
        { 
            return new ChangePKModelInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class FlyToInMessage : InMessage
    {
        public FlyToInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Scene_FlyTo_ARG_int32_sceneId_Vector2Int32_postion__;
            if (Request.Postion == null) throw new ArgumentNullException("Postion is null.");

            mResponse = new __RPC_Scene_FlyTo_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Scene_FlyTo_ARG_int32_sceneId_Vector2Int32_postion__ Request { get; private set; }

        private __RPC_Scene_FlyTo_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public FlyToInMessage Clone()
        { 
            return new FlyToInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SSPvPSceneCampSetInMessage : InMessage
    {
        public SSPvPSceneCampSetInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Scene_SSPvPSceneCampSet_ARG_int32_type__;

        }


        public __RPC_Scene_SSPvPSceneCampSet_ARG_int32_type__ Request { get; private set; }

        public SSPvPSceneCampSetInMessage Clone()
        { 
            return new SSPvPSceneCampSetInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class NotifyCreateSpeMonsterInMessage : InMessage
    {
        public NotifyCreateSpeMonsterInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Scene_NotifyCreateSpeMonster_ARG_Int32Array_ids__;
            if (Request.Ids == null) throw new ArgumentNullException("Ids is null.");

        }


        public __RPC_Scene_NotifyCreateSpeMonster_ARG_Int32Array_ids__ Request { get; private set; }

        public NotifyCreateSpeMonsterInMessage Clone()
        { 
            return new NotifyCreateSpeMonsterInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class ApplySceneTeamLeaderObjInMessage : InMessage
    {
        public ApplySceneTeamLeaderObjInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Scene_ApplySceneTeamLeaderObj_ARG_int32_placeholder__;

            mResponse = new __RPC_Scene_ApplySceneTeamLeaderObj_RET_ObjDataListMsg__();
            mResponse.ReturnValue = new ObjDataListMsg();
        }


        public __RPC_Scene_ApplySceneTeamLeaderObj_ARG_int32_placeholder__ Request { get; private set; }

        private __RPC_Scene_ApplySceneTeamLeaderObj_RET_ObjDataListMsg__ mResponse;
        public ObjDataListMsg Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public ApplySceneTeamLeaderObjInMessage Clone()
        { 
            return new ApplySceneTeamLeaderObjInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SSGetCharacterSceneDataInMessage : InMessage
    {
        public SSGetCharacterSceneDataInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Scene_SSGetCharacterSceneData_ARG_uint64_characterId__;

            mResponse = new __RPC_Scene_SSGetCharacterSceneData_RET_ObjSceneData__();
            mResponse.ReturnValue = new ObjSceneData();
        }


        public __RPC_Scene_SSGetCharacterSceneData_ARG_uint64_characterId__ Request { get; private set; }

        private __RPC_Scene_SSGetCharacterSceneData_RET_ObjSceneData__ mResponse;
        public ObjSceneData Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public SSGetCharacterSceneDataInMessage Clone()
        { 
            return new SSGetCharacterSceneDataInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class BossDieInMessage : InMessage
    {
        public BossDieInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Scene_BossDie_ARG_int32_serverId__;

        }


        public __RPC_Scene_BossDie_ARG_int32_serverId__ Request { get; private set; }

        public BossDieInMessage Clone()
        { 
            return new BossDieInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class ReadyToEnterInMessage : InMessage
    {
        public ReadyToEnterInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Scene_ReadyToEnter_ARG_int32_placeholder__;

            mResponse = new __RPC_Scene_ReadyToEnter_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Scene_ReadyToEnter_ARG_int32_placeholder__ Request { get; private set; }

        private __RPC_Scene_ReadyToEnter_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public ReadyToEnterInMessage Clone()
        { 
            return new ReadyToEnterInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class GetLeaveExpInMessage : InMessage
    {
        public GetLeaveExpInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Scene_GetLeaveExp_ARG_int32_type_int32_needCount__;

            mResponse = new __RPC_Scene_GetLeaveExp_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Scene_GetLeaveExp_ARG_int32_type_int32_needCount__ Request { get; private set; }

        private __RPC_Scene_GetLeaveExp_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public GetLeaveExpInMessage Clone()
        { 
            return new GetLeaveExpInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class ApplyLeaveExpInMessage : InMessage
    {
        public ApplyLeaveExpInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Scene_ApplyLeaveExp_ARG_int32_placeholder__;

            mResponse = new __RPC_Scene_ApplyLeaveExp_RET_LeaveExpData__();
            mResponse.ReturnValue = new LeaveExpData();
        }


        public __RPC_Scene_ApplyLeaveExp_ARG_int32_placeholder__ Request { get; private set; }

        private __RPC_Scene_ApplyLeaveExp_RET_LeaveExpData__ mResponse;
        public LeaveExpData Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public ApplyLeaveExpInMessage Clone()
        { 
            return new ApplyLeaveExpInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class GetFriendSceneSimpleDataInMessage : InMessage
    {
        public GetFriendSceneSimpleDataInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Scene_GetFriendSceneSimpleData_ARG_int32_type_uint64_haveId_uint64_getId__;

            mResponse = new __RPC_Scene_GetFriendSceneSimpleData_RET_SceneSimpleData__();
            mResponse.ReturnValue = new SceneSimpleData();
        }


        public __RPC_Scene_GetFriendSceneSimpleData_ARG_int32_type_uint64_haveId_uint64_getId__ Request { get; private set; }

        private __RPC_Scene_GetFriendSceneSimpleData_RET_SceneSimpleData__ mResponse;
        public SceneSimpleData Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public GetFriendSceneSimpleDataInMessage Clone()
        { 
            return new GetFriendSceneSimpleDataInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SendAddFriendInMessage : InMessage
    {
        public SendAddFriendInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Scene_SendAddFriend_ARG_int32_type_uint64_haveId_uint64_getId__;

        }


        public __RPC_Scene_SendAddFriend_ARG_int32_type_uint64_haveId_uint64_getId__ Request { get; private set; }

        public SendAddFriendInMessage Clone()
        { 
            return new SendAddFriendInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class SendDeleteFriendInMessage : InMessage
    {
        public SendDeleteFriendInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Scene_SendDeleteFriend_ARG_int32_type_uint64_haveId_uint64_getId__;

        }


        public __RPC_Scene_SendDeleteFriend_ARG_int32_type_uint64_haveId_uint64_getId__ Request { get; private set; }

        public SendDeleteFriendInMessage Clone()
        { 
            return new SendDeleteFriendInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class SendOutLineFriendInMessage : InMessage
    {
        public SendOutLineFriendInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Scene_SendOutLineFriend_ARG_int32_type_uint64_haveId_uint64_getId__;

        }


        public __RPC_Scene_SendOutLineFriend_ARG_int32_type_uint64_haveId_uint64_getId__ Request { get; private set; }

        public SendOutLineFriendInMessage Clone()
        { 
            return new SendOutLineFriendInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class SSExitDungeonInMessage : InMessage
    {
        public SSExitDungeonInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Scene_SSExitDungeon_ARG_int32_placeholder__;

            mResponse = new __RPC_Scene_SSExitDungeon_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Scene_SSExitDungeon_ARG_int32_placeholder__ Request { get; private set; }

        private __RPC_Scene_SSExitDungeon_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public SSExitDungeonInMessage Clone()
        { 
            return new SSExitDungeonInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class ChangeSceneRequestByMissionInMessage : InMessage
    {
        public ChangeSceneRequestByMissionInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Scene_ChangeSceneRequestByMission_ARG_int32_sceneId_int32_missionId__;

            mResponse = new __RPC_Scene_ChangeSceneRequestByMission_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Scene_ChangeSceneRequestByMission_ARG_int32_sceneId_int32_missionId__ Request { get; private set; }

        private __RPC_Scene_ChangeSceneRequestByMission_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public ChangeSceneRequestByMissionInMessage Clone()
        { 
            return new ChangeSceneRequestByMissionInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class ApplyPlayerPostionListInMessage : InMessage
    {
        public ApplyPlayerPostionListInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Scene_ApplyPlayerPostionList_ARG_Uint64Array_characterIds__;
            if (Request.CharacterIds == null) throw new ArgumentNullException("CharacterIds is null.");

            mResponse = new __RPC_Scene_ApplyPlayerPostionList_RET_Vec2Array__();
            mResponse.ReturnValue = new Vec2Array();
        }


        public __RPC_Scene_ApplyPlayerPostionList_ARG_Uint64Array_characterIds__ Request { get; private set; }

        private __RPC_Scene_ApplyPlayerPostionList_RET_Vec2Array__ mResponse;
        public Vec2Array Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public ApplyPlayerPostionListInMessage Clone()
        { 
            return new ApplyPlayerPostionListInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SSAllianceBuffDataChangeInMessage : InMessage
    {
        public SSAllianceBuffDataChangeInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Scene_SSAllianceBuffDataChange_ARG_int32_buffId__;

        }


        public __RPC_Scene_SSAllianceBuffDataChange_ARG_int32_buffId__ Request { get; private set; }

        public SSAllianceBuffDataChangeInMessage Clone()
        { 
            return new SSAllianceBuffDataChangeInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class SSAllianceDataChangeInMessage : InMessage
    {
        public SSAllianceDataChangeInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Scene_SSAllianceDataChange_ARG_int32_alianceId_int32_type_string_name__;

        }


        public __RPC_Scene_SSAllianceDataChange_ARG_int32_alianceId_int32_type_string_name__ Request { get; private set; }

        public SSAllianceDataChangeInMessage Clone()
        { 
            return new SSAllianceDataChangeInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class InspireInMessage : InMessage
    {
        public InspireInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Scene_Inspire_ARG_int32_placeholder__;

            mResponse = new __RPC_Scene_Inspire_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Scene_Inspire_ARG_int32_placeholder__ Request { get; private set; }

        private __RPC_Scene_Inspire_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public InspireInMessage Clone()
        { 
            return new InspireInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SceneTitleChangeInMessage : InMessage
    {
        public SceneTitleChangeInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Scene_SceneTitleChange_ARG_Int32Array_titles_int32_type__;
            if (Request.Titles == null) throw new ArgumentNullException("Titles is null.");

        }


        public __RPC_Scene_SceneTitleChange_ARG_Int32Array_titles_int32_type__ Request { get; private set; }

        public SceneTitleChangeInMessage Clone()
        { 
            return new SceneTitleChangeInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class NotifyItemCountInMessage : InMessage
    {
        public NotifyItemCountInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Scene_NotifyItemCount_ARG_int32_itemId_int32_count__;

        }


        public __RPC_Scene_NotifyItemCount_ARG_int32_itemId_int32_count__ Request { get; private set; }

        public NotifyItemCountInMessage Clone()
        { 
            return new NotifyItemCountInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class AllianceWarRespawnGuardInMessage : InMessage
    {
        public AllianceWarRespawnGuardInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Scene_AllianceWarRespawnGuard_ARG_int32_index__;

            mResponse = new __RPC_Scene_AllianceWarRespawnGuard_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Scene_AllianceWarRespawnGuard_ARG_int32_index__ Request { get; private set; }

        private __RPC_Scene_AllianceWarRespawnGuard_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public AllianceWarRespawnGuardInMessage Clone()
        { 
            return new AllianceWarRespawnGuardInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class MotifyServerAvgLevelInMessage : InMessage
    {
        public MotifyServerAvgLevelInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Scene_MotifyServerAvgLevel_ARG_Dict_int_int_Data_ServerAvgLevel__;
            if (Request.ServerAvgLevel == null) throw new ArgumentNullException("ServerAvgLevel is null.");

        }


        public __RPC_Scene_MotifyServerAvgLevel_ARG_Dict_int_int_Data_ServerAvgLevel__ Request { get; private set; }

        public MotifyServerAvgLevelInMessage Clone()
        { 
            return new MotifyServerAvgLevelInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class AddAutoActvityInMessage : InMessage
    {
        public AddAutoActvityInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Scene_AddAutoActvity_ARG_int32_fubenId_int64_startTime_int64_endTime_int32_count__;

        }


        public __RPC_Scene_AddAutoActvity_ARG_int32_fubenId_int64_startTime_int64_endTime_int32_count__ Request { get; private set; }

        public AddAutoActvityInMessage Clone()
        { 
            return new AddAutoActvityInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class SSAddBuffInMessage : InMessage
    {
        public SSAddBuffInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Scene_SSAddBuff_ARG_uint64_characterId_int32_buffId_int32_buffLevel__;

        }


        public __RPC_Scene_SSAddBuff_ARG_uint64_characterId_int32_buffId_int32_buffLevel__ Request { get; private set; }

        public SSAddBuffInMessage Clone()
        { 
            return new SSAddBuffInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class SilenceInMessage : InMessage
    {
        public SilenceInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Scene_Silence_ARG_uint32_mask__;

            mResponse = new __RPC_Scene_Silence_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Scene_Silence_ARG_uint32_mask__ Request { get; private set; }

        private __RPC_Scene_Silence_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public SilenceInMessage Clone()
        { 
            return new SilenceInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SSApplyNpcHPInMessage : InMessage
    {
        public SSApplyNpcHPInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Scene_SSApplyNpcHP_ARG_int32_serverId_int32_sceneId_uint64_npcGuid__;

            mResponse = new __RPC_Scene_SSApplyNpcHP_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Scene_SSApplyNpcHP_ARG_int32_serverId_int32_sceneId_uint64_npcGuid__ Request { get; private set; }

        private __RPC_Scene_SSApplyNpcHP_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public SSApplyNpcHPInMessage Clone()
        { 
            return new SSApplyNpcHPInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SSSceneElfChangeInMessage : InMessage
    {
        public SSSceneElfChangeInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Scene_SSSceneElfChange_ARG_Int32Array_removeBuff_Dict_int_int_Data_addBuff_int32_fightPoint__;
            if (Request.RemoveBuff == null) throw new ArgumentNullException("RemoveBuff is null.");
            if (Request.AddBuff == null) throw new ArgumentNullException("AddBuff is null.");

            mResponse = new __RPC_Scene_SSSceneElfChange_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Scene_SSSceneElfChange_ARG_Int32Array_removeBuff_Dict_int_int_Data_addBuff_int32_fightPoint__ Request { get; private set; }

        private __RPC_Scene_SSSceneElfChange_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public SSSceneElfChangeInMessage Clone()
        { 
            return new SSSceneElfChangeInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SBReconnectNotifySceneInMessage : InMessage
    {
        public SBReconnectNotifySceneInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Scene_SBReconnectNotifyScene_ARG_uint64_oldclientId_uint64_newclientId_uint64_characterId__;

        }


        public __RPC_Scene_SBReconnectNotifyScene_ARG_uint64_oldclientId_uint64_newclientId_uint64_characterId__ Request { get; private set; }

        public SBReconnectNotifySceneInMessage Clone()
        { 
            return new SBReconnectNotifySceneInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class SBCleanClientCharacterDataInMessage : InMessage
    {
        public SBCleanClientCharacterDataInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Scene_SBCleanClientCharacterData_ARG_uint64_clientId_uint64_characterId__;

        }


        public __RPC_Scene_SBCleanClientCharacterData_ARG_uint64_clientId_uint64_characterId__ Request { get; private set; }

        public SBCleanClientCharacterDataInMessage Clone()
        { 
            return new SBCleanClientCharacterDataInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class SSNotifyCharacterOnConnetInMessage : InMessage
    {
        public SSNotifyCharacterOnConnetInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Scene_SSNotifyCharacterOnConnet_ARG_uint64_clientId_uint64_characterId__;

            mResponse = new __RPC_Scene_SSNotifyCharacterOnConnet_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Scene_SSNotifyCharacterOnConnet_ARG_uint64_clientId_uint64_characterId__ Request { get; private set; }

        private __RPC_Scene_SSNotifyCharacterOnConnet_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public SSNotifyCharacterOnConnetInMessage Clone()
        { 
            return new SSNotifyCharacterOnConnetInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SBGetServerCharacterCountInMessage : InMessage
    {
        public SBGetServerCharacterCountInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Scene_SBGetServerCharacterCount_ARG_uint32_placeholder__;

            mResponse = new __RPC_Scene_SBGetServerCharacterCount_RET_Dict_int_int_Data__();
            mResponse.ReturnValue = new Dict_int_int_Data();
        }


        public __RPC_Scene_SBGetServerCharacterCount_ARG_uint32_placeholder__ Request { get; private set; }

        private __RPC_Scene_SBGetServerCharacterCount_RET_Dict_int_int_Data__ mResponse;
        public Dict_int_int_Data Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public SBGetServerCharacterCountInMessage Clone()
        { 
            return new SBGetServerCharacterCountInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class BSNotifyCharacterOnLostInMessage : InMessage
    {
        public BSNotifyCharacterOnLostInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Scene_BSNotifyCharacterOnLost_ARG_uint64_clientId_uint64_characterId__;

        }


        public __RPC_Scene_BSNotifyCharacterOnLost_ARG_uint64_clientId_uint64_characterId__ Request { get; private set; }

        public BSNotifyCharacterOnLostInMessage Clone()
        { 
            return new BSNotifyCharacterOnLostInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class SyncTowerSkillLevelInMessage : InMessage
    {
        public SyncTowerSkillLevelInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Scene_SyncTowerSkillLevel_ARG_uint64_sceneGuid_int32_towerId_int32_level__;

        }


        public __RPC_Scene_SyncTowerSkillLevel_ARG_uint64_sceneGuid_int32_towerId_int32_level__ Request { get; private set; }

        public SyncTowerSkillLevelInMessage Clone()
        { 
            return new SyncTowerSkillLevelInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class GetSceneNpcPosInMessage : InMessage
    {
        public GetSceneNpcPosInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Scene_GetSceneNpcPos_ARG_uint32_placeholder__;

            mResponse = new __RPC_Scene_GetSceneNpcPos_RET_SceneNpcPosList__();
            mResponse.ReturnValue = new SceneNpcPosList();
        }


        public __RPC_Scene_GetSceneNpcPos_ARG_uint32_placeholder__ Request { get; private set; }

        private __RPC_Scene_GetSceneNpcPos_RET_SceneNpcPosList__ mResponse;
        public SceneNpcPosList Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public GetSceneNpcPosInMessage Clone()
        { 
            return new GetSceneNpcPosInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SyncPlayerMieshiContributionInMessage : InMessage
    {
        public SyncPlayerMieshiContributionInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Scene_SyncPlayerMieshiContribution_ARG_uint64_sceneGuid_uint64_characterId_int32_Contribution_string_name_float_rate__;

        }


        public __RPC_Scene_SyncPlayerMieshiContribution_ARG_uint64_sceneGuid_uint64_characterId_int32_Contribution_string_name_float_rate__ Request { get; private set; }

        public SyncPlayerMieshiContributionInMessage Clone()
        { 
            return new SyncPlayerMieshiContributionInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class RequestSceneInfoInMessage : InMessage
    {
        public RequestSceneInfoInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Scene_RequestSceneInfo_ARG_int32_serverId_int32_sceneTypeId__;

            mResponse = new __RPC_Scene_RequestSceneInfo_RET_MsgScenesInfo__();
            mResponse.ReturnValue = new MsgScenesInfo();
        }


        public __RPC_Scene_RequestSceneInfo_ARG_int32_serverId_int32_sceneTypeId__ Request { get; private set; }

        private __RPC_Scene_RequestSceneInfo_RET_MsgScenesInfo__ mResponse;
        public MsgScenesInfo Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public RequestSceneInfoInMessage Clone()
        { 
            return new RequestSceneInfoInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SyncExDataInMessage : InMessage
    {
        public SyncExDataInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Scene_SyncExData_ARG_Dict_int_int_Data_changes__;
            if (Request.Changes == null) throw new ArgumentNullException("Changes is null.");

            mResponse = new __RPC_Scene_SyncExData_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Scene_SyncExData_ARG_Dict_int_int_Data_changes__ Request { get; private set; }

        private __RPC_Scene_SyncExData_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public SyncExDataInMessage Clone()
        { 
            return new SyncExDataInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SummonMonsterInMessage : InMessage
    {
        public SummonMonsterInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Scene_SummonMonster_ARG_int32_monsterId__;

            mResponse = new __RPC_Scene_SummonMonster_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Scene_SummonMonster_ARG_int32_monsterId__ Request { get; private set; }

        private __RPC_Scene_SummonMonster_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public SummonMonsterInMessage Clone()
        { 
            return new SummonMonsterInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SyncSceneMountInMessage : InMessage
    {
        public SyncSceneMountInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Scene_SyncSceneMount_ARG_int32_MountId__;

        }


        public __RPC_Scene_SyncSceneMount_ARG_int32_MountId__ Request { get; private set; }

        public SyncSceneMountInMessage Clone()
        { 
            return new SyncSceneMountInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class SSGetFubenStoreItemsInMessage : InMessage
    {
        public SSGetFubenStoreItemsInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Scene_SSGetFubenStoreItems_ARG_int32_shopType__;

            mResponse = new __RPC_Scene_SSGetFubenStoreItems_RET_StoneItems__();
            mResponse.ReturnValue = new StoneItems();
        }


        public __RPC_Scene_SSGetFubenStoreItems_ARG_int32_shopType__ Request { get; private set; }

        private __RPC_Scene_SSGetFubenStoreItems_RET_StoneItems__ mResponse;
        public StoneItems Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public SSGetFubenStoreItemsInMessage Clone()
        { 
            return new SSGetFubenStoreItemsInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SSGetFubenStoreItemCountInMessage : InMessage
    {
        public SSGetFubenStoreItemCountInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Scene_SSGetFubenStoreItemCount_ARG_int32_shopType_int32_id__;

            mResponse = new __RPC_Scene_SSGetFubenStoreItemCount_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Scene_SSGetFubenStoreItemCount_ARG_int32_shopType_int32_id__ Request { get; private set; }

        private __RPC_Scene_SSGetFubenStoreItemCount_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public SSGetFubenStoreItemCountInMessage Clone()
        { 
            return new SSGetFubenStoreItemCountInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SSChangeFubenStoreItemInMessage : InMessage
    {
        public SSChangeFubenStoreItemInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Scene_SSChangeFubenStoreItem_ARG_int32_shopType_int32_id_int32_num__;

            mResponse = new __RPC_Scene_SSChangeFubenStoreItem_RET_bool__();
            mResponse.ReturnValue = new bool();
        }


        public __RPC_Scene_SSChangeFubenStoreItem_ARG_int32_shopType_int32_id_int32_num__ Request { get; private set; }

        private __RPC_Scene_SSChangeFubenStoreItem_RET_bool__ mResponse;
        public bool Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public SSChangeFubenStoreItemInMessage Clone()
        { 
            return new SSChangeFubenStoreItemInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class FastReachInMessage : InMessage
    {
        public FastReachInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Scene_FastReach_ARG_int32_sceneId_Vector2Int32_postion__;
            if (Request.Postion == null) throw new ArgumentNullException("Postion is null.");

            mResponse = new __RPC_Scene_FastReach_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Scene_FastReach_ARG_int32_sceneId_Vector2Int32_postion__ Request { get; private set; }

        private __RPC_Scene_FastReach_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public FastReachInMessage Clone()
        { 
            return new FastReachInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SSBookFightingMonsterIdInMessage : InMessage
    {
        public SSBookFightingMonsterIdInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Scene_SSBookFightingMonsterId_ARG_int32_handbookId__;

        }


        public __RPC_Scene_SSBookFightingMonsterId_ARG_int32_handbookId__ Request { get; private set; }

        public SSBookFightingMonsterIdInMessage Clone()
        { 
            return new SSBookFightingMonsterIdInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class MissionChangeSceneRequestInMessage : InMessage
    {
        public MissionChangeSceneRequestInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Scene_MissionChangeSceneRequest_ARG_int32_transId__;

            mResponse = new __RPC_Scene_MissionChangeSceneRequest_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Scene_MissionChangeSceneRequest_ARG_int32_transId__ Request { get; private set; }

        private __RPC_Scene_MissionChangeSceneRequest_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public MissionChangeSceneRequestInMessage Clone()
        { 
            return new MissionChangeSceneRequestInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class CK_ApplyLevelupBuffInMessage : InMessage
    {
        public CK_ApplyLevelupBuffInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Scene_CK_ApplyLevelupBuff_ARG_int32_buffId__;

        }


        public __RPC_Scene_CK_ApplyLevelupBuff_ARG_int32_buffId__ Request { get; private set; }

        public CK_ApplyLevelupBuffInMessage Clone()
        { 
            return new CK_ApplyLevelupBuffInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class ApplySolveStuckInMessage : InMessage
    {
        public ApplySolveStuckInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Scene_ApplySolveStuck_ARG_int32_placeholder__;

        }


        public __RPC_Scene_ApplySolveStuck_ARG_int32_placeholder__ Request { get; private set; }

        public ApplySolveStuckInMessage Clone()
        { 
            return new ApplySolveStuckInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class GetCharacterDataInMessage : InMessage
    {
        public GetCharacterDataInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Scene_GetCharacterData_ARG_uint64_id__;

            mResponse = new __RPC_Scene_GetCharacterData_RET_GMCharacterDetailInfo__();
            mResponse.ReturnValue = new GMCharacterDetailInfo();
        }


        public __RPC_Scene_GetCharacterData_ARG_uint64_id__ Request { get; private set; }

        private __RPC_Scene_GetCharacterData_RET_GMCharacterDetailInfo__ mResponse;
        public GMCharacterDetailInfo Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public GetCharacterDataInMessage Clone()
        { 
            return new GetCharacterDataInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class UpdateServerInMessage : InMessage
    {
        public UpdateServerInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Scene_UpdateServer_ARG_int32_placeholder__;

        }


        public __RPC_Scene_UpdateServer_ARG_int32_placeholder__ Request { get; private set; }

        public UpdateServerInMessage Clone()
        { 
            return new UpdateServerInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class GMCommandInMessage : InMessage
    {
        public GMCommandInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Scene_GMCommand_ARG_StringArray_commonds__;
            if (Request.Commonds == null) throw new ArgumentNullException("Commonds is null.");

            mResponse = new __RPC_Scene_GMCommand_RET_Int32Array__();
            mResponse.ReturnValue = new Int32Array();
        }


        public __RPC_Scene_GMCommand_ARG_StringArray_commonds__ Request { get; private set; }

        private __RPC_Scene_GMCommand_RET_Int32Array__ mResponse;
        public Int32Array Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public GMCommandInMessage Clone()
        { 
            return new GMCommandInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class CloneCharacterDbByIdInMessage : InMessage
    {
        public CloneCharacterDbByIdInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Scene_CloneCharacterDbById_ARG_uint64_fromId_uint64_toId__;

            mResponse = new __RPC_Scene_CloneCharacterDbById_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Scene_CloneCharacterDbById_ARG_uint64_fromId_uint64_toId__ Request { get; private set; }

        private __RPC_Scene_CloneCharacterDbById_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public CloneCharacterDbByIdInMessage Clone()
        { 
            return new CloneCharacterDbByIdInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class CollectLodeInMessage : InMessage
    {
        public CollectLodeInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Scene_CollectLode_ARG_int32_LodeId__;

            mResponse = new __RPC_Scene_CollectLode_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Scene_CollectLode_ARG_int32_LodeId__ Request { get; private set; }

        private __RPC_Scene_CollectLode_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public CollectLodeInMessage Clone()
        { 
            return new CollectLodeInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class UpdateHoldIdInMessage : InMessage
    {
        public UpdateHoldIdInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Scene_UpdateHoldId_ARG_int32_GuildId__;

            mResponse = new __RPC_Scene_UpdateHoldId_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Scene_UpdateHoldId_ARG_int32_GuildId__ Request { get; private set; }

        private __RPC_Scene_UpdateHoldId_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public UpdateHoldIdInMessage Clone()
        { 
            return new UpdateHoldIdInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class HoldLodeInMessage : InMessage
    {
        public HoldLodeInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Scene_HoldLode_ARG_int32_param__;

            mResponse = new __RPC_Scene_HoldLode_RET_string__();
            mResponse.ReturnValue = string.Empty;
        }


        public __RPC_Scene_HoldLode_ARG_int32_param__ Request { get; private set; }

        private __RPC_Scene_HoldLode_RET_string__ mResponse;
        public string Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public HoldLodeInMessage Clone()
        { 
            return new HoldLodeInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class NotifyRefreshLodeTimerInMessage : InMessage
    {
        public NotifyRefreshLodeTimerInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Scene_NotifyRefreshLodeTimer_ARG_int32_ServerId_Int32Array_ids__;
            if (Request.Ids == null) throw new ArgumentNullException("Ids is null.");

        }


        public __RPC_Scene_NotifyRefreshLodeTimer_ARG_int32_ServerId_Int32Array_ids__ Request { get; private set; }

        public NotifyRefreshLodeTimerInMessage Clone()
        { 
            return new NotifyRefreshLodeTimerInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class SyncFlagDataInMessage : InMessage
    {
        public SyncFlagDataInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Scene_SyncFlagData_ARG_Dict_int_int_Data_changes__;
            if (Request.Changes == null) throw new ArgumentNullException("Changes is null.");

            mResponse = new __RPC_Scene_SyncFlagData_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Scene_SyncFlagData_ARG_Dict_int_int_Data_changes__ Request { get; private set; }

        private __RPC_Scene_SyncFlagData_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public SyncFlagDataInMessage Clone()
        { 
            return new SyncFlagDataInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SceneEquipModelStateChangeInMessage : InMessage
    {
        public SceneEquipModelStateChangeInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Scene_SceneEquipModelStateChange_ARG_int32_part_int32_state_ItemBaseData_equip__;
            if (Request.Equip == null) throw new ArgumentNullException("Equip is null.");

            mResponse = new __RPC_Scene_SceneEquipModelStateChange_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Scene_SceneEquipModelStateChange_ARG_int32_part_int32_state_ItemBaseData_equip__ Request { get; private set; }

        private __RPC_Scene_SceneEquipModelStateChange_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public SceneEquipModelStateChangeInMessage Clone()
        { 
            return new SceneEquipModelStateChangeInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class NodifyModifyPlayerNameInMessage : InMessage
    {
        public NodifyModifyPlayerNameInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Scene_NodifyModifyPlayerName_ARG_uint64_characterId_string_modifyName__;

        }


        public __RPC_Scene_NodifyModifyPlayerName_ARG_uint64_characterId_string_modifyName__ Request { get; private set; }

        public NodifyModifyPlayerNameInMessage Clone()
        { 
            return new NodifyModifyPlayerNameInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class NotifyRefreshBossHomeInMessage : InMessage
    {
        public NotifyRefreshBossHomeInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Scene_NotifyRefreshBossHome_ARG_Int32Array_ids__;
            if (Request.Ids == null) throw new ArgumentNullException("Ids is null.");

        }


        public __RPC_Scene_NotifyRefreshBossHome_ARG_Int32Array_ids__ Request { get; private set; }

        public NotifyRefreshBossHomeInMessage Clone()
        { 
            return new NotifyRefreshBossHomeInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class NotifyBossHomeKillInMessage : InMessage
    {
        public NotifyBossHomeKillInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Scene_NotifyBossHomeKill_ARG_int32_placeholder__;

        }


        public __RPC_Scene_NotifyBossHomeKill_ARG_int32_placeholder__ Request { get; private set; }

        public NotifyBossHomeKillInMessage Clone()
        { 
            return new NotifyBossHomeKillInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class CheckCanAcceptChallengeInMessage : InMessage
    {
        public CheckCanAcceptChallengeInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Scene_CheckCanAcceptChallenge_ARG_int32_placeholder__;

            mResponse = new __RPC_Scene_CheckCanAcceptChallenge_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Scene_CheckCanAcceptChallenge_ARG_int32_placeholder__ Request { get; private set; }

        private __RPC_Scene_CheckCanAcceptChallenge_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public CheckCanAcceptChallengeInMessage Clone()
        { 
            return new CheckCanAcceptChallengeInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public interface ISceneCharacterProxy
    {
        /// <summary>
        /// 请求玩家周围的所有东西
        /// </summary>
        IEnumerator CreateObjAround(Coroutine coroutine, SceneCharacterProxy _this, CreateObjAroundInMessage msg);
        /// <summary>
        /// 客户端请求PlayerData
        /// </summary>
        IEnumerator ApplyPlayerData(Coroutine coroutine, SceneCharacterProxy _this, ApplyPlayerDataInMessage msg);
        /// <summary>
        /// 客户端已经进入场景
        /// </summary>
        IEnumerator ChangeSceneOver(Coroutine coroutine, SceneCharacterProxy _this, ChangeSceneOverInMessage msg);
        /// <summary>
        /// 客户端请求属性数据
        /// </summary>
        IEnumerator ApplyAttribute(Coroutine coroutine, SceneCharacterProxy _this, ApplyAttributeInMessage msg);
        /// <summary>
        /// 主角移动
        /// </summary>
        IEnumerator MoveTo(Coroutine coroutine, SceneCharacterProxy _this, MoveToInMessage msg);
        /// <summary>
        /// 主角停止移动
        /// </summary>
        IEnumerator StopMove(Coroutine coroutine, SceneCharacterProxy _this, StopMoveInMessage msg);
        /// <summary>
        /// 主角朝向
        /// </summary>
        IEnumerator DirectTo(Coroutine coroutine, SceneCharacterProxy _this, DirectToInMessage msg);
        /// <summary>
        /// 客户端请求使用技能
        /// </summary>
        IEnumerator SendUseSkillRequest(Coroutine coroutine, SceneCharacterProxy _this, SendUseSkillRequestInMessage msg);
        /// <summary>
        /// GM命令
        /// </summary>
        IEnumerator GMScene(Coroutine coroutine, SceneCharacterProxy _this, GMSceneInMessage msg);
        /// <summary>
        /// 传送
        /// </summary>
        IEnumerator SendTeleportRequest(Coroutine coroutine, SceneCharacterProxy _this, SendTeleportRequestInMessage msg);
        /// <summary>
        /// 切换场景
        /// </summary>
        IEnumerator ChangeSceneRequest(Coroutine coroutine, SceneCharacterProxy _this, ChangeSceneRequestInMessage msg);
        /// <summary>
        /// 请求场景内没有队伍的所有玩家
        /// </summary>
        IEnumerator ApplySceneObj(Coroutine coroutine, SceneCharacterProxy _this, ApplySceneObjInMessage msg);
        /// <summary>
        /// 拾取物品
        /// </summary>
        IEnumerator PickUpItem(Coroutine coroutine, SceneCharacterProxy _this, PickUpItemInMessage msg);
        /// <summary>
        /// 接受聊天数据
        /// </summary>
        IEnumerator SceneChatMessage(Coroutine coroutine, SceneCharacterProxy _this, SceneChatMessageInMessage msg);
        /// <summary>
        /// 退出副本
        /// -1 普通
        /// 0 强制切场景
        /// </summary>
        IEnumerator ExitDungeon(Coroutine coroutine, SceneCharacterProxy _this, ExitDungeonInMessage msg);
        /// <summary>
        /// 通知一些客户端事情
        /// </summary>
        IEnumerator NotifySomeClientMessage(Coroutine coroutine, SceneCharacterProxy _this, NotifySomeClientMessageInMessage msg);
        /// <summary>
        /// </summary>
        IEnumerator MoveToRobot(Coroutine coroutine, SceneCharacterProxy _this, MoveToRobotInMessage msg);
        /// <summary>
        /// NPC服务
        /// </summary>
        IEnumerator NpcService(Coroutine coroutine, SceneCharacterProxy _this, NpcServiceInMessage msg);
        /// <summary>
        /// 复活的选项
        /// </summary>
        IEnumerator ReliveType(Coroutine coroutine, SceneCharacterProxy _this, ReliveTypeInMessage msg);
        /// <summary>
        /// 修改pk模式
        /// </summary>
        IEnumerator ChangePKModel(Coroutine coroutine, SceneCharacterProxy _this, ChangePKModelInMessage msg);
        /// <summary>
        /// 激活Buff
        /// CS int32  				ActivationAllianceBuff(int32 buffId)=3127;
        /// 直接移动
        /// </summary>
        IEnumerator FlyTo(Coroutine coroutine, SceneCharacterProxy _this, FlyToInMessage msg);
        /// <summary>
        /// 请求附近队伍的所有队长
        /// </summary>
        IEnumerator ApplySceneTeamLeaderObj(Coroutine coroutine, SceneCharacterProxy _this, ApplySceneTeamLeaderObjInMessage msg);
        /// <summary>
        /// 收获离线经验
        /// </summary>
        IEnumerator GetLeaveExp(Coroutine coroutine, SceneCharacterProxy _this, GetLeaveExpInMessage msg);
        /// <summary>
        /// 请求离线经验数据
        /// </summary>
        IEnumerator ApplyLeaveExp(Coroutine coroutine, SceneCharacterProxy _this, ApplyLeaveExpInMessage msg);
        /// <summary>
        /// 切换相位场景
        /// </summary>
        IEnumerator ChangeSceneRequestByMission(Coroutine coroutine, SceneCharacterProxy _this, ChangeSceneRequestByMissionInMessage msg);
        /// <summary>
        /// 请求玩家坐标
        /// </summary>
        IEnumerator ApplyPlayerPostionList(Coroutine coroutine, SceneCharacterProxy _this, ApplyPlayerPostionListInMessage msg);
        /// <summary>
        /// 鼓舞
        /// </summary>
        IEnumerator Inspire(Coroutine coroutine, SceneCharacterProxy _this, InspireInMessage msg);
        /// <summary>
        /// 攻城战：复活守卫
        /// </summary>
        IEnumerator AllianceWarRespawnGuard(Coroutine coroutine, SceneCharacterProxy _this, AllianceWarRespawnGuardInMessage msg);
        /// <summary>
        /// </summary>
        IEnumerator GetSceneNpcPos(Coroutine coroutine, SceneCharacterProxy _this, GetSceneNpcPosInMessage msg);
        /// <summary>
        /// 鼓舞
        /// </summary>
        IEnumerator SummonMonster(Coroutine coroutine, SceneCharacterProxy _this, SummonMonsterInMessage msg);
        /// <summary>
        /// 快速到达目标点
        /// </summary>
        IEnumerator FastReach(Coroutine coroutine, SceneCharacterProxy _this, FastReachInMessage msg);
        /// <summary>
        /// 吃鸡玩法通知服务器选择升级Buff
        /// </summary>
        IEnumerator CK_ApplyLevelupBuff(Coroutine coroutine, SceneCharacterProxy _this, CK_ApplyLevelupBuffInMessage msg);
        /// <summary>
        /// </summary>
        IEnumerator ApplySolveStuck(Coroutine coroutine, SceneCharacterProxy _this, ApplySolveStuckInMessage msg);
        /// <summary>
        /// GM相关 end
        /// 采矿
        /// </summary>
        IEnumerator CollectLode(Coroutine coroutine, SceneCharacterProxy _this, CollectLodeInMessage msg);
        /// <summary>
        /// 占领矿脉(占旗)
        /// </summary>
        IEnumerator HoldLode(Coroutine coroutine, SceneCharacterProxy _this, HoldLodeInMessage msg);
        IEnumerator OnConnected(Coroutine coroutine, SceneCharacterProxy _this, uint packId);
        IEnumerator OnLost(Coroutine coroutine, SceneCharacterProxy _this, uint packId);
        bool OnSyncRequested(SceneCharacterProxy _this, ulong characterId, uint syncId);
    }

    public class SceneCharacterProxy
    {
        public ulong CharacterId { get; private set; }
        public ulong ClientId { get; private set; }
        public SceneService Service { get; private set; }

        public SceneCharacterProxy(SceneService service, ulong characterId, ulong clientId)
        {
            CharacterId = characterId;
            ClientId = clientId;
            Service = service;
            mSyncCenter.ServiceType = ServiceType.Logic;
        }

        private DataSyncCenter mSyncCenter = new DataSyncCenter();
        public DataSyncCenter SyncCenter { get { return mSyncCenter; } }

        public void Sync()
        {
            Service.Sync(ClientId, mSyncCenter);
        }

        /// <summary>
        /// 服务端返回进入场景结果(服务端可主动发，让玩家强制进入某个场景)
        /// </summary>
        public object ReplyChangeScene(PlayerData data)
        {
            Service.ReplyChangeScene(CharacterId, ClientId,data);
            return null;
        }
        /// <summary>
        /// 通知创建角色
        /// </summary>
        public object CreateObj(IEnumerable<ulong> __characterIds__, CreateObjMsg msg)
        {
            Service.CreateObj(__characterIds__, msg);
            return null;
        }
        /// <summary>
        /// 广播删除角色
        /// 创建OBJ的原因，2种，0不可见 1死亡移除
        /// </summary>
        public object DeleteObj(IEnumerable<ulong> __characterIds__, Uint64Array objs, uint reason)
        {
            Service.DeleteObj(__characterIds__, objs, reason);
            return null;
        }
        /// <summary>
        /// </summary>
        public object DeleteObjList(IEnumerable<ulong> __characterIds__, DeleteObjMsgList dels)
        {
            Service.DeleteObjList(__characterIds__, dels);
            return null;
        }
        /// <summary>
        /// 同步移动
        /// </summary>
        public object SyncMoveTo(IEnumerable<ulong> __characterIds__, CharacterMoveMsg msg)
        {
            Service.SyncMoveTo(__characterIds__, msg);
            return null;
        }
        /// <summary>
        /// 同步移动
        /// </summary>
        public object SyncMoveToList(IEnumerable<ulong> __characterIds__, CharacterMoveMsgList msg)
        {
            Service.SyncMoveToList(__characterIds__, msg);
            return null;
        }
        /// <summary>
        /// 同步停止移动
        /// </summary>
        public object SyncStopMove(IEnumerable<ulong> __characterIds__, SyncPostionMsg msg)
        {
            Service.SyncStopMove(__characterIds__, msg);
            return null;
        }
        /// <summary>
        /// 同步主角
        /// </summary>
        public object SyncDirection(IEnumerable<ulong> __characterIds__, ulong characterId, int dirX, int dirZ)
        {
            Service.SyncDirection(__characterIds__, characterId, dirX, dirZ);
            return null;
        }
        /// <summary>
        /// 广播使用技能
        /// </summary>
        public object NotifyUseSkill(IEnumerable<ulong> __characterIds__, CharacterUseSkillMsg msg)
        {
            Service.NotifyUseSkill(__characterIds__, msg);
            return null;
        }
        /// <summary>
        /// 广播使用一组技能
        /// </summary>
        public object NotifyUseSkillList(IEnumerable<ulong> __characterIds__, CharacterUseSkillMsgList msg)
        {
            Service.NotifyUseSkillList(__characterIds__, msg);
            return null;
        }
        /// <summary>
        /// 广播Buff结果
        /// </summary>
        public object SyncBuff(IEnumerable<ulong> __characterIds__, BuffResultMsg msg)
        {
            Service.SyncBuff(__characterIds__, msg);
            return null;
        }
        /// <summary>
        /// 广播释放子弹
        /// </summary>
        public object NotifyShootBullet(IEnumerable<ulong> __characterIds__, BulletMsg msg)
        {
            Service.NotifyShootBullet(__characterIds__, msg);
            return null;
        }
        /// <summary>
        /// 广播释放子弹
        /// </summary>
        public object NotifyShootBulletList(IEnumerable<ulong> __characterIds__, BulletMsgList msg)
        {
            Service.NotifyShootBulletList(__characterIds__, msg);
            return null;
        }
        /// <summary>
        /// 通知客户端修改装备模型
        /// </summary>
        public object NotifyEquipChanged(IEnumerable<ulong> __characterIds__, ulong characterId, int part, int ItemId)
        {
            Service.NotifyEquipChanged(__characterIds__, characterId, part, ItemId);
            return null;
        }
        /// <summary>
        /// 拾取某个物品
        /// </summary>
        public object PickUpItemSuccess(ulong dropItemId)
        {
            Service.PickUpItemSuccess(CharacterId, ClientId,dropItemId);
            return null;
        }
        /// <summary>
        /// 通知客户端场景动画
        /// </summary>
        public object NotifySceneAction(IEnumerable<ulong> __characterIds__, int ActionId)
        {
            Service.NotifySceneAction(__characterIds__, ActionId);
            return null;
        }
        /// <summary>
        /// 包裹已满的提示
        /// </summary>
        public object BagisFull(ulong dropItemId, int itemId, int itemCount)
        {
            Service.BagisFull(CharacterId, ClientId,dropItemId, itemId, itemCount);
            return null;
        }
        /// <summary>
        /// 同步副本时间
        /// </summary>
        public object NotifyDungeonTime(int state, ulong time)
        {
            Service.NotifyDungeonTime(CharacterId, ClientId,state, time);
            return null;
        }
        /// <summary>
        /// 同步家园场景数据
        /// </summary>
        public object SyncSceneBuilding(IEnumerable<ulong> __characterIds__, BuildingList data)
        {
            Service.SyncSceneBuilding(__characterIds__, data);
            return null;
        }
        /// <summary>
        /// Debug模式下客户端坐标
        /// </summary>
        public object DebugObjPosition(IEnumerable<ulong> __characterIds__, ulong characterId, PositionData pos)
        {
            Service.DebugObjPosition(__characterIds__, characterId, pos);
            return null;
        }
        /// <summary>
        /// 强制客户端改变坐标
        /// </summary>
        public object SyncCharacterPostion(IEnumerable<ulong> __characterIds__, ulong characterId, PositionData pos)
        {
            Service.SyncCharacterPostion(__characterIds__, characterId, pos);
            return null;
        }
        /// <summary>
        /// 广播战场提示信息
        /// </summary>
        public object NotifyBattleReminder(int type, string info, int param)
        {
            Service.NotifyBattleReminder(CharacterId, ClientId,type, info, param);
            return null;
        }
        /// <summary>
        /// 同步一个倒计时
        /// </summary>
        public object NotifyCountdown(ulong time, int type)
        {
            Service.NotifyCountdown(CharacterId, ClientId,time, type);
            return null;
        }
        /// <summary>
        /// 通知客户端，某只怪物的伤害列表
        /// </summary>
        public object NotifyDamageList(DamageList list)
        {
            Service.NotifyDamageList(CharacterId, ClientId,list);
            return null;
        }
        /// <summary>
        /// 通知客户端，任务进度
        /// </summary>
        public object NotifyFubenInfo(FubenInfoMsg info)
        {
            Service.NotifyFubenInfo(CharacterId, ClientId,info);
            return null;
        }
        /// <summary>
        /// 通知一些消息 type:0死亡
        /// </summary>
        public object NotifyMessage(int type, string info, int addChat)
        {
            Service.NotifyMessage(CharacterId, ClientId,type, info, addChat);
            return null;
        }
        /// <summary>
        /// 通知客户端自己的阵营发生变化
        /// </summary>
        public object NotifyCampChange(int campId, Vector2Int32 pos)
        {
            Service.NotifyCampChange(CharacterId, ClientId,campId, pos);
            return null;
        }
        /// <summary>
        ///  同步客户端数据
        /// </summary>
        public object SyncDataToClient(IEnumerable<ulong> __characterIds__, SceneSyncData data)
        {
            Service.SyncDataToClient(__characterIds__, data);
            return null;
        }
        /// <summary>
        ///  同步自己客户端数据
        /// </summary>
        public object SyncMyDataToClient(SceneSyncData data)
        {
            Service.SyncMyDataToClient(CharacterId, ClientId,data);
            return null;
        }
        /// <summary>
        /// 通知客户端，据点状态改变了
        /// </summary>
        public object NotifyStrongpointStateChanged(int camp, int index, int state, float time)
        {
            Service.NotifyStrongpointStateChanged(CharacterId, ClientId,camp, index, state, time);
            return null;
        }
        /// <summary>
        /// 同步NPC位置
        /// </summary>
        public object SyncObjPosition(IEnumerable<ulong> __characterIds__, SyncPathPosMsg msg)
        {
            Service.SyncObjPosition(__characterIds__, msg);
            return null;
        }
        /// <summary>
        /// 服务器通知客户端，某个id的obj说了一句话,如果字典id不为空，就说字典，如果为空，就说字符串
        /// </summary>
        public object ObjSpeak(IEnumerable<ulong> __characterIds__, ulong id, int dictId, string content)
        {
            Service.ObjSpeak(__characterIds__, id, dictId, content);
            return null;
        }
        /// <summary>
        /// 玩家等级变化同步属性变化值
        /// </summary>
        public object SyncLevelChange(LevelUpAttrData Attr)
        {
            Service.SyncLevelChange(CharacterId, ClientId,Attr);
            return null;
        }
        /// <summary>
        /// 向玩家通知攻城战npc信息
        /// </summary>
        public object NotifyAllianceWarNpcData(IEnumerable<ulong> __characterIds__, int reliveCount, Int32Array data)
        {
            Service.NotifyAllianceWarNpcData(__characterIds__, reliveCount, data);
            return null;
        }
        /// <summary>
        /// 向玩家通知场景内玩家的信息，主要是位置信息
        /// </summary>
        public object NotifyScenePlayerInfos(IEnumerable<ulong> __characterIds__, ScenePlayerInfos info)
        {
            Service.NotifyScenePlayerInfos(__characterIds__, info);
            return null;
        }
        /// <summary>
        /// 向玩家通知小地图怪物的存活状态
        /// </summary>
        public object NotifyNpcStatus(MapNpcInfos infos)
        {
            Service.NotifyNpcStatus(CharacterId, ClientId,infos);
            return null;
        }
        /// <summary>
        /// 通知客户端，积分列表
        /// </summary>
        public object NotifyPointList(PointList list)
        {
            Service.NotifyPointList(CharacterId, ClientId,list);
            return null;
        }
        /// <summary>
        /// 通知客户端开始预警
        /// </summary>
        public object NotifyStartWarning(ulong timeOut)
        {
            Service.NotifyStartWarning(CharacterId, ClientId,timeOut);
            return null;
        }
        /// <summary>
        /// </summary>
        public object SendMieshiResult(MieshiResultMsg msg)
        {
            Service.SendMieshiResult(CharacterId, ClientId,msg);
            return null;
        }
        /// <summary>
        /// 通知客户端，刷新副本信息
        /// </summary>
        public object NotifyRefreshDungeonInfo(DungeonInfo info)
        {
            Service.NotifyRefreshDungeonInfo(CharacterId, ClientId,info);
            return null;
        }
        /// <summary>
        /// 通知客户端，开启xp技能引导
        /// </summary>
        public object NotifyStartXpSkillGuide(int placeholder)
        {
            Service.NotifyStartXpSkillGuide(CharacterId, ClientId,placeholder);
            return null;
        }
        /// <summary>
        /// 通知客户端，开启玛雅武器副本引导
        /// </summary>
        public object NotifyStartMaYaFuBenGuide(int type)
        {
            Service.NotifyStartMaYaFuBenGuide(CharacterId, ClientId,type);
            return null;
        }
        /// <summary>
        /// 服务端广播爬塔怪物个数
        /// </summary>
        public object BroadcastSceneMonsterCount(int count)
        {
            Service.BroadcastSceneMonsterCount(CharacterId, ClientId,count);
            return null;
        }
        /// <summary>
        /// 场景内广播消息，dictId不为-1时，优先用字典内容， 字符串可以用"|"分开进行格式化
        /// </summary>
        public object BroadcastSceneChat(IEnumerable<ulong> __characterIds__, string content, int dictId)
        {
            Service.BroadcastSceneChat(__characterIds__, content, dictId);
            return null;
        }
        /// <summary>
        /// 刷新副本商店购买数据
        /// </summary>
        public object SyncFuBenStore(StoneItems itemlst, int storeType)
        {
            Service.SyncFuBenStore(CharacterId, ClientId,itemlst, storeType);
            return null;
        }
        /// <summary>
        /// 队伍：有队员场景typeId变化时，同步队员数据
        /// </summary>
        public object NotifyTeamMemberScene(ulong characterId, ulong changeCharacterId, ulong sceneId)
        {
            Service.NotifyTeamMemberScene(CharacterId, ClientId,characterId, changeCharacterId, sceneId);
            return null;
        }
        /// <summary>
        /// 强制停止移动
        /// </summary>
        public object ForceStopMove(PositionData pos)
        {
            Service.ForceStopMove(CharacterId, ClientId,pos);
            return null;
        }
        /// <summary>
        /// 同步倒计时
        /// </summary>
        public object NotifyCommonCountdown(int time)
        {
            Service.NotifyCommonCountdown(CharacterId, ClientId,time);
            return null;
        }
        /// <summary>
        /// 吃鸡玩法通知客户端升级
        /// </summary>
        public object CK_NotifyClientLevelup(ulong objId, int lv, int exp, Dict_int_int_Data addBuff)
        {
            Service.CK_NotifyClientLevelup(CharacterId, ClientId,objId, lv, exp, addBuff);
            return null;
        }
        /// <summary>
        /// 发送吃鸡地图信息
        /// </summary>
        public object CK_NotifyCheckenSceneInfo(MsgCheckenSceneInfo info)
        {
            Service.CK_NotifyCheckenSceneInfo(CharacterId, ClientId,info);
            return null;
        }
        /// <summary>
        /// 发送收到地图伤害
        /// </summary>
        public object CK_NotifyHurt(int placeholder)
        {
            Service.CK_NotifyHurt(CharacterId, ClientId,placeholder);
            return null;
        }
        /// <summary>
        /// </summary>
        public object CK_NotifyRankList(MsgCheckenRankList rank)
        {
            Service.CK_NotifyRankList(CharacterId, ClientId,rank);
            return null;
        }
        /// <summary>
        /// 同步模型Id
        /// </summary>
        public object SyncModelId(int model)
        {
            Service.SyncModelId(CharacterId, ClientId,model);
            return null;
        }
        /// <summary>
        /// </summary>
        public object NotifyLodeInfo(MsgSceneLode info)
        {
            Service.NotifyLodeInfo(CharacterId, ClientId,info);
            return null;
        }
        /// <summary>
        /// </summary>
        public object NotifyPlayEffect(int effectId)
        {
            Service.NotifyPlayEffect(CharacterId, ClientId,effectId);
            return null;
        }
        public object Wait(Coroutine coroutine, TimeSpan timeSpan)
        {
            return Service.Wait(coroutine, timeSpan);
        }
    }
}
