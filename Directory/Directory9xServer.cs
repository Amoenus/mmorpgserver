// Generated by the rpc compiler.  DO NOT EDIT!
using System;
using System.Collections;
using System.IO;
using Scorpion;
using System.Collections.Generic;
using ProtoBuf;
using DataContract;

#pragma warning disable 0162,0108
namespace DirectoryServerService
{

    public interface IDirectoryService
    {
        IEnumerator OnServerStart(Coroutine coroutine, DirectoryService _this);
        IEnumerator OnServerStop(Coroutine coroutine, DirectoryService _this);
    }

    public abstract class DirectoryService : ServerAgentBase
    {

        protected static IDirectoryService mImpl;
        public static IDirectoryCharacterProxy mProxyImpl;
        public void SetServiceImpl(IDirectoryService impl)
        {
            mImpl = impl;
        }
        public void SetProxyImpl(IDirectoryCharacterProxy proxyImpl)
        {
            mProxyImpl = proxyImpl;
        }
        public abstract DirectoryCharacterProxy NewCharacterIn(ulong characterId, ulong clientId);
        public Dictionary<ulong, DirectoryCharacterProxy> Proxys = new Dictionary<ulong, DirectoryCharacterProxy>();
        protected override object GetRequestData(uint p, byte[] list)
        {
            switch(p)
            {
            case 8000:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Directory_CheckVersion_ARG_string_lang_string_platform_string_channel_string_version__>(ms);
                }
                break;
            case 8001:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Directory_CheckVersion2_ARG_string_lang_string_platform_string_channel_string_version__>(ms);
                }
                break;
            case 8002:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Directory_CheckVersion3_ARG_string_lang_string_platform_string_channel_string_version__>(ms);
                }
                break;
            default:
                break;
            }

            return null;
        }

        public override IEnumerator OnClientConnected(Coroutine coroutine, string target, ulong clientId, ulong characterId, uint packId)
        {
            if (target != "client")
            {
                return null;
            }

            var proxy = NewCharacterIn(characterId, clientId);
            if (proxy != null)
            {
                Proxys[characterId] = proxy;
                return mProxyImpl.OnConnected(coroutine, proxy, packId);
            }
            return null;
        }
        public override IEnumerator OnClientLost(Coroutine coroutine, string target, ulong clientId, ulong characterId, uint packId)
        {
            if (target != "client")
            {
                yield break;
            }
            DirectoryCharacterProxy proxy = null;
            if (Proxys.TryGetValue(characterId, out proxy))
            {
                var co = CoroutineFactory.NewSubroutine(mProxyImpl.OnLost, coroutine, proxy, packId);
                if (co.MoveNext())
                {
                    yield return co;
                }
                Proxys.Remove(characterId);
            }
        }
        public void CharacterId2ClientId(IEnumerable<ulong> ids, List<ulong> known, List<ulong> unknown)
        {
            foreach (var id in ids)
            {
                DirectoryCharacterProxy proxy;
                if (Proxys.TryGetValue(id, out proxy))
                {
                    known.Add(((DirectoryCharacterProxy)proxy).ClientId);
                }
                else
                {
                    unknown.Add(id);
                }
            }
        }
        /// <summary>
        /// </summary>
        public IEnumerator CheckVersion(Coroutine coroutine, CheckVersionInMessage msg)
        {
            DirectoryCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.CheckVersion(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        ///  gate地址返回字符串用";"分隔
        /// </summary>
        public IEnumerator CheckVersion2(Coroutine coroutine, CheckVersion2InMessage msg)
        {
            DirectoryCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.CheckVersion2(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        ///  比之前的版本添加了
        /// </summary>
        public IEnumerator CheckVersion3(Coroutine coroutine, CheckVersion3InMessage msg)
        {
            DirectoryCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.CheckVersion3(coroutine, proxy, msg);
            }
            return null;
        }

        protected override void DispatchMessage(MessageRecievedEvent evt)
        {
            switch (evt.Message.FuncId)
            {
                case 8000:
                {
                    var msg = new CheckVersionInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => CheckVersion(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 8001:
                {
                    var msg = new CheckVersion2InMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => CheckVersion2(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 8002:
                {
                    var msg = new CheckVersion3InMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => CheckVersion3(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                default:
                    break;
            }
        }
    }
    public class CheckVersionInMessage : InMessage
    {
        public CheckVersionInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Directory_CheckVersion_ARG_string_lang_string_platform_string_channel_string_version__;

            mResponse = new __RPC_Directory_CheckVersion_RET_VersionInfo__();
            mResponse.ReturnValue = new VersionInfo();
        }


        public __RPC_Directory_CheckVersion_ARG_string_lang_string_platform_string_channel_string_version__ Request { get; private set; }

        private __RPC_Directory_CheckVersion_RET_VersionInfo__ mResponse;
        public VersionInfo Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public CheckVersionInMessage Clone()
        { 
            return new CheckVersionInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class CheckVersion2InMessage : InMessage
    {
        public CheckVersion2InMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Directory_CheckVersion2_ARG_string_lang_string_platform_string_channel_string_version__;

            mResponse = new __RPC_Directory_CheckVersion2_RET_VersionInfo__();
            mResponse.ReturnValue = new VersionInfo();
        }


        public __RPC_Directory_CheckVersion2_ARG_string_lang_string_platform_string_channel_string_version__ Request { get; private set; }

        private __RPC_Directory_CheckVersion2_RET_VersionInfo__ mResponse;
        public VersionInfo Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public CheckVersion2InMessage Clone()
        { 
            return new CheckVersion2InMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class CheckVersion3InMessage : InMessage
    {
        public CheckVersion3InMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Directory_CheckVersion3_ARG_string_lang_string_platform_string_channel_string_version__;

            mResponse = new __RPC_Directory_CheckVersion3_RET_VersionInfo__();
            mResponse.ReturnValue = new VersionInfo();
        }


        public __RPC_Directory_CheckVersion3_ARG_string_lang_string_platform_string_channel_string_version__ Request { get; private set; }

        private __RPC_Directory_CheckVersion3_RET_VersionInfo__ mResponse;
        public VersionInfo Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public CheckVersion3InMessage Clone()
        { 
            return new CheckVersion3InMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public interface IDirectoryCharacterProxy
    {
        /// <summary>
        /// </summary>
        IEnumerator CheckVersion(Coroutine coroutine, DirectoryCharacterProxy _this, CheckVersionInMessage msg);
        /// <summary>
        ///  gate地址返回字符串用";"分隔
        /// </summary>
        IEnumerator CheckVersion2(Coroutine coroutine, DirectoryCharacterProxy _this, CheckVersion2InMessage msg);
        /// <summary>
        ///  比之前的版本添加了
        /// </summary>
        IEnumerator CheckVersion3(Coroutine coroutine, DirectoryCharacterProxy _this, CheckVersion3InMessage msg);
        IEnumerator OnConnected(Coroutine coroutine, DirectoryCharacterProxy _this, uint packId);
        IEnumerator OnLost(Coroutine coroutine, DirectoryCharacterProxy _this, uint packId);
        bool OnSyncRequested(DirectoryCharacterProxy _this, ulong characterId, uint syncId);
    }

    public class DirectoryCharacterProxy
    {
        public ulong CharacterId { get; private set; }
        public ulong ClientId { get; private set; }
        public DirectoryService Service { get; private set; }

        public DirectoryCharacterProxy(DirectoryService service, ulong characterId, ulong clientId)
        {
            CharacterId = characterId;
            ClientId = clientId;
            Service = service;
            mSyncCenter.ServiceType = ServiceType.Logic;
        }

        private DataSyncCenter mSyncCenter = new DataSyncCenter();
        public DataSyncCenter SyncCenter { get { return mSyncCenter; } }

        public void Sync()
        {
            Service.Sync(ClientId, mSyncCenter);
        }

        public object Wait(Coroutine coroutine, TimeSpan timeSpan)
        {
            return Service.Wait(coroutine, timeSpan);
        }
    }
}
