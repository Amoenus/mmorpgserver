// Generated by the rpc compiler.  DO NOT EDIT!
using System;
using System.Collections;
using System.IO;
using Scorpion;
using ProtoBuf;
using DataContract;
using System.CodeDom.Compiler;
using System.Collections.Generic;

#pragma warning disable 0162,0108
namespace LoginServerService
{

    public interface ILoginService
    {
        /// <summary>
        /// CS CharacterListLoginMsg		LoginByUserNamePassword(string username, string password)  = 2000;
        /// </summary>
        IEnumerator PlayerLoginByUserNamePassword(Coroutine coroutine, LoginService _this, PlayerLoginByUserNamePasswordInMessage msg);
        /// <summary>
        /// </summary>
        IEnumerator PlayerLoginByThirdKey(Coroutine coroutine, LoginService _this, PlayerLoginByThirdKeyInMessage msg);
        /// <summary>
        /// </summary>
        IEnumerator PlayerSelectServerId(Coroutine coroutine, LoginService _this, PlayerSelectServerIdInMessage msg);
        /// <summary>
        /// </summary>
        IEnumerator CreateCharacter(Coroutine coroutine, LoginService _this, CreateCharacterInMessage msg);
        /// <summary>
        /// </summary>
        IEnumerator EnterGame(Coroutine coroutine, LoginService _this, EnterGameInMessage msg);
        /// <summary>
        /// </summary>
        IEnumerator SyncTime(Coroutine coroutine, LoginService _this, SyncTimeInMessage msg);
        /// <summary>
        /// </summary>
        IEnumerator GetServerList(Coroutine coroutine, LoginService _this, GetServerListInMessage msg);
        /// <summary>
        /// 通知Login连接成功
        /// </summary>
        IEnumerator NotifyConnected(Coroutine coroutine, LoginService _this, NotifyConnectedInMessage msg);
        /// <summary>
        /// 查询服务器状态
        /// </summary>
        IEnumerator QueryStatus(Coroutine coroutine, LoginService _this, QueryStatusInMessage msg);
        /// <summary>
        /// 获得Login的Simple数据
        /// </summary>
        IEnumerator GetLoginSimpleData(Coroutine coroutine, LoginService _this, GetLoginSimpleDataInMessage msg);
        /// <summary>
        /// 获得某个角色今天的在线时间
        /// </summary>
        IEnumerator GetTodayOnlineSeconds(Coroutine coroutine, LoginService _this, GetTodayOnlineSecondsInMessage msg);
        /// <summary>
        /// 判断是否有此玩家
        /// </summary>
        IEnumerator CheckIsHaveCharacter(Coroutine coroutine, LoginService _this, CheckIsHaveCharacterInMessage msg);
        /// <summary>
        /// 获取某个名字玩家的ID
        /// </summary>
        IEnumerator GetCharacterIdByName(Coroutine coroutine, LoginService _this, GetCharacterIdByNameInMessage msg);
        /// <summary>
        /// 强制下线
        /// </summary>
        IEnumerator KickCharacter(Coroutine coroutine, LoginService _this, KickCharacterInMessage msg);
        /// <summary>
        /// 退出到登录
        /// </summary>
        IEnumerator ExitLogin(Coroutine coroutine, LoginService _this, ExitLoginInMessage msg);
        /// <summary>
        /// 退出到选角
        /// </summary>
        IEnumerator ExitSelectCharacter(Coroutine coroutine, LoginService _this, ExitSelectCharacterInMessage msg);
        /// <summary>
        /// 查询服务器状态，是否可以进入
        /// </summary>
        IEnumerator ReadyToEnter(Coroutine coroutine, LoginService _this, ReadyToEnterInMessage msg);
        /// <summary>
        /// 获得角色的总在线时间
        /// </summary>
        IEnumerator GetTotleOnlineSeconds(Coroutine coroutine, LoginService _this, GetTotleOnlineSecondsInMessage msg);
        /// <summary>
        /// 获取某个账号对应的账号ID
        /// </summary>
        IEnumerator GetPlayerIdByAccount(Coroutine coroutine, LoginService _this, GetPlayerIdByAccountInMessage msg);
        /// <summary>
        /// 返回服务器与东0区相比领先的时间（分钟）
        /// </summary>
        IEnumerator QueryServerTimezone(Coroutine coroutine, LoginService _this, QueryServerTimezoneInMessage msg);
        /// <summary>
        /// 广播表格重载
        /// </summary>
        IEnumerator ServerGMCommand(Coroutine coroutine, LoginService _this, ServerGMCommandInMessage msg);
        /// <summary>
        /// Gate检测到用户掉线 gate - > login
        /// </summary>
        IEnumerator GateDisconnect(Coroutine coroutine, LoginService _this, GateDisconnectInMessage msg);
        /// <summary>
        /// 客户端尝试重连
        /// </summary>
        IEnumerator ReConnet(Coroutine coroutine, LoginService _this, ReConnetInMessage msg);
        /// <summary>
        /// 请求各服务器人数
        /// </summary>
        IEnumerator GetServerCharacterCount(Coroutine coroutine, LoginService _this, GetServerCharacterCountInMessage msg);
        /// <summary>
        /// 通知设备号
        /// </summary>
        IEnumerator SendDeviceUdid(Coroutine coroutine, LoginService _this, SendDeviceUdidInMessage msg);
        /// <summary>
        ///  获取playerid
        /// </summary>
        IEnumerator GetUserId(Coroutine coroutine, LoginService _this, GetUserIdInMessage msg);
        /// <summary>
        /// 获取所有角色loginsimple
        /// </summary>
        IEnumerator GetAllCharactersLoginInfo(Coroutine coroutine, LoginService _this, GetAllCharactersLoginInfoInMessage msg);
        /// <summary>
        ///  获取主播是否在直播间内
        /// </summary>
        IEnumerator GetAnchorIsInRoom(Coroutine coroutine, LoginService _this, GetAnchorIsInRoomInMessage msg);
        /// <summary>
        /// GM相关 begin
        /// 通过角色名称查找角色信息
        /// </summary>
        IEnumerator GetPlayerData(Coroutine coroutine, LoginService _this, GetPlayerDataInMessage msg);
        /// <summary>
        /// 封账号
        /// </summary>
        IEnumerator LockAccount(Coroutine coroutine, LoginService _this, LockAccountInMessage msg);
        /// <summary>
        /// </summary>
        IEnumerator GMKickCharacter(Coroutine coroutine, LoginService _this, GMKickCharacterInMessage msg);
        /// <summary>
        /// </summary>
        IEnumerator UpdateServer(Coroutine coroutine, LoginService _this, UpdateServerInMessage msg);
        /// <summary>
        /// 角色转服
        /// </summary>
        IEnumerator ChangeServer(Coroutine coroutine, LoginService _this, ChangeServerInMessage msg);
        /// <summary>
        /// </summary>
        IEnumerator NotiffyGMAccount(Coroutine coroutine, LoginService _this, NotiffyGMAccountInMessage msg);
        /// <summary>
        /// 制作快照
        /// 创建一个新账号和角色为存储快照
        /// </summary>
        IEnumerator CreateCharacterByAccountName(Coroutine coroutine, LoginService _this, CreateCharacterByAccountNameInMessage msg);
        /// <summary>
        /// 拷贝一个角色数据到另一个角色id
        /// </summary>
        IEnumerator CloneCharacterDbById(Coroutine coroutine, LoginService _this, CloneCharacterDbByIdInMessage msg);
        /// <summary>
        /// 查询用户名下的角色id
        /// </summary>
        IEnumerator GetCharacterIdByAccountName(Coroutine coroutine, LoginService _this, GetCharacterIdByAccountNameInMessage msg);
        /// <summary>
        /// GM相关 end
        /// Logic通知修改玩家名字
        /// </summary>
        IEnumerator TryModifyPlayerName(Coroutine coroutine, LoginService _this, TryModifyPlayerNameInMessage msg);
        IEnumerator OnServerStart(Coroutine coroutine, LoginService _this);
        IEnumerator OnServerStop(Coroutine coroutine, LoginService _this);
        IEnumerator OnClientConnected(Coroutine coroutine, LoginService _this, string target, ulong clientid, ulong characterId, uint packId);
        IEnumerator OnClientLost(Coroutine coroutine, LoginService _this, string target, ulong clientid, ulong characterId, uint packId);
    }

    public abstract class LoginService : ServerAgentBase
    {
        protected static ILoginService mImpl;
        public void SetServiceImpl(ILoginService impl)
        {
            mImpl = impl;
        }

        protected override object GetRequestData(uint p, byte[] list)
        {
            switch(p)
            {
            case 2001:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Login_PlayerLoginByUserNamePassword_ARG_string_username_string_password__>(ms);
                }
                break;
            case 2002:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Login_PlayerLoginByThirdKey_ARG_string_platform_string_channel_string_userId_string_accessToken__>(ms);
                }
                break;
            case 2003:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Login_PlayerSelectServerId_ARG_int32_serverId__>(ms);
                }
                break;
            case 2010:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Login_Kick_ARG_int32_type__>(ms);
                }
                break;
            case 2011:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Login_Logout_ARG_uint64_characterId__>(ms);
                }
                break;
            case 2012:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Login_CreateCharacter_ARG_int32_serverId_int32_type_string_name__>(ms);
                }
                break;
            case 2013:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Login_EnterGame_ARG_uint64_characterId__>(ms);
                }
                break;
            case 2014:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Login_SyncTime_ARG_int32_placeholder__>(ms);
                }
                break;
            case 2015:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Login_GetServerList_ARG_int32_placeholder__>(ms);
                }
                break;
            case 2016:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Login_NotifyConnected_ARG_uint64_characterId_int32_servictType_int32_err__>(ms);
                }
                break;
            case 2017:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Login_QueryStatus_ARG_uint32_placeholder__>(ms);
                }
                break;
            case 2018:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Login_GetLoginSimpleData_ARG_uint64_characterId__>(ms);
                }
                break;
            case 2019:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Login_GetTodayOnlineSeconds_ARG_uint64_characterId__>(ms);
                }
                break;
            case 2020:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Login_CheckIsHaveCharacter_ARG_uint64_characterId__>(ms);
                }
                break;
            case 2021:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Login_NotifyQueueIndex_ARG_int32_index__>(ms);
                }
                break;
            case 2022:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Login_Discard0_ARG_PlayerLoginData_plData__>(ms);
                }
                break;
            case 2023:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Login_GetCharacterIdByName_ARG_string_name__>(ms);
                }
                break;
            case 2024:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Login_KickCharacter_ARG_int32_placeholder__>(ms);
                }
                break;
            case 2025:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Login_ExitLogin_ARG_int32_placeholder__>(ms);
                }
                break;
            case 2026:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Login_ExitSelectCharacter_ARG_uint64_characterId__>(ms);
                }
                break;
            case 2027:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Login_ReadyToEnter_ARG_int32_placeholder__>(ms);
                }
                break;
            case 2028:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Login_GetTotleOnlineSeconds_ARG_uint64_characterId__>(ms);
                }
                break;
            case 2029:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Login_GetPlayerIdByAccount_ARG_string_account__>(ms);
                }
                break;
            case 2030:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Login_NotifyQueueSuccess_ARG_QueueSuccessData_data__>(ms);
                }
                break;
            case 2031:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Login_QueryServerTimezone_ARG_int32_placeholder__>(ms);
                }
                break;
            case 2032:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Login_ServerGMCommand_ARG_string_cmd_string_param__>(ms);
                }
                break;
            case 2033:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Login_GateDisconnect_ARG_uint64_clientId_uint64_characterId__>(ms);
                }
                break;
            case 2034:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Login_ReConnet_ARG_uint64_clientId_uint64_characterId__>(ms);
                }
                break;
            case 2035:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Login_NotifyReConnet_ARG_int32_result__>(ms);
                }
                break;
            case 2036:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Login_GetServerCharacterCount_ARG_int32_result__>(ms);
                }
                break;
            case 2037:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Login_SendDeviceUdid_ARG_string_deviceUdid__>(ms);
                }
                break;
            case 2038:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Login_GetUserId_ARG_uint64_clientId__>(ms);
                }
                break;
            case 2039:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Login_GetAllCharactersLoginInfo_ARG_int32_serverId__>(ms);
                }
                break;
            case 2040:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Login_GetAnchorIsInRoom_ARG_uint64_CharacterId__>(ms);
                }
                break;
            case 2900:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Login_GetPlayerData_ARG_uint64_playerId_uint64_charId__>(ms);
                }
                break;
            case 2901:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Login_LockAccount_ARG_uint64_playerId_int64_endTime__>(ms);
                }
                break;
            case 2903:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Login_GMKickCharacter_ARG_uint64_charId_string_name__>(ms);
                }
                break;
            case 2904:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Login_UpdateServer_ARG_int32_placeholder__>(ms);
                }
                break;
            case 2905:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Login_ChangeServer_ARG_uint64_characterId_int32_serverId__>(ms);
                }
                break;
            case 2906:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Login_NotiffyGMAccount_ARG_LoginAllAccounts_acc__>(ms);
                }
                break;
            case 2097:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Login_CreateCharacterByAccountName_ARG_string_accName__>(ms);
                }
                break;
            case 2098:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Login_CloneCharacterDbById_ARG_uint64_fromId_uint64_toId__>(ms);
                }
                break;
            case 2099:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Login_GetCharacterIdByAccountName_ARG_string_accName__>(ms);
                }
                break;
            case 2100:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Login_TryModifyPlayerName_ARG_string_modifyName__>(ms);
                }
                break;
            default:
                break;
            }

            return null;
        }

        /// <summary>
        /// </summary>
        public object Kick(ulong clientid, int type)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 2010;
            desc.ClientId = clientid;
            desc.PacketId = 0;
            desc.Type = (int)MessageType.SC;
            desc.ServiceType =  (int) ServiceType.Login;

            var __data__ = new __RPC_Login_Kick_ARG_int32_type__();
            __data__.Type=type;


            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        ///  通知其他服务器，这个character已经退出了，调用了这个函数以后，Broker和其他服务器中，关于这个Character的数据都会被清理，相当于这个character下线了
        /// </summary>
        public object Logout(ulong clientid, ulong characterId)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 2011;
            desc.ClientId = clientid;
            desc.PacketId = 0;
            desc.Type = (int)MessageType.SC;
            desc.ServiceType =  (int) ServiceType.Login;

            var __data__ = new __RPC_Login_Logout_ARG_uint64_characterId__();
            __data__.CharacterId=characterId;


            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// 通知排队名次
        /// </summary>
        public object NotifyQueueIndex(ulong clientid, int index)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 2021;
            desc.ClientId = clientid;
            desc.PacketId = 0;
            desc.Type = (int)MessageType.SC;
            desc.ServiceType =  (int) ServiceType.Login;

            var __data__ = new __RPC_Login_NotifyQueueIndex_ARG_int32_index__();
            __data__.Index=index;


            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// 通知登录排队成功
        /// </summary>
        public object Discard0(ulong clientid, PlayerLoginData plData)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 2022;
            desc.ClientId = clientid;
            desc.PacketId = 0;
            desc.Type = (int)MessageType.SC;
            desc.ServiceType =  (int) ServiceType.Login;

            var __data__ = new __RPC_Login_Discard0_ARG_PlayerLoginData_plData__();
            __data__.PlData=plData;


            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// 通用，通知排队成功
        /// </summary>
        public object NotifyQueueSuccess(ulong clientid, QueueSuccessData data)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 2030;
            desc.ClientId = clientid;
            desc.PacketId = 0;
            desc.Type = (int)MessageType.SC;
            desc.ServiceType =  (int) ServiceType.Login;

            var __data__ = new __RPC_Login_NotifyQueueSuccess_ARG_QueueSuccessData_data__();
            __data__.Data=data;


            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// 通知重连
        /// </summary>
        public object NotifyReConnet(ulong clientid, int result)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 2035;
            desc.ClientId = clientid;
            desc.PacketId = 0;
            desc.Type = (int)MessageType.SC;
            desc.ServiceType =  (int) ServiceType.Login;

            var __data__ = new __RPC_Login_NotifyReConnet_ARG_int32_result__();
            __data__.Result=result;


            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }

        protected override void DispatchMessage(MessageRecievedEvent evt)
        {
            switch (evt.Message.FuncId)
            {
                case 2001:
                {
                    var msg = new PlayerLoginByUserNamePasswordInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.PlayerLoginByUserNamePassword(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 2002:
                {
                    var msg = new PlayerLoginByThirdKeyInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.PlayerLoginByThirdKey(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 2003:
                {
                    var msg = new PlayerSelectServerIdInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.PlayerSelectServerId(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 2012:
                {
                    var msg = new CreateCharacterInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.CreateCharacter(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 2013:
                {
                    var msg = new EnterGameInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.EnterGame(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 2014:
                {
                    var msg = new SyncTimeInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.SyncTime(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 2015:
                {
                    var msg = new GetServerListInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.GetServerList(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 2016:
                {
                    var msg = new NotifyConnectedInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.NotifyConnected(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 2017:
                {
                    var msg = new QueryStatusInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.QueryStatus(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 2018:
                {
                    var msg = new GetLoginSimpleDataInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.GetLoginSimpleData(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 2019:
                {
                    var msg = new GetTodayOnlineSecondsInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.GetTodayOnlineSeconds(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 2020:
                {
                    var msg = new CheckIsHaveCharacterInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.CheckIsHaveCharacter(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 2023:
                {
                    var msg = new GetCharacterIdByNameInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.GetCharacterIdByName(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 2024:
                {
                    var msg = new KickCharacterInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.KickCharacter(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 2025:
                {
                    var msg = new ExitLoginInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.ExitLogin(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 2026:
                {
                    var msg = new ExitSelectCharacterInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.ExitSelectCharacter(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 2027:
                {
                    var msg = new ReadyToEnterInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.ReadyToEnter(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 2028:
                {
                    var msg = new GetTotleOnlineSecondsInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.GetTotleOnlineSeconds(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 2029:
                {
                    var msg = new GetPlayerIdByAccountInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.GetPlayerIdByAccount(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 2031:
                {
                    var msg = new QueryServerTimezoneInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.QueryServerTimezone(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 2032:
                {
                    var msg = new ServerGMCommandInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.ServerGMCommand(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 2033:
                {
                    var msg = new GateDisconnectInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.GateDisconnect(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 2034:
                {
                    var msg = new ReConnetInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.ReConnet(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 2036:
                {
                    var msg = new GetServerCharacterCountInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.GetServerCharacterCount(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 2037:
                {
                    var msg = new SendDeviceUdidInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.SendDeviceUdid(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 2038:
                {
                    var msg = new GetUserIdInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.GetUserId(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 2039:
                {
                    var msg = new GetAllCharactersLoginInfoInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.GetAllCharactersLoginInfo(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 2040:
                {
                    var msg = new GetAnchorIsInRoomInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.GetAnchorIsInRoom(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 2900:
                {
                    var msg = new GetPlayerDataInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.GetPlayerData(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 2901:
                {
                    var msg = new LockAccountInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.LockAccount(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 2903:
                {
                    var msg = new GMKickCharacterInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.GMKickCharacter(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 2904:
                {
                    var msg = new UpdateServerInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.UpdateServer(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 2905:
                {
                    var msg = new ChangeServerInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.ChangeServer(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 2906:
                {
                    var msg = new NotiffyGMAccountInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.NotiffyGMAccount(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 2097:
                {
                    var msg = new CreateCharacterByAccountNameInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.CreateCharacterByAccountName(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 2098:
                {
                    var msg = new CloneCharacterDbByIdInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.CloneCharacterDbById(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 2099:
                {
                    var msg = new GetCharacterIdByAccountNameInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.GetCharacterIdByAccountName(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 2100:
                {
                    var msg = new TryModifyPlayerNameInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.TryModifyPlayerName(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                default:
                    break;
            }
        }
    }
    public class PlayerLoginByUserNamePasswordInMessage : InMessage
    {
        public PlayerLoginByUserNamePasswordInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Login_PlayerLoginByUserNamePassword_ARG_string_username_string_password__;

            mResponse = new __RPC_Login_PlayerLoginByUserNamePassword_RET_PlayerLoginData__();
            mResponse.ReturnValue = new PlayerLoginData();
        }

        public __RPC_Login_PlayerLoginByUserNamePassword_ARG_string_username_string_password__ Request { get; private set; }

        private __RPC_Login_PlayerLoginByUserNamePassword_RET_PlayerLoginData__ mResponse;
        public PlayerLoginData Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }

        public PlayerLoginByUserNamePasswordInMessage Clone()
        { 
            return new PlayerLoginByUserNamePasswordInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        public ulong CharacterId { private get; set; }
        public ulong ClientId { get { return mMessage.ClientId; } }
        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class PlayerLoginByThirdKeyInMessage : InMessage
    {
        public PlayerLoginByThirdKeyInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Login_PlayerLoginByThirdKey_ARG_string_platform_string_channel_string_userId_string_accessToken__;

            mResponse = new __RPC_Login_PlayerLoginByThirdKey_RET_PlayerLoginData__();
            mResponse.ReturnValue = new PlayerLoginData();
        }

        public __RPC_Login_PlayerLoginByThirdKey_ARG_string_platform_string_channel_string_userId_string_accessToken__ Request { get; private set; }

        private __RPC_Login_PlayerLoginByThirdKey_RET_PlayerLoginData__ mResponse;
        public PlayerLoginData Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }

        public PlayerLoginByThirdKeyInMessage Clone()
        { 
            return new PlayerLoginByThirdKeyInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        public ulong CharacterId { private get; set; }
        public ulong ClientId { get { return mMessage.ClientId; } }
        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class PlayerSelectServerIdInMessage : InMessage
    {
        public PlayerSelectServerIdInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Login_PlayerSelectServerId_ARG_int32_serverId__;

            mResponse = new __RPC_Login_PlayerSelectServerId_RET_CharacterListLoginMsg__();
            mResponse.ReturnValue = new CharacterListLoginMsg();
        }

        public __RPC_Login_PlayerSelectServerId_ARG_int32_serverId__ Request { get; private set; }

        private __RPC_Login_PlayerSelectServerId_RET_CharacterListLoginMsg__ mResponse;
        public CharacterListLoginMsg Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }

        public PlayerSelectServerIdInMessage Clone()
        { 
            return new PlayerSelectServerIdInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        public ulong CharacterId { private get; set; }
        public ulong ClientId { get { return mMessage.ClientId; } }
        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class CreateCharacterInMessage : InMessage
    {
        public CreateCharacterInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Login_CreateCharacter_ARG_int32_serverId_int32_type_string_name__;

            mResponse = new __RPC_Login_CreateCharacter_RET_CharacterListLoginMsg__();
            mResponse.ReturnValue = new CharacterListLoginMsg();
        }

        public __RPC_Login_CreateCharacter_ARG_int32_serverId_int32_type_string_name__ Request { get; private set; }

        private __RPC_Login_CreateCharacter_RET_CharacterListLoginMsg__ mResponse;
        public CharacterListLoginMsg Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }

        public CreateCharacterInMessage Clone()
        { 
            return new CreateCharacterInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        public ulong CharacterId { private get; set; }
        public ulong ClientId { get { return mMessage.ClientId; } }
        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class EnterGameInMessage : InMessage
    {
        public EnterGameInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Login_EnterGame_ARG_uint64_characterId__;

            mResponse = new __RPC_Login_EnterGame_RET_EnterGameData__();
            mResponse.ReturnValue = new EnterGameData();
        }

        public __RPC_Login_EnterGame_ARG_uint64_characterId__ Request { get; private set; }

        private __RPC_Login_EnterGame_RET_EnterGameData__ mResponse;
        public EnterGameData Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }

        public EnterGameInMessage Clone()
        { 
            return new EnterGameInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        public ulong CharacterId { private get; set; }
        public ulong ClientId { get { return mMessage.ClientId; } }
        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SyncTimeInMessage : InMessage
    {
        public SyncTimeInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Login_SyncTime_ARG_int32_placeholder__;

            mResponse = new __RPC_Login_SyncTime_RET_uint64__();
            mResponse.ReturnValue = new ulong();
        }

        public __RPC_Login_SyncTime_ARG_int32_placeholder__ Request { get; private set; }

        private __RPC_Login_SyncTime_RET_uint64__ mResponse;
        public ulong Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }

        public SyncTimeInMessage Clone()
        { 
            return new SyncTimeInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        public ulong CharacterId { private get; set; }
        public ulong ClientId { get { return mMessage.ClientId; } }
        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class GetServerListInMessage : InMessage
    {
        public GetServerListInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Login_GetServerList_ARG_int32_placeholder__;

            mResponse = new __RPC_Login_GetServerList_RET_ServerListData__();
            mResponse.ReturnValue = new ServerListData();
        }

        public __RPC_Login_GetServerList_ARG_int32_placeholder__ Request { get; private set; }

        private __RPC_Login_GetServerList_RET_ServerListData__ mResponse;
        public ServerListData Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }

        public GetServerListInMessage Clone()
        { 
            return new GetServerListInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        public ulong CharacterId { private get; set; }
        public ulong ClientId { get { return mMessage.ClientId; } }
        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class NotifyConnectedInMessage : InMessage
    {
        public NotifyConnectedInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Login_NotifyConnected_ARG_uint64_characterId_int32_servictType_int32_err__;

        }

        public __RPC_Login_NotifyConnected_ARG_uint64_characterId_int32_servictType_int32_err__ Request { get; private set; }


        public NotifyConnectedInMessage Clone()
        { 
            return new NotifyConnectedInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        public ulong CharacterId { private get; set; }
        public ulong ClientId { get { return mMessage.ClientId; } }
        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class QueryStatusInMessage : InMessage
    {
        public QueryStatusInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Login_QueryStatus_ARG_uint32_placeholder__;

            mResponse = new __RPC_Login_QueryStatus_RET_LoginServerStatus__();
            mResponse.ReturnValue = new LoginServerStatus();
        }

        public __RPC_Login_QueryStatus_ARG_uint32_placeholder__ Request { get; private set; }

        private __RPC_Login_QueryStatus_RET_LoginServerStatus__ mResponse;
        public LoginServerStatus Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }

        public QueryStatusInMessage Clone()
        { 
            return new QueryStatusInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        public ulong CharacterId { private get; set; }
        public ulong ClientId { get { return mMessage.ClientId; } }
        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class GetLoginSimpleDataInMessage : InMessage
    {
        public GetLoginSimpleDataInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Login_GetLoginSimpleData_ARG_uint64_characterId__;

            mResponse = new __RPC_Login_GetLoginSimpleData_RET_DBCharacterLoginSimple__();
            mResponse.ReturnValue = new DBCharacterLoginSimple();
        }

        public __RPC_Login_GetLoginSimpleData_ARG_uint64_characterId__ Request { get; private set; }

        private __RPC_Login_GetLoginSimpleData_RET_DBCharacterLoginSimple__ mResponse;
        public DBCharacterLoginSimple Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }

        public GetLoginSimpleDataInMessage Clone()
        { 
            return new GetLoginSimpleDataInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        public ulong CharacterId { private get; set; }
        public ulong ClientId { get { return mMessage.ClientId; } }
        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class GetTodayOnlineSecondsInMessage : InMessage
    {
        public GetTodayOnlineSecondsInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Login_GetTodayOnlineSeconds_ARG_uint64_characterId__;

            mResponse = new __RPC_Login_GetTodayOnlineSeconds_RET_int64__();
            mResponse.ReturnValue = new long();
        }

        public __RPC_Login_GetTodayOnlineSeconds_ARG_uint64_characterId__ Request { get; private set; }

        private __RPC_Login_GetTodayOnlineSeconds_RET_int64__ mResponse;
        public long Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }

        public GetTodayOnlineSecondsInMessage Clone()
        { 
            return new GetTodayOnlineSecondsInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        public ulong CharacterId { private get; set; }
        public ulong ClientId { get { return mMessage.ClientId; } }
        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class CheckIsHaveCharacterInMessage : InMessage
    {
        public CheckIsHaveCharacterInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Login_CheckIsHaveCharacter_ARG_uint64_characterId__;

            mResponse = new __RPC_Login_CheckIsHaveCharacter_RET_int32__();
            mResponse.ReturnValue = new int();
        }

        public __RPC_Login_CheckIsHaveCharacter_ARG_uint64_characterId__ Request { get; private set; }

        private __RPC_Login_CheckIsHaveCharacter_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }

        public CheckIsHaveCharacterInMessage Clone()
        { 
            return new CheckIsHaveCharacterInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        public ulong CharacterId { private get; set; }
        public ulong ClientId { get { return mMessage.ClientId; } }
        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class GetCharacterIdByNameInMessage : InMessage
    {
        public GetCharacterIdByNameInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Login_GetCharacterIdByName_ARG_string_name__;

            mResponse = new __RPC_Login_GetCharacterIdByName_RET_uint64__();
            mResponse.ReturnValue = new ulong();
        }

        public __RPC_Login_GetCharacterIdByName_ARG_string_name__ Request { get; private set; }

        private __RPC_Login_GetCharacterIdByName_RET_uint64__ mResponse;
        public ulong Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }

        public GetCharacterIdByNameInMessage Clone()
        { 
            return new GetCharacterIdByNameInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        public ulong CharacterId { private get; set; }
        public ulong ClientId { get { return mMessage.ClientId; } }
        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class KickCharacterInMessage : InMessage
    {
        public KickCharacterInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Login_KickCharacter_ARG_int32_placeholder__;

            mResponse = new __RPC_Login_KickCharacter_RET_int64__();
            mResponse.ReturnValue = new long();
        }

        public __RPC_Login_KickCharacter_ARG_int32_placeholder__ Request { get; private set; }

        private __RPC_Login_KickCharacter_RET_int64__ mResponse;
        public long Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }

        public KickCharacterInMessage Clone()
        { 
            return new KickCharacterInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        public ulong CharacterId { private get; set; }
        public ulong ClientId { get { return mMessage.ClientId; } }
        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class ExitLoginInMessage : InMessage
    {
        public ExitLoginInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Login_ExitLogin_ARG_int32_placeholder__;

        }

        public __RPC_Login_ExitLogin_ARG_int32_placeholder__ Request { get; private set; }


        public ExitLoginInMessage Clone()
        { 
            return new ExitLoginInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        public ulong CharacterId { private get; set; }
        public ulong ClientId { get { return mMessage.ClientId; } }
        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class ExitSelectCharacterInMessage : InMessage
    {
        public ExitSelectCharacterInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Login_ExitSelectCharacter_ARG_uint64_characterId__;

            mResponse = new __RPC_Login_ExitSelectCharacter_RET_CharacterListLoginMsg__();
            mResponse.ReturnValue = new CharacterListLoginMsg();
        }

        public __RPC_Login_ExitSelectCharacter_ARG_uint64_characterId__ Request { get; private set; }

        private __RPC_Login_ExitSelectCharacter_RET_CharacterListLoginMsg__ mResponse;
        public CharacterListLoginMsg Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }

        public ExitSelectCharacterInMessage Clone()
        { 
            return new ExitSelectCharacterInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        public ulong CharacterId { private get; set; }
        public ulong ClientId { get { return mMessage.ClientId; } }
        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class ReadyToEnterInMessage : InMessage
    {
        public ReadyToEnterInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Login_ReadyToEnter_ARG_int32_placeholder__;

            mResponse = new __RPC_Login_ReadyToEnter_RET_int32__();
            mResponse.ReturnValue = new int();
        }

        public __RPC_Login_ReadyToEnter_ARG_int32_placeholder__ Request { get; private set; }

        private __RPC_Login_ReadyToEnter_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }

        public ReadyToEnterInMessage Clone()
        { 
            return new ReadyToEnterInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        public ulong CharacterId { private get; set; }
        public ulong ClientId { get { return mMessage.ClientId; } }
        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class GetTotleOnlineSecondsInMessage : InMessage
    {
        public GetTotleOnlineSecondsInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Login_GetTotleOnlineSeconds_ARG_uint64_characterId__;

            mResponse = new __RPC_Login_GetTotleOnlineSeconds_RET_int64__();
            mResponse.ReturnValue = new long();
        }

        public __RPC_Login_GetTotleOnlineSeconds_ARG_uint64_characterId__ Request { get; private set; }

        private __RPC_Login_GetTotleOnlineSeconds_RET_int64__ mResponse;
        public long Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }

        public GetTotleOnlineSecondsInMessage Clone()
        { 
            return new GetTotleOnlineSecondsInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        public ulong CharacterId { private get; set; }
        public ulong ClientId { get { return mMessage.ClientId; } }
        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class GetPlayerIdByAccountInMessage : InMessage
    {
        public GetPlayerIdByAccountInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Login_GetPlayerIdByAccount_ARG_string_account__;

            mResponse = new __RPC_Login_GetPlayerIdByAccount_RET_uint64__();
            mResponse.ReturnValue = new ulong();
        }

        public __RPC_Login_GetPlayerIdByAccount_ARG_string_account__ Request { get; private set; }

        private __RPC_Login_GetPlayerIdByAccount_RET_uint64__ mResponse;
        public ulong Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }

        public GetPlayerIdByAccountInMessage Clone()
        { 
            return new GetPlayerIdByAccountInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        public ulong CharacterId { private get; set; }
        public ulong ClientId { get { return mMessage.ClientId; } }
        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class QueryServerTimezoneInMessage : InMessage
    {
        public QueryServerTimezoneInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Login_QueryServerTimezone_ARG_int32_placeholder__;

            mResponse = new __RPC_Login_QueryServerTimezone_RET_int32__();
            mResponse.ReturnValue = new int();
        }

        public __RPC_Login_QueryServerTimezone_ARG_int32_placeholder__ Request { get; private set; }

        private __RPC_Login_QueryServerTimezone_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }

        public QueryServerTimezoneInMessage Clone()
        { 
            return new QueryServerTimezoneInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        public ulong CharacterId { private get; set; }
        public ulong ClientId { get { return mMessage.ClientId; } }
        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class ServerGMCommandInMessage : InMessage
    {
        public ServerGMCommandInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Login_ServerGMCommand_ARG_string_cmd_string_param__;

        }

        public __RPC_Login_ServerGMCommand_ARG_string_cmd_string_param__ Request { get; private set; }


        public ServerGMCommandInMessage Clone()
        { 
            return new ServerGMCommandInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        public ulong CharacterId { private get; set; }
        public ulong ClientId { get { return mMessage.ClientId; } }
        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class GateDisconnectInMessage : InMessage
    {
        public GateDisconnectInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Login_GateDisconnect_ARG_uint64_clientId_uint64_characterId__;

        }

        public __RPC_Login_GateDisconnect_ARG_uint64_clientId_uint64_characterId__ Request { get; private set; }


        public GateDisconnectInMessage Clone()
        { 
            return new GateDisconnectInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        public ulong CharacterId { private get; set; }
        public ulong ClientId { get { return mMessage.ClientId; } }
        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class ReConnetInMessage : InMessage
    {
        public ReConnetInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Login_ReConnet_ARG_uint64_clientId_uint64_characterId__;

            mResponse = new __RPC_Login_ReConnet_RET_int32__();
            mResponse.ReturnValue = new int();
        }

        public __RPC_Login_ReConnet_ARG_uint64_clientId_uint64_characterId__ Request { get; private set; }

        private __RPC_Login_ReConnet_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }

        public ReConnetInMessage Clone()
        { 
            return new ReConnetInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        public ulong CharacterId { private get; set; }
        public ulong ClientId { get { return mMessage.ClientId; } }
        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class GetServerCharacterCountInMessage : InMessage
    {
        public GetServerCharacterCountInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Login_GetServerCharacterCount_ARG_int32_result__;

            mResponse = new __RPC_Login_GetServerCharacterCount_RET_Dict_int_int_Data__();
            mResponse.ReturnValue = new Dict_int_int_Data();
        }

        public __RPC_Login_GetServerCharacterCount_ARG_int32_result__ Request { get; private set; }

        private __RPC_Login_GetServerCharacterCount_RET_Dict_int_int_Data__ mResponse;
        public Dict_int_int_Data Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }

        public GetServerCharacterCountInMessage Clone()
        { 
            return new GetServerCharacterCountInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        public ulong CharacterId { private get; set; }
        public ulong ClientId { get { return mMessage.ClientId; } }
        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SendDeviceUdidInMessage : InMessage
    {
        public SendDeviceUdidInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Login_SendDeviceUdid_ARG_string_deviceUdid__;

        }

        public __RPC_Login_SendDeviceUdid_ARG_string_deviceUdid__ Request { get; private set; }


        public SendDeviceUdidInMessage Clone()
        { 
            return new SendDeviceUdidInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        public ulong CharacterId { private get; set; }
        public ulong ClientId { get { return mMessage.ClientId; } }
        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class GetUserIdInMessage : InMessage
    {
        public GetUserIdInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Login_GetUserId_ARG_uint64_clientId__;

            mResponse = new __RPC_Login_GetUserId_RET_string__();
            mResponse.ReturnValue = string.Empty;
        }

        public __RPC_Login_GetUserId_ARG_uint64_clientId__ Request { get; private set; }

        private __RPC_Login_GetUserId_RET_string__ mResponse;
        public string Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }

        public GetUserIdInMessage Clone()
        { 
            return new GetUserIdInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        public ulong CharacterId { private get; set; }
        public ulong ClientId { get { return mMessage.ClientId; } }
        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class GetAllCharactersLoginInfoInMessage : InMessage
    {
        public GetAllCharactersLoginInfoInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Login_GetAllCharactersLoginInfo_ARG_int32_serverId__;

            mResponse = new __RPC_Login_GetAllCharactersLoginInfo_RET_AllCharacterLoginInfo__();
            mResponse.ReturnValue = new AllCharacterLoginInfo();
        }

        public __RPC_Login_GetAllCharactersLoginInfo_ARG_int32_serverId__ Request { get; private set; }

        private __RPC_Login_GetAllCharactersLoginInfo_RET_AllCharacterLoginInfo__ mResponse;
        public AllCharacterLoginInfo Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }

        public GetAllCharactersLoginInfoInMessage Clone()
        { 
            return new GetAllCharactersLoginInfoInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        public ulong CharacterId { private get; set; }
        public ulong ClientId { get { return mMessage.ClientId; } }
        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class GetAnchorIsInRoomInMessage : InMessage
    {
        public GetAnchorIsInRoomInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Login_GetAnchorIsInRoom_ARG_uint64_CharacterId__;

            mResponse = new __RPC_Login_GetAnchorIsInRoom_RET_int32__();
            mResponse.ReturnValue = new int();
        }

        public __RPC_Login_GetAnchorIsInRoom_ARG_uint64_CharacterId__ Request { get; private set; }

        private __RPC_Login_GetAnchorIsInRoom_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }

        public GetAnchorIsInRoomInMessage Clone()
        { 
            return new GetAnchorIsInRoomInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        public ulong CharacterId { private get; set; }
        public ulong ClientId { get { return mMessage.ClientId; } }
        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class GetPlayerDataInMessage : InMessage
    {
        public GetPlayerDataInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Login_GetPlayerData_ARG_uint64_playerId_uint64_charId__;

            mResponse = new __RPC_Login_GetPlayerData_RET_GMPlayerInfoMsg__();
            mResponse.ReturnValue = new GMPlayerInfoMsg();
        }

        public __RPC_Login_GetPlayerData_ARG_uint64_playerId_uint64_charId__ Request { get; private set; }

        private __RPC_Login_GetPlayerData_RET_GMPlayerInfoMsg__ mResponse;
        public GMPlayerInfoMsg Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }

        public GetPlayerDataInMessage Clone()
        { 
            return new GetPlayerDataInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        public ulong CharacterId { private get; set; }
        public ulong ClientId { get { return mMessage.ClientId; } }
        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class LockAccountInMessage : InMessage
    {
        public LockAccountInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Login_LockAccount_ARG_uint64_playerId_int64_endTime__;

            mResponse = new __RPC_Login_LockAccount_RET_int32__();
            mResponse.ReturnValue = new int();
        }

        public __RPC_Login_LockAccount_ARG_uint64_playerId_int64_endTime__ Request { get; private set; }

        private __RPC_Login_LockAccount_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }

        public LockAccountInMessage Clone()
        { 
            return new LockAccountInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        public ulong CharacterId { private get; set; }
        public ulong ClientId { get { return mMessage.ClientId; } }
        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class GMKickCharacterInMessage : InMessage
    {
        public GMKickCharacterInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Login_GMKickCharacter_ARG_uint64_charId_string_name__;

            mResponse = new __RPC_Login_GMKickCharacter_RET_int32__();
            mResponse.ReturnValue = new int();
        }

        public __RPC_Login_GMKickCharacter_ARG_uint64_charId_string_name__ Request { get; private set; }

        private __RPC_Login_GMKickCharacter_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }

        public GMKickCharacterInMessage Clone()
        { 
            return new GMKickCharacterInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        public ulong CharacterId { private get; set; }
        public ulong ClientId { get { return mMessage.ClientId; } }
        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class UpdateServerInMessage : InMessage
    {
        public UpdateServerInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Login_UpdateServer_ARG_int32_placeholder__;

        }

        public __RPC_Login_UpdateServer_ARG_int32_placeholder__ Request { get; private set; }


        public UpdateServerInMessage Clone()
        { 
            return new UpdateServerInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        public ulong CharacterId { private get; set; }
        public ulong ClientId { get { return mMessage.ClientId; } }
        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class ChangeServerInMessage : InMessage
    {
        public ChangeServerInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Login_ChangeServer_ARG_uint64_characterId_int32_serverId__;

            mResponse = new __RPC_Login_ChangeServer_RET_int32__();
            mResponse.ReturnValue = new int();
        }

        public __RPC_Login_ChangeServer_ARG_uint64_characterId_int32_serverId__ Request { get; private set; }

        private __RPC_Login_ChangeServer_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }

        public ChangeServerInMessage Clone()
        { 
            return new ChangeServerInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        public ulong CharacterId { private get; set; }
        public ulong ClientId { get { return mMessage.ClientId; } }
        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class NotiffyGMAccountInMessage : InMessage
    {
        public NotiffyGMAccountInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Login_NotiffyGMAccount_ARG_LoginAllAccounts_acc__;
            if (Request.Acc == null) throw new ArgumentNullException("Acc is null.");

        }

        public __RPC_Login_NotiffyGMAccount_ARG_LoginAllAccounts_acc__ Request { get; private set; }


        public NotiffyGMAccountInMessage Clone()
        { 
            return new NotiffyGMAccountInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        public ulong CharacterId { private get; set; }
        public ulong ClientId { get { return mMessage.ClientId; } }
        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class CreateCharacterByAccountNameInMessage : InMessage
    {
        public CreateCharacterByAccountNameInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Login_CreateCharacterByAccountName_ARG_string_accName__;

            mResponse = new __RPC_Login_CreateCharacterByAccountName_RET_uint64__();
            mResponse.ReturnValue = new ulong();
        }

        public __RPC_Login_CreateCharacterByAccountName_ARG_string_accName__ Request { get; private set; }

        private __RPC_Login_CreateCharacterByAccountName_RET_uint64__ mResponse;
        public ulong Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }

        public CreateCharacterByAccountNameInMessage Clone()
        { 
            return new CreateCharacterByAccountNameInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        public ulong CharacterId { private get; set; }
        public ulong ClientId { get { return mMessage.ClientId; } }
        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class CloneCharacterDbByIdInMessage : InMessage
    {
        public CloneCharacterDbByIdInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Login_CloneCharacterDbById_ARG_uint64_fromId_uint64_toId__;

            mResponse = new __RPC_Login_CloneCharacterDbById_RET_int32__();
            mResponse.ReturnValue = new int();
        }

        public __RPC_Login_CloneCharacterDbById_ARG_uint64_fromId_uint64_toId__ Request { get; private set; }

        private __RPC_Login_CloneCharacterDbById_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }

        public CloneCharacterDbByIdInMessage Clone()
        { 
            return new CloneCharacterDbByIdInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        public ulong CharacterId { private get; set; }
        public ulong ClientId { get { return mMessage.ClientId; } }
        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class GetCharacterIdByAccountNameInMessage : InMessage
    {
        public GetCharacterIdByAccountNameInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Login_GetCharacterIdByAccountName_ARG_string_accName__;

            mResponse = new __RPC_Login_GetCharacterIdByAccountName_RET_uint64__();
            mResponse.ReturnValue = new ulong();
        }

        public __RPC_Login_GetCharacterIdByAccountName_ARG_string_accName__ Request { get; private set; }

        private __RPC_Login_GetCharacterIdByAccountName_RET_uint64__ mResponse;
        public ulong Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }

        public GetCharacterIdByAccountNameInMessage Clone()
        { 
            return new GetCharacterIdByAccountNameInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        public ulong CharacterId { private get; set; }
        public ulong ClientId { get { return mMessage.ClientId; } }
        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class TryModifyPlayerNameInMessage : InMessage
    {
        public TryModifyPlayerNameInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Login_TryModifyPlayerName_ARG_string_modifyName__;

            mResponse = new __RPC_Login_TryModifyPlayerName_RET_string__();
            mResponse.ReturnValue = string.Empty;
        }

        public __RPC_Login_TryModifyPlayerName_ARG_string_modifyName__ Request { get; private set; }

        private __RPC_Login_TryModifyPlayerName_RET_string__ mResponse;
        public string Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }

        public TryModifyPlayerNameInMessage Clone()
        { 
            return new TryModifyPlayerNameInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        public ulong CharacterId { private get; set; }
        public ulong ClientId { get { return mMessage.ClientId; } }
        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

}
