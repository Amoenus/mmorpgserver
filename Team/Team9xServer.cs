// Generated by the rpc compiler.  DO NOT EDIT!
using System;
using System.Collections;
using System.IO;
using Scorpion;
using System.Collections.Generic;
using ProtoBuf;
using DataContract;

#pragma warning disable 0162,0108
namespace TeamServerService
{

    public interface ITeamService
    {
        /// <summary>
        /// </summary>
        IEnumerator PrepareDataForEnterGame(Coroutine coroutine, TeamService _this, PrepareDataForEnterGameInMessage msg);
        /// <summary>
        /// </summary>
        IEnumerator PrepareDataForCreateCharacter(Coroutine coroutine, TeamService _this, PrepareDataForCreateCharacterInMessage msg);
        /// <summary>
        /// </summary>
        IEnumerator PrepareDataForCommonUse(Coroutine coroutine, TeamService _this, PrepareDataForCommonUseInMessage msg);
        /// <summary>
        /// </summary>
        IEnumerator PrepareDataForLogout(Coroutine coroutine, TeamService _this, PrepareDataForLogoutInMessage msg);
        /// <summary>
        /// 检查客户端是否已经连接到对应服务器
        /// </summary>
        IEnumerator CheckConnected(Coroutine coroutine, TeamService _this, CheckConnectedInMessage msg);
        /// <summary>
        /// 检查相应客户端连接是否已经断开
        /// </summary>
        IEnumerator CheckLost(Coroutine coroutine, TeamService _this, CheckLostInMessage msg);
        /// <summary>
        /// 查询服务器状态
        /// </summary>
        IEnumerator QueryStatus(Coroutine coroutine, TeamService _this, QueryStatusInMessage msg);
        /// <summary>
        /// 队长创建切换场景
        /// </summary>
        IEnumerator TeamDungeonLeaderChangeScene(Coroutine coroutine, TeamService _this, TeamDungeonLeaderChangeSceneInMessage msg);
        /// <summary>
        /// 退出副本队伍了
        /// </summary>
        IEnumerator LeaveDungeon(Coroutine coroutine, TeamService _this, LeaveDungeonInMessage msg);
        /// <summary>
        /// 广播表格重载
        /// </summary>
        IEnumerator ServerGMCommand(Coroutine coroutine, TeamService _this, ServerGMCommandInMessage msg);
        /// <summary>
        /// 战盟操作:创建
        /// </summary>
        IEnumerator Logic2TeamCreateAlliance(Coroutine coroutine, TeamService _this, Logic2TeamCreateAllianceInMessage msg);
        /// <summary>
        /// 战盟操作:其他操作 	type：0=申请加入（value=战盟ID）  1=取消申请（value=战盟ID）  2=退出战盟   3=同意邀请（value=战盟ID）  4=拒绝邀请（value=战盟ID）
        /// </summary>
        IEnumerator Logic2TeamAllianceOperation(Coroutine coroutine, TeamService _this, Logic2TeamAllianceOperationInMessage msg);
        /// <summary>
        /// 战盟操作:其他操作     type：0=邀请加入 1=同意申请加入 2：拒绝申请加入
        /// </summary>
        IEnumerator Logic2TeamAllianceOperationCharacter(Coroutine coroutine, TeamService _this, Logic2TeamAllianceOperationCharacterInMessage msg);
        /// <summary>
        /// 同步一次帮派数据
        /// </summary>
        IEnumerator GetAllianceCharacterData(Coroutine coroutine, TeamService _this, GetAllianceCharacterDataInMessage msg);
        /// <summary>
        /// 请求玩家的队伍信息
        /// </summary>
        IEnumerator SSGetTeamData(Coroutine coroutine, TeamService _this, SSGetTeamDataInMessage msg);
        /// <summary>
        /// 请求玩家的战盟信息
        /// </summary>
        IEnumerator SSGetAllianceData(Coroutine coroutine, TeamService _this, SSGetAllianceDataInMessage msg);
        /// <summary>
        /// 玩家捐献，这边需要记录
        /// </summary>
        IEnumerator Logic2TeamDonationAllianceItem(Coroutine coroutine, TeamService _this, Logic2TeamDonationAllianceItemInMessage msg);
        /// <summary>
        /// 获得战盟的Buff等级
        /// SS int32                SSGetAllianceBuffLevel(int32 serverId,int32 buffId)=7079;
        /// 获得战盟的名字
        /// </summary>
        IEnumerator SSGetAllianceName(Coroutine coroutine, TeamService _this, SSGetAllianceNameInMessage msg);
        /// <summary>
        /// GM获得一个服务器所有战盟的详细信息GM后台使用
        /// </summary>
        IEnumerator SSGetAlliance(Coroutine coroutine, TeamService _this, SSGetAllianceInMessage msg);
        /// <summary>
        /// GM修改角色权限
        /// </summary>
        IEnumerator GMChangeJurisdiction(Coroutine coroutine, TeamService _this, GMChangeJurisdictionInMessage msg);
        /// <summary>
        /// GM修改战盟公告
        /// </summary>
        IEnumerator GMChangeAllianceNotice(Coroutine coroutine, TeamService _this, GMChangeAllianceNoticeInMessage msg);
        /// <summary>
        /// GM解散战盟
        /// </summary>
        IEnumerator GMDelAllicance(Coroutine coroutine, TeamService _this, GMDelAllicanceInMessage msg);
        /// <summary>
        /// 交易所：广播交易道具
        /// </summary>
        IEnumerator BroadcastExchangeItem(Coroutine coroutine, TeamService _this, BroadcastExchangeItemInMessage msg);
        /// <summary>
        /// 交易所：请求可看到的交易所道具
        /// </summary>
        IEnumerator GetExchangeItem(Coroutine coroutine, TeamService _this, GetExchangeItemInMessage msg);
        /// <summary>
        /// 交易所：取消广播交易道具
        /// </summary>
        IEnumerator CancelExchangeItem(Coroutine coroutine, TeamService _this, CancelExchangeItemInMessage msg);
        /// <summary>
        /// 获得团购申请
        /// </summary>
        IEnumerator SSApplyGroupShopItems(Coroutine coroutine, TeamService _this, SSApplyGroupShopItemsInMessage msg);
        /// <summary>
        /// 购买一个道具
        /// </summary>
        IEnumerator SSBuyGroupShopItem(Coroutine coroutine, TeamService _this, SSBuyGroupShopItemInMessage msg);
        /// <summary>
        /// 获取我当前的愿望
        /// </summary>
        IEnumerator SSGetBuyedGroupShopItems(Coroutine coroutine, TeamService _this, SSGetBuyedGroupShopItemsInMessage msg);
        /// <summary>
        /// 获取团购历史
        /// </summary>
        IEnumerator SSGetGroupShopHistory(Coroutine coroutine, TeamService _this, SSGetGroupShopHistoryInMessage msg);
        /// <summary>
        /// 战场有人进去了
        /// </summary>
        IEnumerator SSCharacterEnterBattle(Coroutine coroutine, TeamService _this, SSCharacterEnterBattleInMessage msg);
        /// <summary>
        /// 战场有人离开了
        /// </summary>
        IEnumerator SSCharacterLeaveBattle(Coroutine coroutine, TeamService _this, SSCharacterLeaveBattleInMessage msg);
        /// <summary>
        /// 某个战场结束了
        /// </summary>
        IEnumerator SSBattleEnd(Coroutine coroutine, TeamService _this, SSBattleEndInMessage msg);
        /// <summary>
        /// 查询某个队伍ID的人数
        /// </summary>
        IEnumerator SSGetTeamCount(Coroutine coroutine, TeamService _this, SSGetTeamCountInMessage msg);
        /// <summary>
        /// 获得本队伍其他人的SceneData
        /// </summary>
        IEnumerator SSGetTeamSceneData(Coroutine coroutine, TeamService _this, SSGetTeamSceneDataInMessage msg);
        /// <summary>
        /// 获得本队伍其他人的Id
        /// </summary>
        IEnumerator SSGetTeamCharacters(Coroutine coroutine, TeamService _this, SSGetTeamCharactersInMessage msg);
        /// <summary>
        /// 玩家切换场景了
        /// </summary>
        IEnumerator SSNotifyPlayerChangeScene(Coroutine coroutine, TeamService _this, SSNotifyPlayerChangeSceneInMessage msg);
        /// <summary>
        /// 查询服务器状态，是否可以进入
        /// </summary>
        IEnumerator ReadyToEnter(Coroutine coroutine, TeamService _this, ReadyToEnterInMessage msg);
        /// <summary>
        /// 更新服务器
        /// </summary>
        IEnumerator UpdateServer(Coroutine coroutine, TeamService _this, UpdateServerInMessage msg);
        /// <summary>
        /// Scene通知Team，攻城战结果
        /// </summary>
        IEnumerator NotifyAllianceWarResult(Coroutine coroutine, TeamService _this, NotifyAllianceWarResultInMessage msg);
        /// <summary>
        /// 请求攻城战相关信息
        /// </summary>
        IEnumerator QueryAllianceWarInfo(Coroutine coroutine, TeamService _this, QueryAllianceWarInfoInMessage msg);
        /// <summary>
        /// 拍卖行：添加道具
        /// </summary>
        IEnumerator SSOnItemAuction(Coroutine coroutine, TeamService _this, SSOnItemAuctionInMessage msg);
        /// <summary>
        /// 拍卖行：取消交易道具
        /// </summary>
        IEnumerator SSDownItemAuction(Coroutine coroutine, TeamService _this, SSDownItemAuctionInMessage msg);
        /// <summary>
        /// 拍卖行：检查是否存在道具
        /// </summary>
        IEnumerator SSSelectItemAuction(Coroutine coroutine, TeamService _this, SSSelectItemAuctionInMessage msg);
        /// <summary>
        /// 通知某个角色开始 链接各游戏服务器了
        /// </summary>
        IEnumerator SSNotifyCharacterOnConnet(Coroutine coroutine, TeamService _this, SSNotifyCharacterOnConnetInMessage msg);
        /// <summary>
        /// 通知服务器玩家掉线了
        /// </summary>
        IEnumerator BSNotifyCharacterOnLost(Coroutine coroutine, TeamService _this, BSNotifyCharacterOnLostInMessage msg);
        /// <summary>
        /// 队伍：自动匹配  logic广播玩家： 是否接受自动入队 flag标记
        /// </summary>
        IEnumerator SSGetCharacterTeamFlag(Coroutine coroutine, TeamService _this, SSGetCharacterTeamFlagInMessage msg);
        /// <summary>
        /// 战盟仓库捐赠
        /// </summary>
        IEnumerator SSAllianceDepotDonate(Coroutine coroutine, TeamService _this, SSAllianceDepotDonateInMessage msg);
        /// <summary>
        /// 战盟仓库取出
        /// </summary>
        IEnumerator SSAllianceDepotTakeOut(Coroutine coroutine, TeamService _this, SSAllianceDepotTakeOutInMessage msg);
        /// <summary>
        /// GM相关 begin  逻辑包放GM工具前
        /// </summary>
        IEnumerator GMCommand(Coroutine coroutine, TeamService _this, GMCommandInMessage msg);
        /// <summary>
        /// GM相关 end
        /// 玩家占领某个包含矿脉的scene
        /// </summary>
        IEnumerator PlayerHoldLode(Coroutine coroutine, TeamService _this, PlayerHoldLodeInMessage msg);
        /// <summary>
        /// 玩家挖矿
        /// </summary>
        IEnumerator PlayerCollectLode(Coroutine coroutine, TeamService _this, PlayerCollectLodeInMessage msg);
        /// <summary>
        /// 请求矿脉信息
        /// </summary>
        IEnumerator ApplyHoldLode(Coroutine coroutine, TeamService _this, ApplyHoldLodeInMessage msg);
        /// <summary>
        /// </summary>
        IEnumerator SSApplyFieldActivityReward(Coroutine coroutine, TeamService _this, SSApplyFieldActivityRewardInMessage msg);
        /// <summary>
        /// </summary>
        IEnumerator SSSyncTeamMemberLevelChange(Coroutine coroutine, TeamService _this, SSSyncTeamMemberLevelChangeInMessage msg);
        /// <summary>
        /// </summary>
        IEnumerator SSAddAllianceContribution(Coroutine coroutine, TeamService _this, SSAddAllianceContributionInMessage msg);
        /// <summary>
        /// 通知修改玩家名字
        /// </summary>
        IEnumerator NodifyModifyPlayerName(Coroutine coroutine, TeamService _this, NodifyModifyPlayerNameInMessage msg);
        /// <summary>
        /// </summary>
        IEnumerator NodifyModifyAllianceMemberName(Coroutine coroutine, TeamService _this, NodifyModifyAllianceMemberNameInMessage msg);
        /// <summary>
        /// 服务器内的组队操作
        /// </summary>
        IEnumerator SSLeaveTeam(Coroutine coroutine, TeamService _this, SSLeaveTeamInMessage msg);
        IEnumerator OnServerStart(Coroutine coroutine, TeamService _this);
        IEnumerator OnServerStop(Coroutine coroutine, TeamService _this);
    }

    public abstract class TeamService : ServerAgentBase
    {

        protected static ITeamService mImpl;
        public static ITeamCharacterProxy mProxyImpl;
        public void SetServiceImpl(ITeamService impl)
        {
            mImpl = impl;
        }
        public void SetProxyImpl(ITeamCharacterProxy proxyImpl)
        {
            mProxyImpl = proxyImpl;
        }
        public abstract TeamCharacterProxy NewCharacterIn(ulong characterId, ulong clientId);
        public Dictionary<ulong, TeamCharacterProxy> Proxys = new Dictionary<ulong, TeamCharacterProxy>();
        protected override object GetRequestData(uint p, byte[] list)
        {
            switch(p)
            {
            case 7000:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_PrepareDataForEnterGame_ARG_int32_serverId__>(ms);
                }
                break;
            case 7001:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_PrepareDataForCreateCharacter_ARG_int32_type__>(ms);
                }
                break;
            case 7002:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_PrepareDataForCommonUse_ARG_uint32_placeholder__>(ms);
                }
                break;
            case 7003:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_PrepareDataForLogout_ARG_uint32_placeholder__>(ms);
                }
                break;
            case 7030:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_SBGetAllOnlineCharacterInServer_ARG_int32_serverId__>(ms);
                }
                break;
            case 7031:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_CheckConnected_ARG_uint64_characterId__>(ms);
                }
                break;
            case 7032:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_CheckLost_ARG_uint64_characterId__>(ms);
                }
                break;
            case 7033:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_QueryStatus_ARG_uint32_placeholder__>(ms);
                }
                break;
            case 7040:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_QueryBrokerStatus_ARG_uint32_placeholder__>(ms);
                }
                break;
            case 7041:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_TeamMessage_ARG_uint64_characterId_int32_type_uint64_teamId_uint64_otherId__>(ms);
                }
                break;
            case 7042:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_NotifyTeamMessage_ARG_int32_type_uint64_teamId_uint64_characterId__>(ms);
                }
                break;
            case 7043:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_ApplyTeam_ARG_uint64_characterId__>(ms);
                }
                break;
            case 7044:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_TeamChatMessage_ARG_int32_chatType_ChatMessageContent_Content_uint64_characterId__>(ms);
                }
                break;
            case 7045:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_TeamDungeonLineUp_ARG_int32_dungeonId__>(ms);
                }
                break;
            case 7046:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_TeamDungeonLeaderChangeScene_ARG_uint64_sceneGuid__>(ms);
                }
                break;
            case 7047:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_MatchingStart_ARG_int32_queueId__>(ms);
                }
                break;
            case 7048:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_MatchingCancel_ARG_int32_queueId__>(ms);
                }
                break;
            case 7049:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_MatchingSuccess_ARG_int32_queueId__>(ms);
                }
                break;
            case 7050:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_NotifyMatchingData_ARG_QueueInfo_queueInfo__>(ms);
                }
                break;
            case 7051:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_MatchingBack_ARG_int32_result__>(ms);
                }
                break;
            case 7052:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_TeamServerMessage_ARG_int32_resultType_string_args__>(ms);
                }
                break;
            case 7053:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_LeaveDungeon_ARG_uint64_characterId__>(ms);
                }
                break;
            case 7054:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_ApplyQueueData_ARG_int32_placeholder__>(ms);
                }
                break;
            case 7055:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_TeamEnterFuben_ARG_int32_fubenId_int32_serverId__>(ms);
                }
                break;
            case 7056:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_SyncTeamEnterFuben_ARG_int32_fubenId__>(ms);
                }
                break;
            case 7057:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_ResultTeamEnterFuben_ARG_int32_fubenID_int32_isOk__>(ms);
                }
                break;
            case 7058:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_ServerGMCommand_ARG_string_cmd_string_param__>(ms);
                }
                break;
            case 7059:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_GMTeam_ARG_string_commond__>(ms);
                }
                break;
            case 7060:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_MemberWantInvite_ARG_int32_type_string_memberName_int32_memberJob_int32_memberLevel_string_toName_uint64_toId__>(ms);
                }
                break;
            case 7061:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_Logic2TeamCreateAlliance_ARG_int32_serverId_uint64_guid_string_name_int32_state__>(ms);
                }
                break;
            case 7062:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_Logic2TeamAllianceOperation_ARG_int32_type_int32_value__>(ms);
                }
                break;
            case 7063:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_Logic2TeamAllianceOperationCharacter_ARG_int32_type_string_name_int32_allianceId_uint64_guid__>(ms);
                }
                break;
            case 7064:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_SyncAllianceMessage_ARG_int32_type_string_name1_int32_allianceId_string_name2__>(ms);
                }
                break;
            case 7065:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_ApplyAllianceData_ARG_int32_allianceId__>(ms);
                }
                break;
            case 7066:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_ApplyAllianceDataByServerId_ARG_int32_serverId_int32_type__>(ms);
                }
                break;
            case 7067:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_ChangeAllianceNotice_ARG_int32_allianceId_string_Content__>(ms);
                }
                break;
            case 7068:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_GetServerAlliance_ARG_int32_serverId__>(ms);
                }
                break;
            case 7069:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_ChangeJurisdiction_ARG_int32_allianceId_uint64_guid_int32_type__>(ms);
                }
                break;
            case 7070:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_ChangeAllianceAutoJoin_ARG_int32_allianceId_int32_value__>(ms);
                }
                break;
            case 7071:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_AllianceAgreeApplyList_ARG_int32_allianceId_int32_type_Uint64Array_guids__>(ms);
                }
                break;
            case 7072:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_GetAllianceCharacterData_ARG_int32_serverId_uint64_guid_int32_level__>(ms);
                }
                break;
            case 7073:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_SSGetTeamData_ARG_uint64_guid__>(ms);
                }
                break;
            case 7074:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_SSGetAllianceData_ARG_int32_serverId__>(ms);
                }
                break;
            case 7075:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_SendMatchingMessage_ARG_int32_NowCount__>(ms);
                }
                break;
            case 7076:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_Logic2TeamDonationAllianceItem_ARG_int32_serverId_int32_type_string_name__>(ms);
                }
                break;
            case 7078:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_TeamSyncAllianceMessage_ARG_int32_type_string_name1_int32_allianceId_string_name2__>(ms);
                }
                break;
            case 7300:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_SSGetAllianceName_ARG_int32_allianceId__>(ms);
                }
                break;
            case 7301:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_SSGetAlliance_ARG_int32_serverId_int32_startIndex_int32_EndIndex_string_name__>(ms);
                }
                break;
            case 7302:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_GMChangeJurisdiction_ARG_int32_serverId_int32_allianceId_uint64_guid_int32_type__>(ms);
                }
                break;
            case 7303:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_GMChangeAllianceNotice_ARG_int32_serverId_int32_allianceId_string_Content__>(ms);
                }
                break;
            case 7304:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_GMDelAllicance_ARG_int32_allianceId__>(ms);
                }
                break;
            case 7080:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_ChangeAllianceData_ARG_int32_type_int32_param1_int32_param2__>(ms);
                }
                break;
            case 7081:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_ApplyAllianceMissionData_ARG_int32_allianceId__>(ms);
                }
                break;
            case 7082:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_UpgradeAllianceLevel_ARG_int32_allianceId__>(ms);
                }
                break;
            case 7083:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_BroadcastExchangeItem_ARG_uint64_characterId_string_characterName_ItemBaseData_item_int32_needCount_int32_ContinueMinutes__>(ms);
                }
                break;
            case 7084:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_GetExchangeItem_ARG_uint64_characterId_int32_level_int32_count_int32_type__>(ms);
                }
                break;
            case 7085:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_CancelExchangeItem_ARG_uint64_characterId_int64_itemGuid__>(ms);
                }
                break;
            case 7086:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_SSApplyGroupShopItems_ARG_Int32Array_types_Int64ArrayList_items_int32_profession__>(ms);
                }
                break;
            case 7087:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_SSBuyGroupShopItem_ARG_int64_guid_int32_count__>(ms);
                }
                break;
            case 7088:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_SSGetBuyedGroupShopItems_ARG_Int64Array_buyed__>(ms);
                }
                break;
            case 7089:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_SSGetGroupShopHistory_ARG_Int64Array_buyed_Int64Array_history__>(ms);
                }
                break;
            case 7090:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_ApplyAllianceEnjoyList_ARG_int32_allianceId__>(ms);
                }
                break;
            case 7091:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_ApplyAllianceDonationList_ARG_int32_allianceId__>(ms);
                }
                break;
            case 7092:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_SSCharacterEnterBattle_ARG_int32_fubenId_uint64_sceneGuid_uint64_characterId__>(ms);
                }
                break;
            case 7093:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_SSCharacterLeaveBattle_ARG_int32_fubenId_uint64_sceneGuid_uint64_characterId__>(ms);
                }
                break;
            case 7094:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_SSBattleEnd_ARG_uint64_sceneGuid__>(ms);
                }
                break;
            case 7095:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_SSGetTeamCount_ARG_Uint64Array_teamIds__>(ms);
                }
                break;
            case 7096:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_SSGetTeamSceneData_ARG_uint64_characterId__>(ms);
                }
                break;
            case 7097:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_SSGetTeamCharacters_ARG_uint64_characterId__>(ms);
                }
                break;
            case 7098:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_SSNotifyPlayerChangeScene_ARG_int32_serverId_uint64_guid_int32_sceneId_int32_level_int32_fightPoint__>(ms);
                }
                break;
            case 7099:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_ReadyToEnter_ARG_int32_placeholder__>(ms);
                }
                break;
            case 7100:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_SendGroupMessage_ARG_StringArray_contents__>(ms);
                }
                break;
            case 7101:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_UpdateServer_ARG_int32_placeholder__>(ms);
                }
                break;
            case 7102:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_NotifyQueueMessage_ARG_TeamCharacterMessage_tcm__>(ms);
                }
                break;
            case 7103:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_NotifyQueueResult_ARG_uint64_characterId_int32_result__>(ms);
                }
                break;
            case 7104:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_ApplyAllianceWarOccupantData_ARG_int32_serverId__>(ms);
                }
                break;
            case 7105:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_NotifyAllianceWarOccupantData_ARG_AllianceWarOccupantData_data__>(ms);
                }
                break;
            case 7106:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_ApplyAllianceWarChallengerData_ARG_int32_serverId__>(ms);
                }
                break;
            case 7107:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_NotifyAllianceWarChallengerData_ARG_AllianceWarChallengerData_data__>(ms);
                }
                break;
            case 7108:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_ApplyAllianceWarData_ARG_int32_serverId__>(ms);
                }
                break;
            case 7109:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_BidAllianceWar_ARG_int32_price__>(ms);
                }
                break;
            case 7110:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_EnterAllianceWar_ARG_int32_placeholder__>(ms);
                }
                break;
            case 7111:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_NotifyAllianceWarResult_ARG_AllianceWarResult_result__>(ms);
                }
                break;
            case 7112:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_QueryAllianceWarInfo_ARG_int32_placeholder__>(ms);
                }
                break;
            case 7113:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_SyncAllianceChatMessage_ARG_int32_chatType_uint64_characterId_string_characterName_ChatMessageContent_content__>(ms);
                }
                break;
            case 7114:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_SSOnItemAuction_ARG_int32_serverId_uint64_characterId_string_characterName_ItemBaseData_item_int32_needType_int32_needCount_int64_itemGuid__>(ms);
                }
                break;
            case 7115:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_SSDownItemAuction_ARG_int32_serverId_uint64_characterId_int64_itemGuid__>(ms);
                }
                break;
            case 7116:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_CSSelectItemAuction_ARG_int32_serverId_int32_type__>(ms);
                }
                break;
            case 7117:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_SSSelectItemAuction_ARG_int32_serverId_uint64_characterId_int64_itemManagerId__>(ms);
                }
                break;
            case 7130:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_CSEnrollUnionBattle_ARG_int32_allianceId_uint64_characterId__>(ms);
                }
                break;
            case 7131:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_CSEnterUnionBattle_ARG_int32_allianceId_uint64_characterId__>(ms);
                }
                break;
            case 7132:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_CSGetUnionBattleInfo_ARG_int32_allianceId__>(ms);
                }
                break;
            case 7133:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_CSGetUnionBattleMathInfo_ARG_int32_placeholder__>(ms);
                }
                break;
            case 7500:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_SBCleanClientCharacterData_ARG_uint64_clientId_uint64_characterId__>(ms);
                }
                break;
            case 7501:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_SSNotifyCharacterOnConnet_ARG_uint64_clientId_uint64_characterId__>(ms);
                }
                break;
            case 7503:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_BSNotifyCharacterOnLost_ARG_uint64_clientId_uint64_characterId__>(ms);
                }
                break;
            case 7504:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_AutoMatchBegin_ARG_int32_isHaveTeam_int32_type_int32_targetID__>(ms);
                }
                break;
            case 7505:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_AutoMatchEnd_ARG_int32_MathchState__>(ms);
                }
                break;
            case 7506:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_AutoMatchCancel_ARG_int32_match__>(ms);
                }
                break;
            case 7507:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_AutoMatchStateChange_ARG_int32_MathchState__>(ms);
                }
                break;
            case 7508:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_SSGetCharacterTeamFlag_ARG_uint64_characterId_bool_flag__>(ms);
                }
                break;
            case 7509:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_ChangetTeamTarget_ARG_int32_type_int32_targetID_int32_levelMini_int32_levelMax_int32_readTableId__>(ms);
                }
                break;
            case 7510:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_NotifyChangetTeamTarget_ARG_int32_type_int32_targetID_int32_levelMini_int32_levelMax_int32_readTableId__>(ms);
                }
                break;
            case 7512:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_SearchTeamList_ARG_int32_groupType_int32_targetID_int32_level__>(ms);
                }
                break;
            case 7513:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_TeamSearchApplyList_ARG_uint64_characterId__>(ms);
                }
                break;
            case 7514:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_NotifyTeamScenGuid_ARG_uint64_characterId_uint64_changeCharacterId_uint64_sceneGuid__>(ms);
                }
                break;
            case 7515:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_TeamApplyListClear_ARG_uint64_characterId__>(ms);
                }
                break;
            case 7516:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_TeamApplyListSync_ARG_uint64_characterId_bool_state__>(ms);
                }
                break;
            case 7520:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_SSAllianceDepotDonate_ARG_int32_serverId_uint64_characterId_string_characterName_ItemBaseData_item__>(ms);
                }
                break;
            case 7521:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_ApplyAllianceDepotLogList_ARG_int32_allianceId__>(ms);
                }
                break;
            case 7522:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_BattleUnionDepotArrange_ARG_int32_allianceId__>(ms);
                }
                break;
            case 7523:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_SSAllianceDepotTakeOut_ARG_int32_serverId_uint64_characterId_string_characterName_int32_bagIndex_int32_itemId__>(ms);
                }
                break;
            case 7524:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_ApplyAllianceDepotData_ARG_int32_allianceId__>(ms);
                }
                break;
            case 7525:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_BattleUnionDepotClearUp_ARG_int32_allianceId_ClearUpInfo_info__>(ms);
                }
                break;
            case 7526:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_BattleUnionRemoveDepotItem_ARG_int32_allianceId_int32_itemId_int32_bagIndex__>(ms);
                }
                break;
            case 7900:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_GMCommand_ARG_StringArray_commonds__>(ms);
                }
                break;
            case 7901:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_PlayerHoldLode_ARG_int32_serverId_int32_allianceId_int32_sceneId__>(ms);
                }
                break;
            case 7902:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_PlayerCollectLode_ARG_int32_serverId_uint64_characterId_int32_allianceId_int32_sceneId_int32_LodeId_int32_addScore_FieldRankBaseData_baseData_int32_meritPoint__>(ms);
                }
                break;
            case 7903:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_ApplyHoldLode_ARG_int32_serverId_int32_sceneId__>(ms);
                }
                break;
            case 7904:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_ClientApplyHoldLode_ARG_int32_serverId__>(ms);
                }
                break;
            case 7905:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_ClientApplyActiveInfo_ARG_int32_serverId_int32_allianceId__>(ms);
                }
                break;
            case 7906:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_SSApplyFieldActivityReward_ARG_int32_serverId_int32_allianceId_uint64_characterId_int32_missionId_int32_score_int32_addScore_FieldRankBaseData_data__>(ms);
                }
                break;
            case 7907:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_SSSyncTeamMemberLevelChange_ARG_int32_serverId_uint64_characterId_uint64_teamId_int32_reborn_int32_level__>(ms);
                }
                break;
            case 7908:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_SCSyncTeamMemberLevelChange_ARG_uint64_characterId_uint64_changeCharacterId_int32_reborn_int32_level__>(ms);
                }
                break;
            case 7909:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_SSAddAllianceContribution_ARG_int32_serverId_uint64_characterId_int32_allianceId_int32_Contribution__>(ms);
                }
                break;
            case 7910:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_NoticeTeamMemberError_ARG_string_msgInfo__>(ms);
                }
                break;
            case 7911:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_NotifyFieldFinal_ARG_MsgWarFlagInfoList_msg__>(ms);
                }
                break;
            case 7912:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_SCNotifyAllianceActiveTask_ARG_DBActiveTask_msg__>(ms);
                }
                break;
            case 7913:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_ClearAllianceApplyList_ARG_int32_allianceId_Uint64Array_guids__>(ms);
                }
                break;
            case 7914:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_SCNotifyPlayerExitAlliance_ARG_uint64_exitplayerid_string_name_bool_bChange_uint64_leaderId_string_leaderName__>(ms);
                }
                break;
            case 7915:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_NodifyModifyPlayerName_ARG_int32_serverId_uint64_characterId_uint64_teamId_string_modifyName__>(ms);
                }
                break;
            case 7916:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_NodifyTeamMemberPlayerNameChange_ARG_uint64_characterId_uint64_changeCharacterId_string_changeName__>(ms);
                }
                break;
            case 7917:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_NodifyModifyAllianceMemberName_ARG_int32_serverId_uint64_characterId_int32_allianceId_string_modifyName__>(ms);
                }
                break;
            case 7918:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Team_SSLeaveTeam_ARG_int32_placeholder__>(ms);
                }
                break;
            default:
                break;
            }

            return null;
        }

        public override IEnumerator OnClientConnected(Coroutine coroutine, string target, ulong clientId, ulong characterId, uint packId)
        {
            if (target != "client")
            {
                return null;
            }

            var proxy = NewCharacterIn(characterId, clientId);
            if (proxy != null)
            {
                Proxys[characterId] = proxy;
                return mProxyImpl.OnConnected(coroutine, proxy, packId);
            }
            return null;
        }
        public override IEnumerator OnClientLost(Coroutine coroutine, string target, ulong clientId, ulong characterId, uint packId)
        {
            if (target != "client")
            {
                yield break;
            }
            TeamCharacterProxy proxy = null;
            if (Proxys.TryGetValue(characterId, out proxy))
            {
                var co = CoroutineFactory.NewSubroutine(mProxyImpl.OnLost, coroutine, proxy, packId);
                if (co.MoveNext())
                {
                    yield return co;
                }
                Proxys.Remove(characterId);
            }
        }
        public void CharacterId2ClientId(IEnumerable<ulong> ids, List<ulong> known, List<ulong> unknown)
        {
            foreach (var id in ids)
            {
                TeamCharacterProxy proxy;
                if (Proxys.TryGetValue(id, out proxy))
                {
                    known.Add(((TeamCharacterProxy)proxy).ClientId);
                }
                else
                {
                    unknown.Add(id);
                }
            }
        }
        /// <summary>
        /// 组队接口
        /// </summary>
        public IEnumerator TeamMessage(Coroutine coroutine, TeamMessageInMessage msg)
        {
            TeamCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.TeamMessage(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 组队信息通知
        /// </summary>
        public object NotifyTeamMessage(ulong __characterId__, ulong __clientId__, int type, ulong teamId, ulong characterId)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 7042;
            desc.CharacterId = __characterId__;
            desc.ClientId = __clientId__;
            desc.PacketId = 0;

            var __data__ = new __RPC_Team_NotifyTeamMessage_ARG_int32_type_uint64_teamId_uint64_characterId__();
            __data__.Type=type;
            __data__.TeamId=teamId;
            __data__.CharacterId=characterId;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            desc.Type = (int)MessageType.SC;
            desc.ServiceType = (int) ServiceType.Team;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// 获取组队信息
        /// </summary>
        public IEnumerator ApplyTeam(Coroutine coroutine, ApplyTeamInMessage msg)
        {
            TeamCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.ApplyTeam(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 接受聊天数据
        /// </summary>
        public IEnumerator TeamChatMessage(Coroutine coroutine, TeamChatMessageInMessage msg)
        {
            TeamCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.TeamChatMessage(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 副本排队
        /// </summary>
        public IEnumerator TeamDungeonLineUp(Coroutine coroutine, TeamDungeonLineUpInMessage msg)
        {
            TeamCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.TeamDungeonLineUp(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 排队开始
        /// </summary>
        public IEnumerator MatchingStart(Coroutine coroutine, MatchingStartInMessage msg)
        {
            TeamCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.MatchingStart(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 取消排队
        /// </summary>
        public IEnumerator MatchingCancel(Coroutine coroutine, MatchingCancelInMessage msg)
        {
            TeamCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.MatchingCancel(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 通知排队成功
        /// </summary>
        public object MatchingSuccess(ulong __characterId__, ulong __clientId__, int queueId)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 7049;
            desc.CharacterId = __characterId__;
            desc.ClientId = __clientId__;
            desc.PacketId = 0;

            var __data__ = new __RPC_Team_MatchingSuccess_ARG_int32_queueId__();
            __data__.QueueId=queueId;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            desc.Type = (int)MessageType.SC;
            desc.ServiceType = (int) ServiceType.Team;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// 通知排队移出
        /// </summary>
        public object NotifyMatchingData(ulong __characterId__, ulong __clientId__, QueueInfo queueInfo)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 7050;
            desc.CharacterId = __characterId__;
            desc.ClientId = __clientId__;
            desc.PacketId = 0;

            var __data__ = new __RPC_Team_NotifyMatchingData_ARG_QueueInfo_queueInfo__();
            __data__.QueueInfo=queueInfo;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            desc.Type = (int)MessageType.SC;
            desc.ServiceType = (int) ServiceType.Team;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// 通知反馈
        /// </summary>
        public IEnumerator MatchingBack(Coroutine coroutine, MatchingBackInMessage msg)
        {
            TeamCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.MatchingBack(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 匹配结果失败通知
        /// </summary>
        public object TeamServerMessage(ulong __characterId__, ulong __clientId__, int resultType, string args)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 7052;
            desc.CharacterId = __characterId__;
            desc.ClientId = __clientId__;
            desc.PacketId = 0;

            var __data__ = new __RPC_Team_TeamServerMessage_ARG_int32_resultType_string_args__();
            __data__.ResultType=resultType;
            __data__.Args=args;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            desc.Type = (int)MessageType.SC;
            desc.ServiceType = (int) ServiceType.Team;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// 请求排队信息
        /// </summary>
        public IEnumerator ApplyQueueData(Coroutine coroutine, ApplyQueueDataInMessage msg)
        {
            TeamCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.ApplyQueueData(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 请求进入多人副本
        /// </summary>
        public IEnumerator TeamEnterFuben(Coroutine coroutine, TeamEnterFubenInMessage msg)
        {
            TeamCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.TeamEnterFuben(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 请求提示
        /// </summary>
        public object SyncTeamEnterFuben(ulong __characterId__, ulong __clientId__, int fubenId)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 7056;
            desc.CharacterId = __characterId__;
            desc.ClientId = __clientId__;
            desc.PacketId = 0;

            var __data__ = new __RPC_Team_SyncTeamEnterFuben_ARG_int32_fubenId__();
            __data__.FubenId=fubenId;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            desc.Type = (int)MessageType.SC;
            desc.ServiceType = (int) ServiceType.Team;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// 同意进入多人副本
        /// </summary>
        public IEnumerator ResultTeamEnterFuben(Coroutine coroutine, ResultTeamEnterFubenInMessage msg)
        {
            TeamCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.ResultTeamEnterFuben(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// GM命令
        /// </summary>
        public IEnumerator GMTeam(Coroutine coroutine, GMTeamInMessage msg)
        {
            TeamCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.GMTeam(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 队员希望邀请
        /// </summary>
        public object MemberWantInvite(ulong __characterId__, ulong __clientId__, int type, string memberName, int memberJob, int memberLevel, string toName, ulong toId)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 7060;
            desc.CharacterId = __characterId__;
            desc.ClientId = __clientId__;
            desc.PacketId = 0;

            var __data__ = new __RPC_Team_MemberWantInvite_ARG_int32_type_string_memberName_int32_memberJob_int32_memberLevel_string_toName_uint64_toId__();
            __data__.Type=type;
            __data__.MemberName=memberName;
            __data__.MemberJob=memberJob;
            __data__.MemberLevel=memberLevel;
            __data__.ToName=toName;
            __data__.ToId=toId;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            desc.Type = (int)MessageType.SC;
            desc.ServiceType = (int) ServiceType.Team;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// 战盟信息通知 			type：0=name1邀请您加入name2的战盟
        /// </summary>
        public object SyncAllianceMessage(ulong __characterId__, ulong __clientId__, int type, string name1, int allianceId, string name2)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 7064;
            desc.CharacterId = __characterId__;
            desc.ClientId = __clientId__;
            desc.PacketId = 0;

            var __data__ = new __RPC_Team_SyncAllianceMessage_ARG_int32_type_string_name1_int32_allianceId_string_name2__();
            __data__.Type=type;
            __data__.Name1=name1;
            __data__.AllianceId=allianceId;
            __data__.Name2=name2;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            desc.Type = (int)MessageType.SC;
            desc.ServiceType = (int) ServiceType.Team;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// 获取战盟信息
        /// </summary>
        public IEnumerator ApplyAllianceData(Coroutine coroutine, ApplyAllianceDataInMessage msg)
        {
            TeamCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.ApplyAllianceData(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 获取战盟信息          type:  0 = 详细信息, 1 = 简单信息
        /// </summary>
        public IEnumerator ApplyAllianceDataByServerId(Coroutine coroutine, ApplyAllianceDataByServerIdInMessage msg)
        {
            TeamCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.ApplyAllianceDataByServerId(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 修改战盟公告
        /// </summary>
        public IEnumerator ChangeAllianceNotice(Coroutine coroutine, ChangeAllianceNoticeInMessage msg)
        {
            TeamCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.ChangeAllianceNotice(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 获取服务器战盟信息
        /// </summary>
        public IEnumerator GetServerAlliance(Coroutine coroutine, GetServerAllianceInMessage msg)
        {
            TeamCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.GetServerAlliance(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 修改角色权限
        /// </summary>
        public IEnumerator ChangeJurisdiction(Coroutine coroutine, ChangeJurisdictionInMessage msg)
        {
            TeamCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.ChangeJurisdiction(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 修改战盟设置为是否自动同意申请
        /// </summary>
        public IEnumerator ChangeAllianceAutoJoin(Coroutine coroutine, ChangeAllianceAutoJoinInMessage msg)
        {
            TeamCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.ChangeAllianceAutoJoin(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 批量同意的战盟申请
        /// </summary>
        public IEnumerator AllianceAgreeApplyList(Coroutine coroutine, AllianceAgreeApplyListInMessage msg)
        {
            TeamCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.AllianceAgreeApplyList(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 通知玩家的排队状态
        /// </summary>
        public object SendMatchingMessage(ulong __characterId__, ulong __clientId__, int NowCount)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 7075;
            desc.CharacterId = __characterId__;
            desc.ClientId = __clientId__;
            desc.PacketId = 0;

            var __data__ = new __RPC_Team_SendMatchingMessage_ARG_int32_NowCount__();
            __data__.NowCount=NowCount;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            desc.Type = (int)MessageType.SC;
            desc.ServiceType = (int) ServiceType.Team;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// 升级Buff
        /// CS int32  				UpgradeAllianceBuff(int32 allianceId,int32 buffId)=7077;
        /// 战盟信息通知 		type：0=name1邀请您加入name2的战盟 1=同意申请 2拒绝申请
        /// </summary>
        public object TeamSyncAllianceMessage(ulong __characterId__, ulong __clientId__, int type, string name1, int allianceId, string name2)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 7078;
            desc.CharacterId = __characterId__;
            desc.ClientId = __clientId__;
            desc.PacketId = 0;

            var __data__ = new __RPC_Team_TeamSyncAllianceMessage_ARG_int32_type_string_name1_int32_allianceId_string_name2__();
            __data__.Type=type;
            __data__.Name1=name1;
            __data__.AllianceId=allianceId;
            __data__.Name2=name2;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            desc.Type = (int)MessageType.SC;
            desc.ServiceType = (int) ServiceType.Team;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// 战盟信息改变  type = 0 说明战盟升级：param1等级 param2总资金
        /// </summary>
        public object ChangeAllianceData(ulong __characterId__, ulong __clientId__, int type, int param1, int param2)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 7080;
            desc.CharacterId = __characterId__;
            desc.ClientId = __clientId__;
            desc.PacketId = 0;

            var __data__ = new __RPC_Team_ChangeAllianceData_ARG_int32_type_int32_param1_int32_param2__();
            __data__.Type=type;
            __data__.Param1=param1;
            __data__.Param2=param2;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            desc.Type = (int)MessageType.SC;
            desc.ServiceType = (int) ServiceType.Team;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// 请求战盟信息任务数据
        /// </summary>
        public IEnumerator ApplyAllianceMissionData(Coroutine coroutine, ApplyAllianceMissionDataInMessage msg)
        {
            TeamCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.ApplyAllianceMissionData(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 升级战盟等级
        /// </summary>
        public IEnumerator UpgradeAllianceLevel(Coroutine coroutine, UpgradeAllianceLevelInMessage msg)
        {
            TeamCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.UpgradeAllianceLevel(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 获取战盟信息申请列表
        /// </summary>
        public IEnumerator ApplyAllianceEnjoyList(Coroutine coroutine, ApplyAllianceEnjoyListInMessage msg)
        {
            TeamCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.ApplyAllianceEnjoyList(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 获取战盟捐献记录
        /// </summary>
        public IEnumerator ApplyAllianceDonationList(Coroutine coroutine, ApplyAllianceDonationListInMessage msg)
        {
            TeamCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.ApplyAllianceDonationList(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 缓存许愿池的团购信息
        /// </summary>
        public object SendGroupMessage(ulong __characterId__, ulong __clientId__, StringArray contents)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 7100;
            desc.CharacterId = __characterId__;
            desc.ClientId = __clientId__;
            desc.PacketId = 0;

            var __data__ = new __RPC_Team_SendGroupMessage_ARG_StringArray_contents__();
            __data__.Contents=contents;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            desc.Type = (int)MessageType.SC;
            desc.ServiceType = (int) ServiceType.Team;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// 通知组队进入信息
        /// </summary>
        public object NotifyQueueMessage(ulong __characterId__, ulong __clientId__, TeamCharacterMessage tcm)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 7102;
            desc.CharacterId = __characterId__;
            desc.ClientId = __clientId__;
            desc.PacketId = 0;

            var __data__ = new __RPC_Team_NotifyQueueMessage_ARG_TeamCharacterMessage_tcm__();
            __data__.Tcm=tcm;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            desc.Type = (int)MessageType.SC;
            desc.ServiceType = (int) ServiceType.Team;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// 通知某人进入结果
        /// </summary>
        public object NotifyQueueResult(ulong __characterId__, ulong __clientId__, ulong characterId, int result)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 7103;
            desc.CharacterId = __characterId__;
            desc.ClientId = __clientId__;
            desc.PacketId = 0;

            var __data__ = new __RPC_Team_NotifyQueueResult_ARG_uint64_characterId_int32_result__();
            __data__.CharacterId=characterId;
            __data__.Result=result;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            desc.Type = (int)MessageType.SC;
            desc.ServiceType = (int) ServiceType.Team;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// start of攻城战相关
        /// 请求城主信息
        /// </summary>
        public IEnumerator ApplyAllianceWarOccupantData(Coroutine coroutine, ApplyAllianceWarOccupantDataInMessage msg)
        {
            TeamCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.ApplyAllianceWarOccupantData(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 服务器主动推送城主信息
        /// </summary>
        public object NotifyAllianceWarOccupantData(uint __serverId__, AllianceWarOccupantData data)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 7105;
            desc.PacketId = __serverId__;

            var __data__ = new __RPC_Team_NotifyAllianceWarOccupantData_ARG_AllianceWarOccupantData_data__();
            __data__.Data=data;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            desc.Type = (int)MessageType.SCServer;
            desc.ServiceType = (int) ServiceType.Team;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// 请求进攻方信息
        /// </summary>
        public IEnumerator ApplyAllianceWarChallengerData(Coroutine coroutine, ApplyAllianceWarChallengerDataInMessage msg)
        {
            TeamCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.ApplyAllianceWarChallengerData(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 服务器主动推送进攻方信息
        /// </summary>
        public object NotifyAllianceWarChallengerData(uint __serverId__, AllianceWarChallengerData data)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 7107;
            desc.PacketId = __serverId__;

            var __data__ = new __RPC_Team_NotifyAllianceWarChallengerData_ARG_AllianceWarChallengerData_data__();
            __data__.Data=data;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            desc.Type = (int)MessageType.SCServer;
            desc.ServiceType = (int) ServiceType.Team;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// 请求攻城战数据
        /// </summary>
        public IEnumerator ApplyAllianceWarData(Coroutine coroutine, ApplyAllianceWarDataInMessage msg)
        {
            TeamCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.ApplyAllianceWarData(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 攻城战竞标
        /// </summary>
        public IEnumerator BidAllianceWar(Coroutine coroutine, BidAllianceWarInMessage msg)
        {
            TeamCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.BidAllianceWar(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 请求进入攻城战战场
        /// </summary>
        public IEnumerator EnterAllianceWar(Coroutine coroutine, EnterAllianceWarInMessage msg)
        {
            TeamCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.EnterAllianceWar(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 聊天广播
        /// </summary>
        public object SyncAllianceChatMessage(ulong __characterId__, ulong __clientId__, int chatType, ulong characterId, string characterName, ChatMessageContent content)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 7113;
            desc.CharacterId = __characterId__;
            desc.ClientId = __clientId__;
            desc.PacketId = 0;

            var __data__ = new __RPC_Team_SyncAllianceChatMessage_ARG_int32_chatType_uint64_characterId_string_characterName_ChatMessageContent_content__();
            __data__.ChatType=chatType;
            __data__.CharacterId=characterId;
            __data__.CharacterName=characterName;
            __data__.Content=content;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            desc.Type = (int)MessageType.SC;
            desc.ServiceType = (int) ServiceType.Team;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// 拍卖行：查询道具
        /// </summary>
        public IEnumerator CSSelectItemAuction(Coroutine coroutine, CSSelectItemAuctionInMessage msg)
        {
            TeamCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.CSSelectItemAuction(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        ///  报名盟战
        /// </summary>
        public IEnumerator CSEnrollUnionBattle(Coroutine coroutine, CSEnrollUnionBattleInMessage msg)
        {
            TeamCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.CSEnrollUnionBattle(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        ///  进入盟战
        /// </summary>
        public IEnumerator CSEnterUnionBattle(Coroutine coroutine, CSEnterUnionBattleInMessage msg)
        {
            TeamCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.CSEnterUnionBattle(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        ///  请求盟战信息
        /// </summary>
        public IEnumerator CSGetUnionBattleInfo(Coroutine coroutine, CSGetUnionBattleInfoInMessage msg)
        {
            TeamCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.CSGetUnionBattleInfo(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        ///  盟战比赛信息
        /// </summary>
        public IEnumerator CSGetUnionBattleMathInfo(Coroutine coroutine, CSGetUnionBattleMathInfoInMessage msg)
        {
            TeamCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.CSGetUnionBattleMathInfo(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// end of攻城战相关
        /// 队伍：自动匹配  开启自动匹配
        /// </summary>
        public IEnumerator AutoMatchBegin(Coroutine coroutine, AutoMatchBeginInMessage msg)
        {
            TeamCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.AutoMatchBegin(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 队伍：自动匹配  自动匹配结束，通知client
        /// </summary>
        public object AutoMatchEnd(ulong __characterId__, ulong __clientId__, int MathchState)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 7505;
            desc.CharacterId = __characterId__;
            desc.ClientId = __clientId__;
            desc.PacketId = 0;

            var __data__ = new __RPC_Team_AutoMatchEnd_ARG_int32_MathchState__();
            __data__.MathchState=MathchState;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            desc.Type = (int)MessageType.SC;
            desc.ServiceType = (int) ServiceType.Team;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// 队伍：自动匹配  取消自动匹配
        /// </summary>
        public IEnumerator AutoMatchCancel(Coroutine coroutine, AutoMatchCancelInMessage msg)
        {
            TeamCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.AutoMatchCancel(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 队伍：自动匹配  自动匹配 状态发生变化
        /// </summary>
        public object AutoMatchStateChange(ulong __characterId__, ulong __clientId__, int MathchState)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 7507;
            desc.CharacterId = __characterId__;
            desc.ClientId = __clientId__;
            desc.PacketId = 0;

            var __data__ = new __RPC_Team_AutoMatchStateChange_ARG_int32_MathchState__();
            __data__.MathchState=MathchState;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            desc.Type = (int)MessageType.SC;
            desc.ServiceType = (int) ServiceType.Team;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// 队伍：自动匹配  相关结束
        /// 队伍：更改队伍目标
        /// </summary>
        public IEnumerator ChangetTeamTarget(Coroutine coroutine, ChangetTeamTargetInMessage msg)
        {
            TeamCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.ChangetTeamTarget(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// </summary>
        public object NotifyChangetTeamTarget(ulong __characterId__, ulong __clientId__, int type, int targetID, int levelMini, int levelMax, int readTableId)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 7510;
            desc.CharacterId = __characterId__;
            desc.ClientId = __clientId__;
            desc.PacketId = 0;

            var __data__ = new __RPC_Team_NotifyChangetTeamTarget_ARG_int32_type_int32_targetID_int32_levelMini_int32_levelMax_int32_readTableId__();
            __data__.Type=type;
            __data__.TargetID=targetID;
            __data__.LevelMini=levelMini;
            __data__.LevelMax=levelMax;
            __data__.ReadTableId=readTableId;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            desc.Type = (int)MessageType.SC;
            desc.ServiceType = (int) ServiceType.Team;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// 队伍：申请入队
        /// CS void						RequestJoinTeam(int32 teamId)=7511;
        /// 队伍：搜寻队伍界面，拉去队伍相关列表
        /// </summary>
        public IEnumerator SearchTeamList(Coroutine coroutine, SearchTeamListInMessage msg)
        {
            TeamCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.SearchTeamList(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 队伍：搜寻队伍界面，拉取玩家申请列表
        /// </summary>
        public IEnumerator TeamSearchApplyList(Coroutine coroutine, TeamSearchApplyListInMessage msg)
        {
            TeamCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.TeamSearchApplyList(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 队伍：同步队员sceneGuid
        /// </summary>
        public object NotifyTeamScenGuid(ulong __characterId__, ulong __clientId__, ulong characterId, ulong changeCharacterId, ulong sceneGuid)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 7514;
            desc.CharacterId = __characterId__;
            desc.ClientId = __clientId__;
            desc.PacketId = 0;

            var __data__ = new __RPC_Team_NotifyTeamScenGuid_ARG_uint64_characterId_uint64_changeCharacterId_uint64_sceneGuid__();
            __data__.CharacterId=characterId;
            __data__.ChangeCharacterId=changeCharacterId;
            __data__.SceneGuid=sceneGuid;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            desc.Type = (int)MessageType.SC;
            desc.ServiceType = (int) ServiceType.Team;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// 队伍：清空申请列表
        /// </summary>
        public IEnumerator TeamApplyListClear(Coroutine coroutine, TeamApplyListClearInMessage msg)
        {
            TeamCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.TeamApplyListClear(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// </summary>
        public object TeamApplyListSync(ulong __characterId__, ulong __clientId__, ulong characterId, bool state)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 7516;
            desc.CharacterId = __characterId__;
            desc.ClientId = __clientId__;
            desc.PacketId = 0;

            var __data__ = new __RPC_Team_TeamApplyListSync_ARG_uint64_characterId_bool_state__();
            __data__.CharacterId=characterId;
            __data__.State=state;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            desc.Type = (int)MessageType.SC;
            desc.ServiceType = (int) ServiceType.Team;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// 获取战盟仓库记录
        /// </summary>
        public IEnumerator ApplyAllianceDepotLogList(Coroutine coroutine, ApplyAllianceDepotLogListInMessage msg)
        {
            TeamCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.ApplyAllianceDepotLogList(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 整理战盟仓库
        /// </summary>
        public IEnumerator BattleUnionDepotArrange(Coroutine coroutine, BattleUnionDepotArrangeInMessage msg)
        {
            TeamCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.BattleUnionDepotArrange(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 获取战盟仓库数据
        /// </summary>
        public IEnumerator ApplyAllianceDepotData(Coroutine coroutine, ApplyAllianceDepotDataInMessage msg)
        {
            TeamCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.ApplyAllianceDepotData(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 获取战盟仓库数据
        /// </summary>
        public IEnumerator BattleUnionDepotClearUp(Coroutine coroutine, BattleUnionDepotClearUpInMessage msg)
        {
            TeamCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.BattleUnionDepotClearUp(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 从战盟仓库清除某一物品
        /// </summary>
        public IEnumerator BattleUnionRemoveDepotItem(Coroutine coroutine, BattleUnionRemoveDepotItemInMessage msg)
        {
            TeamCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.BattleUnionRemoveDepotItem(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 请求矿脉信息
        /// </summary>
        public IEnumerator ClientApplyHoldLode(Coroutine coroutine, ClientApplyHoldLodeInMessage msg)
        {
            TeamCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.ClientApplyHoldLode(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 请求野外争夺活动信息
        /// </summary>
        public IEnumerator ClientApplyActiveInfo(Coroutine coroutine, ClientApplyActiveInfoInMessage msg)
        {
            TeamCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.ClientApplyActiveInfo(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// </summary>
        public object SCSyncTeamMemberLevelChange(ulong __characterId__, ulong __clientId__, ulong characterId, ulong changeCharacterId, int reborn, int level)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 7908;
            desc.CharacterId = __characterId__;
            desc.ClientId = __clientId__;
            desc.PacketId = 0;

            var __data__ = new __RPC_Team_SCSyncTeamMemberLevelChange_ARG_uint64_characterId_uint64_changeCharacterId_int32_reborn_int32_level__();
            __data__.CharacterId=characterId;
            __data__.ChangeCharacterId=changeCharacterId;
            __data__.Reborn=reborn;
            __data__.Level=level;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            desc.Type = (int)MessageType.SC;
            desc.ServiceType = (int) ServiceType.Team;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// </summary>
        public object NoticeTeamMemberError(ulong __characterId__, ulong __clientId__, string msgInfo)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 7910;
            desc.CharacterId = __characterId__;
            desc.ClientId = __clientId__;
            desc.PacketId = 0;

            var __data__ = new __RPC_Team_NoticeTeamMemberError_ARG_string_msgInfo__();
            __data__.MsgInfo=msgInfo;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            desc.Type = (int)MessageType.SC;
            desc.ServiceType = (int) ServiceType.Team;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// 通知全服，战旗活动结算
        /// </summary>
        public object NotifyFieldFinal(uint __serverId__, MsgWarFlagInfoList msg)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 7911;
            desc.PacketId = __serverId__;

            var __data__ = new __RPC_Team_NotifyFieldFinal_ARG_MsgWarFlagInfoList_msg__();
            __data__.Msg=msg;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            desc.Type = (int)MessageType.SCServer;
            desc.ServiceType = (int) ServiceType.Team;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// </summary>
        public object SCNotifyAllianceActiveTask(ulong __characterId__, ulong __clientId__, DBActiveTask msg)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 7912;
            desc.CharacterId = __characterId__;
            desc.ClientId = __clientId__;
            desc.PacketId = 0;

            var __data__ = new __RPC_Team_SCNotifyAllianceActiveTask_ARG_DBActiveTask_msg__();
            __data__.Msg=msg;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            desc.Type = (int)MessageType.SC;
            desc.ServiceType = (int) ServiceType.Team;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// 清除战盟申请列表
        /// </summary>
        public IEnumerator ClearAllianceApplyList(Coroutine coroutine, ClearAllianceApplyListInMessage msg)
        {
            TeamCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.ClearAllianceApplyList(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// </summary>
        public object SCNotifyPlayerExitAlliance(ulong __characterId__, ulong __clientId__, ulong exitplayerid, string name, bool bChange, ulong leaderId, string leaderName)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 7914;
            desc.CharacterId = __characterId__;
            desc.ClientId = __clientId__;
            desc.PacketId = 0;

            var __data__ = new __RPC_Team_SCNotifyPlayerExitAlliance_ARG_uint64_exitplayerid_string_name_bool_bChange_uint64_leaderId_string_leaderName__();
            __data__.Exitplayerid=exitplayerid;
            __data__.Name=name;
            __data__.BChange=bChange;
            __data__.LeaderId=leaderId;
            __data__.LeaderName=leaderName;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            desc.Type = (int)MessageType.SC;
            desc.ServiceType = (int) ServiceType.Team;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// </summary>
        public object NodifyTeamMemberPlayerNameChange(ulong __characterId__, ulong __clientId__, ulong characterId, ulong changeCharacterId, string changeName)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 7916;
            desc.CharacterId = __characterId__;
            desc.ClientId = __clientId__;
            desc.PacketId = 0;

            var __data__ = new __RPC_Team_NodifyTeamMemberPlayerNameChange_ARG_uint64_characterId_uint64_changeCharacterId_string_changeName__();
            __data__.CharacterId=characterId;
            __data__.ChangeCharacterId=changeCharacterId;
            __data__.ChangeName=changeName;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            desc.Type = (int)MessageType.SC;
            desc.ServiceType = (int) ServiceType.Team;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }

        protected override void DispatchMessage(MessageRecievedEvent evt)
        {
            switch (evt.Message.FuncId)
            {
                case 7000:
                {
                    var msg = new PrepareDataForEnterGameInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.PrepareDataForEnterGame(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 7001:
                {
                    var msg = new PrepareDataForCreateCharacterInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.PrepareDataForCreateCharacter(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 7002:
                {
                    var msg = new PrepareDataForCommonUseInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.PrepareDataForCommonUse(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 7003:
                {
                    var msg = new PrepareDataForLogoutInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.PrepareDataForLogout(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 7031:
                {
                    var msg = new CheckConnectedInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.CheckConnected(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 7032:
                {
                    var msg = new CheckLostInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.CheckLost(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 7033:
                {
                    var msg = new QueryStatusInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.QueryStatus(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 7041:
                {
                    var msg = new TeamMessageInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => TeamMessage(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 7043:
                {
                    var msg = new ApplyTeamInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => ApplyTeam(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 7044:
                {
                    var msg = new TeamChatMessageInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => TeamChatMessage(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 7045:
                {
                    var msg = new TeamDungeonLineUpInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => TeamDungeonLineUp(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 7046:
                {
                    var msg = new TeamDungeonLeaderChangeSceneInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.TeamDungeonLeaderChangeScene(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 7047:
                {
                    var msg = new MatchingStartInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => MatchingStart(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 7048:
                {
                    var msg = new MatchingCancelInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => MatchingCancel(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 7051:
                {
                    var msg = new MatchingBackInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => MatchingBack(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 7053:
                {
                    var msg = new LeaveDungeonInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.LeaveDungeon(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 7054:
                {
                    var msg = new ApplyQueueDataInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => ApplyQueueData(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 7055:
                {
                    var msg = new TeamEnterFubenInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => TeamEnterFuben(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 7057:
                {
                    var msg = new ResultTeamEnterFubenInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => ResultTeamEnterFuben(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 7058:
                {
                    var msg = new ServerGMCommandInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.ServerGMCommand(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 7059:
                {
                    var msg = new GMTeamInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => GMTeam(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 7061:
                {
                    var msg = new Logic2TeamCreateAllianceInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.Logic2TeamCreateAlliance(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 7062:
                {
                    var msg = new Logic2TeamAllianceOperationInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.Logic2TeamAllianceOperation(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 7063:
                {
                    var msg = new Logic2TeamAllianceOperationCharacterInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.Logic2TeamAllianceOperationCharacter(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 7065:
                {
                    var msg = new ApplyAllianceDataInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => ApplyAllianceData(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 7066:
                {
                    var msg = new ApplyAllianceDataByServerIdInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => ApplyAllianceDataByServerId(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 7067:
                {
                    var msg = new ChangeAllianceNoticeInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => ChangeAllianceNotice(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 7068:
                {
                    var msg = new GetServerAllianceInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => GetServerAlliance(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 7069:
                {
                    var msg = new ChangeJurisdictionInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => ChangeJurisdiction(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 7070:
                {
                    var msg = new ChangeAllianceAutoJoinInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => ChangeAllianceAutoJoin(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 7071:
                {
                    var msg = new AllianceAgreeApplyListInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => AllianceAgreeApplyList(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 7072:
                {
                    var msg = new GetAllianceCharacterDataInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.GetAllianceCharacterData(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 7073:
                {
                    var msg = new SSGetTeamDataInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.SSGetTeamData(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 7074:
                {
                    var msg = new SSGetAllianceDataInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.SSGetAllianceData(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 7076:
                {
                    var msg = new Logic2TeamDonationAllianceItemInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.Logic2TeamDonationAllianceItem(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 7300:
                {
                    var msg = new SSGetAllianceNameInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.SSGetAllianceName(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 7301:
                {
                    var msg = new SSGetAllianceInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.SSGetAlliance(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 7302:
                {
                    var msg = new GMChangeJurisdictionInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.GMChangeJurisdiction(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 7303:
                {
                    var msg = new GMChangeAllianceNoticeInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.GMChangeAllianceNotice(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 7304:
                {
                    var msg = new GMDelAllicanceInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.GMDelAllicance(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 7081:
                {
                    var msg = new ApplyAllianceMissionDataInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => ApplyAllianceMissionData(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 7082:
                {
                    var msg = new UpgradeAllianceLevelInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => UpgradeAllianceLevel(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 7083:
                {
                    var msg = new BroadcastExchangeItemInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.BroadcastExchangeItem(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 7084:
                {
                    var msg = new GetExchangeItemInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.GetExchangeItem(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 7085:
                {
                    var msg = new CancelExchangeItemInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.CancelExchangeItem(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 7086:
                {
                    var msg = new SSApplyGroupShopItemsInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.SSApplyGroupShopItems(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 7087:
                {
                    var msg = new SSBuyGroupShopItemInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.SSBuyGroupShopItem(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 7088:
                {
                    var msg = new SSGetBuyedGroupShopItemsInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.SSGetBuyedGroupShopItems(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 7089:
                {
                    var msg = new SSGetGroupShopHistoryInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.SSGetGroupShopHistory(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 7090:
                {
                    var msg = new ApplyAllianceEnjoyListInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => ApplyAllianceEnjoyList(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 7091:
                {
                    var msg = new ApplyAllianceDonationListInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => ApplyAllianceDonationList(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 7092:
                {
                    var msg = new SSCharacterEnterBattleInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.SSCharacterEnterBattle(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 7093:
                {
                    var msg = new SSCharacterLeaveBattleInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.SSCharacterLeaveBattle(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 7094:
                {
                    var msg = new SSBattleEndInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.SSBattleEnd(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 7095:
                {
                    var msg = new SSGetTeamCountInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.SSGetTeamCount(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 7096:
                {
                    var msg = new SSGetTeamSceneDataInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.SSGetTeamSceneData(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 7097:
                {
                    var msg = new SSGetTeamCharactersInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.SSGetTeamCharacters(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 7098:
                {
                    var msg = new SSNotifyPlayerChangeSceneInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.SSNotifyPlayerChangeScene(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 7099:
                {
                    var msg = new ReadyToEnterInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.ReadyToEnter(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 7101:
                {
                    var msg = new UpdateServerInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.UpdateServer(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 7104:
                {
                    var msg = new ApplyAllianceWarOccupantDataInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => ApplyAllianceWarOccupantData(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 7106:
                {
                    var msg = new ApplyAllianceWarChallengerDataInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => ApplyAllianceWarChallengerData(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 7108:
                {
                    var msg = new ApplyAllianceWarDataInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => ApplyAllianceWarData(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 7109:
                {
                    var msg = new BidAllianceWarInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => BidAllianceWar(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 7110:
                {
                    var msg = new EnterAllianceWarInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => EnterAllianceWar(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 7111:
                {
                    var msg = new NotifyAllianceWarResultInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.NotifyAllianceWarResult(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 7112:
                {
                    var msg = new QueryAllianceWarInfoInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.QueryAllianceWarInfo(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 7114:
                {
                    var msg = new SSOnItemAuctionInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.SSOnItemAuction(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 7115:
                {
                    var msg = new SSDownItemAuctionInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.SSDownItemAuction(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 7116:
                {
                    var msg = new CSSelectItemAuctionInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => CSSelectItemAuction(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 7117:
                {
                    var msg = new SSSelectItemAuctionInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.SSSelectItemAuction(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 7130:
                {
                    var msg = new CSEnrollUnionBattleInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => CSEnrollUnionBattle(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 7131:
                {
                    var msg = new CSEnterUnionBattleInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => CSEnterUnionBattle(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 7132:
                {
                    var msg = new CSGetUnionBattleInfoInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => CSGetUnionBattleInfo(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 7133:
                {
                    var msg = new CSGetUnionBattleMathInfoInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => CSGetUnionBattleMathInfo(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 7501:
                {
                    var msg = new SSNotifyCharacterOnConnetInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.SSNotifyCharacterOnConnet(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 7503:
                {
                    var msg = new BSNotifyCharacterOnLostInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.BSNotifyCharacterOnLost(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 7504:
                {
                    var msg = new AutoMatchBeginInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => AutoMatchBegin(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 7506:
                {
                    var msg = new AutoMatchCancelInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => AutoMatchCancel(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 7508:
                {
                    var msg = new SSGetCharacterTeamFlagInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.SSGetCharacterTeamFlag(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 7509:
                {
                    var msg = new ChangetTeamTargetInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => ChangetTeamTarget(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 7512:
                {
                    var msg = new SearchTeamListInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => SearchTeamList(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 7513:
                {
                    var msg = new TeamSearchApplyListInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => TeamSearchApplyList(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 7515:
                {
                    var msg = new TeamApplyListClearInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => TeamApplyListClear(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 7520:
                {
                    var msg = new SSAllianceDepotDonateInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.SSAllianceDepotDonate(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 7521:
                {
                    var msg = new ApplyAllianceDepotLogListInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => ApplyAllianceDepotLogList(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 7522:
                {
                    var msg = new BattleUnionDepotArrangeInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => BattleUnionDepotArrange(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 7523:
                {
                    var msg = new SSAllianceDepotTakeOutInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.SSAllianceDepotTakeOut(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 7524:
                {
                    var msg = new ApplyAllianceDepotDataInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => ApplyAllianceDepotData(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 7525:
                {
                    var msg = new BattleUnionDepotClearUpInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => BattleUnionDepotClearUp(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 7526:
                {
                    var msg = new BattleUnionRemoveDepotItemInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => BattleUnionRemoveDepotItem(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 7900:
                {
                    var msg = new GMCommandInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.GMCommand(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 7901:
                {
                    var msg = new PlayerHoldLodeInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.PlayerHoldLode(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 7902:
                {
                    var msg = new PlayerCollectLodeInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.PlayerCollectLode(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 7903:
                {
                    var msg = new ApplyHoldLodeInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.ApplyHoldLode(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 7904:
                {
                    var msg = new ClientApplyHoldLodeInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => ClientApplyHoldLode(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 7905:
                {
                    var msg = new ClientApplyActiveInfoInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => ClientApplyActiveInfo(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 7906:
                {
                    var msg = new SSApplyFieldActivityRewardInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.SSApplyFieldActivityReward(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 7907:
                {
                    var msg = new SSSyncTeamMemberLevelChangeInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.SSSyncTeamMemberLevelChange(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 7909:
                {
                    var msg = new SSAddAllianceContributionInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.SSAddAllianceContribution(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 7913:
                {
                    var msg = new ClearAllianceApplyListInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => ClearAllianceApplyList(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 7915:
                {
                    var msg = new NodifyModifyPlayerNameInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.NodifyModifyPlayerName(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 7917:
                {
                    var msg = new NodifyModifyAllianceMemberNameInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.NodifyModifyAllianceMemberName(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 7918:
                {
                    var msg = new SSLeaveTeamInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.SSLeaveTeam(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                default:
                    break;
            }
        }
    }
    public class PrepareDataForEnterGameInMessage : InMessage
    {
        public PrepareDataForEnterGameInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Team_PrepareDataForEnterGame_ARG_int32_serverId__;

            mResponse = new __RPC_Team_PrepareDataForEnterGame_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Team_PrepareDataForEnterGame_ARG_int32_serverId__ Request { get; private set; }

        private __RPC_Team_PrepareDataForEnterGame_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public PrepareDataForEnterGameInMessage Clone()
        { 
            return new PrepareDataForEnterGameInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class PrepareDataForCreateCharacterInMessage : InMessage
    {
        public PrepareDataForCreateCharacterInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Team_PrepareDataForCreateCharacter_ARG_int32_type__;

            mResponse = new __RPC_Team_PrepareDataForCreateCharacter_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Team_PrepareDataForCreateCharacter_ARG_int32_type__ Request { get; private set; }

        private __RPC_Team_PrepareDataForCreateCharacter_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public PrepareDataForCreateCharacterInMessage Clone()
        { 
            return new PrepareDataForCreateCharacterInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class PrepareDataForCommonUseInMessage : InMessage
    {
        public PrepareDataForCommonUseInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Team_PrepareDataForCommonUse_ARG_uint32_placeholder__;

            mResponse = new __RPC_Team_PrepareDataForCommonUse_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Team_PrepareDataForCommonUse_ARG_uint32_placeholder__ Request { get; private set; }

        private __RPC_Team_PrepareDataForCommonUse_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public PrepareDataForCommonUseInMessage Clone()
        { 
            return new PrepareDataForCommonUseInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class PrepareDataForLogoutInMessage : InMessage
    {
        public PrepareDataForLogoutInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Team_PrepareDataForLogout_ARG_uint32_placeholder__;

            mResponse = new __RPC_Team_PrepareDataForLogout_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Team_PrepareDataForLogout_ARG_uint32_placeholder__ Request { get; private set; }

        private __RPC_Team_PrepareDataForLogout_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public PrepareDataForLogoutInMessage Clone()
        { 
            return new PrepareDataForLogoutInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SBGetAllOnlineCharacterInServerInMessage : InMessage
    {
        public SBGetAllOnlineCharacterInServerInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Team_SBGetAllOnlineCharacterInServer_ARG_int32_serverId__;

            mResponse = new __RPC_Team_SBGetAllOnlineCharacterInServer_RET_Uint64Array__();
            mResponse.ReturnValue = new Uint64Array();
        }


        public __RPC_Team_SBGetAllOnlineCharacterInServer_ARG_int32_serverId__ Request { get; private set; }

        private __RPC_Team_SBGetAllOnlineCharacterInServer_RET_Uint64Array__ mResponse;
        public Uint64Array Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public SBGetAllOnlineCharacterInServerInMessage Clone()
        { 
            return new SBGetAllOnlineCharacterInServerInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class CheckConnectedInMessage : InMessage
    {
        public CheckConnectedInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Team_CheckConnected_ARG_uint64_characterId__;

            mResponse = new __RPC_Team_CheckConnected_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Team_CheckConnected_ARG_uint64_characterId__ Request { get; private set; }

        private __RPC_Team_CheckConnected_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public CheckConnectedInMessage Clone()
        { 
            return new CheckConnectedInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class CheckLostInMessage : InMessage
    {
        public CheckLostInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Team_CheckLost_ARG_uint64_characterId__;

            mResponse = new __RPC_Team_CheckLost_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Team_CheckLost_ARG_uint64_characterId__ Request { get; private set; }

        private __RPC_Team_CheckLost_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public CheckLostInMessage Clone()
        { 
            return new CheckLostInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class QueryStatusInMessage : InMessage
    {
        public QueryStatusInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Team_QueryStatus_ARG_uint32_placeholder__;

            mResponse = new __RPC_Team_QueryStatus_RET_TeamServerStatus__();
            mResponse.ReturnValue = new TeamServerStatus();
        }


        public __RPC_Team_QueryStatus_ARG_uint32_placeholder__ Request { get; private set; }

        private __RPC_Team_QueryStatus_RET_TeamServerStatus__ mResponse;
        public TeamServerStatus Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public QueryStatusInMessage Clone()
        { 
            return new QueryStatusInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class QueryBrokerStatusInMessage : InMessage
    {
        public QueryBrokerStatusInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Team_QueryBrokerStatus_ARG_uint32_placeholder__;

            mResponse = new __RPC_Team_QueryBrokerStatus_RET_CommonBrokerStatus__();
            mResponse.ReturnValue = new CommonBrokerStatus();
        }


        public __RPC_Team_QueryBrokerStatus_ARG_uint32_placeholder__ Request { get; private set; }

        private __RPC_Team_QueryBrokerStatus_RET_CommonBrokerStatus__ mResponse;
        public CommonBrokerStatus Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public QueryBrokerStatusInMessage Clone()
        { 
            return new QueryBrokerStatusInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class TeamMessageInMessage : InMessage
    {
        public TeamMessageInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Team_TeamMessage_ARG_uint64_characterId_int32_type_uint64_teamId_uint64_otherId__;

            mResponse = new __RPC_Team_TeamMessage_RET_uint64__();
            mResponse.ReturnValue = new ulong();
        }


        public __RPC_Team_TeamMessage_ARG_uint64_characterId_int32_type_uint64_teamId_uint64_otherId__ Request { get; private set; }

        private __RPC_Team_TeamMessage_RET_uint64__ mResponse;
        public ulong Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public TeamMessageInMessage Clone()
        { 
            return new TeamMessageInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class ApplyTeamInMessage : InMessage
    {
        public ApplyTeamInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Team_ApplyTeam_ARG_uint64_characterId__;

            mResponse = new __RPC_Team_ApplyTeam_RET_TeamMsg__();
            mResponse.ReturnValue = new TeamMsg();
        }


        public __RPC_Team_ApplyTeam_ARG_uint64_characterId__ Request { get; private set; }

        private __RPC_Team_ApplyTeam_RET_TeamMsg__ mResponse;
        public TeamMsg Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public ApplyTeamInMessage Clone()
        { 
            return new ApplyTeamInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class TeamChatMessageInMessage : InMessage
    {
        public TeamChatMessageInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Team_TeamChatMessage_ARG_int32_chatType_ChatMessageContent_Content_uint64_characterId__;
            if (Request.Content == null) throw new ArgumentNullException("Content is null.");

            mResponse = new __RPC_Team_TeamChatMessage_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Team_TeamChatMessage_ARG_int32_chatType_ChatMessageContent_Content_uint64_characterId__ Request { get; private set; }

        private __RPC_Team_TeamChatMessage_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public TeamChatMessageInMessage Clone()
        { 
            return new TeamChatMessageInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class TeamDungeonLineUpInMessage : InMessage
    {
        public TeamDungeonLineUpInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Team_TeamDungeonLineUp_ARG_int32_dungeonId__;

            mResponse = new __RPC_Team_TeamDungeonLineUp_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Team_TeamDungeonLineUp_ARG_int32_dungeonId__ Request { get; private set; }

        private __RPC_Team_TeamDungeonLineUp_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public TeamDungeonLineUpInMessage Clone()
        { 
            return new TeamDungeonLineUpInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class TeamDungeonLeaderChangeSceneInMessage : InMessage
    {
        public TeamDungeonLeaderChangeSceneInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Team_TeamDungeonLeaderChangeScene_ARG_uint64_sceneGuid__;

            mResponse = new __RPC_Team_TeamDungeonLeaderChangeScene_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Team_TeamDungeonLeaderChangeScene_ARG_uint64_sceneGuid__ Request { get; private set; }

        private __RPC_Team_TeamDungeonLeaderChangeScene_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public TeamDungeonLeaderChangeSceneInMessage Clone()
        { 
            return new TeamDungeonLeaderChangeSceneInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class MatchingStartInMessage : InMessage
    {
        public MatchingStartInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Team_MatchingStart_ARG_int32_queueId__;

            mResponse = new __RPC_Team_MatchingStart_RET_MatchingResult__();
            mResponse.ReturnValue = new MatchingResult();
        }


        public __RPC_Team_MatchingStart_ARG_int32_queueId__ Request { get; private set; }

        private __RPC_Team_MatchingStart_RET_MatchingResult__ mResponse;
        public MatchingResult Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public MatchingStartInMessage Clone()
        { 
            return new MatchingStartInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class MatchingCancelInMessage : InMessage
    {
        public MatchingCancelInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Team_MatchingCancel_ARG_int32_queueId__;

            mResponse = new __RPC_Team_MatchingCancel_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Team_MatchingCancel_ARG_int32_queueId__ Request { get; private set; }

        private __RPC_Team_MatchingCancel_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public MatchingCancelInMessage Clone()
        { 
            return new MatchingCancelInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class MatchingBackInMessage : InMessage
    {
        public MatchingBackInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Team_MatchingBack_ARG_int32_result__;

        }


        public __RPC_Team_MatchingBack_ARG_int32_result__ Request { get; private set; }

        public MatchingBackInMessage Clone()
        { 
            return new MatchingBackInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class LeaveDungeonInMessage : InMessage
    {
        public LeaveDungeonInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Team_LeaveDungeon_ARG_uint64_characterId__;

            mResponse = new __RPC_Team_LeaveDungeon_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Team_LeaveDungeon_ARG_uint64_characterId__ Request { get; private set; }

        private __RPC_Team_LeaveDungeon_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public LeaveDungeonInMessage Clone()
        { 
            return new LeaveDungeonInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class ApplyQueueDataInMessage : InMessage
    {
        public ApplyQueueDataInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Team_ApplyQueueData_ARG_int32_placeholder__;

            mResponse = new __RPC_Team_ApplyQueueData_RET_QueueInfo__();
            mResponse.ReturnValue = new QueueInfo();
        }


        public __RPC_Team_ApplyQueueData_ARG_int32_placeholder__ Request { get; private set; }

        private __RPC_Team_ApplyQueueData_RET_QueueInfo__ mResponse;
        public QueueInfo Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public ApplyQueueDataInMessage Clone()
        { 
            return new ApplyQueueDataInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class TeamEnterFubenInMessage : InMessage
    {
        public TeamEnterFubenInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Team_TeamEnterFuben_ARG_int32_fubenId_int32_serverId__;

            mResponse = new __RPC_Team_TeamEnterFuben_RET_Uint64Array__();
            mResponse.ReturnValue = new Uint64Array();
        }


        public __RPC_Team_TeamEnterFuben_ARG_int32_fubenId_int32_serverId__ Request { get; private set; }

        private __RPC_Team_TeamEnterFuben_RET_Uint64Array__ mResponse;
        public Uint64Array Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public TeamEnterFubenInMessage Clone()
        { 
            return new TeamEnterFubenInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class ResultTeamEnterFubenInMessage : InMessage
    {
        public ResultTeamEnterFubenInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Team_ResultTeamEnterFuben_ARG_int32_fubenID_int32_isOk__;

        }


        public __RPC_Team_ResultTeamEnterFuben_ARG_int32_fubenID_int32_isOk__ Request { get; private set; }

        public ResultTeamEnterFubenInMessage Clone()
        { 
            return new ResultTeamEnterFubenInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class ServerGMCommandInMessage : InMessage
    {
        public ServerGMCommandInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Team_ServerGMCommand_ARG_string_cmd_string_param__;

        }


        public __RPC_Team_ServerGMCommand_ARG_string_cmd_string_param__ Request { get; private set; }

        public ServerGMCommandInMessage Clone()
        { 
            return new ServerGMCommandInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class GMTeamInMessage : InMessage
    {
        public GMTeamInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Team_GMTeam_ARG_string_commond__;

            mResponse = new __RPC_Team_GMTeam_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Team_GMTeam_ARG_string_commond__ Request { get; private set; }

        private __RPC_Team_GMTeam_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public GMTeamInMessage Clone()
        { 
            return new GMTeamInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class Logic2TeamCreateAllianceInMessage : InMessage
    {
        public Logic2TeamCreateAllianceInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Team_Logic2TeamCreateAlliance_ARG_int32_serverId_uint64_guid_string_name_int32_state__;

            mResponse = new __RPC_Team_Logic2TeamCreateAlliance_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Team_Logic2TeamCreateAlliance_ARG_int32_serverId_uint64_guid_string_name_int32_state__ Request { get; private set; }

        private __RPC_Team_Logic2TeamCreateAlliance_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public Logic2TeamCreateAllianceInMessage Clone()
        { 
            return new Logic2TeamCreateAllianceInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class Logic2TeamAllianceOperationInMessage : InMessage
    {
        public Logic2TeamAllianceOperationInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Team_Logic2TeamAllianceOperation_ARG_int32_type_int32_value__;

            mResponse = new __RPC_Team_Logic2TeamAllianceOperation_RET_string__();
            mResponse.ReturnValue = string.Empty;
        }


        public __RPC_Team_Logic2TeamAllianceOperation_ARG_int32_type_int32_value__ Request { get; private set; }

        private __RPC_Team_Logic2TeamAllianceOperation_RET_string__ mResponse;
        public string Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public Logic2TeamAllianceOperationInMessage Clone()
        { 
            return new Logic2TeamAllianceOperationInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class Logic2TeamAllianceOperationCharacterInMessage : InMessage
    {
        public Logic2TeamAllianceOperationCharacterInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Team_Logic2TeamAllianceOperationCharacter_ARG_int32_type_string_name_int32_allianceId_uint64_guid__;

            mResponse = new __RPC_Team_Logic2TeamAllianceOperationCharacter_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Team_Logic2TeamAllianceOperationCharacter_ARG_int32_type_string_name_int32_allianceId_uint64_guid__ Request { get; private set; }

        private __RPC_Team_Logic2TeamAllianceOperationCharacter_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public Logic2TeamAllianceOperationCharacterInMessage Clone()
        { 
            return new Logic2TeamAllianceOperationCharacterInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class ApplyAllianceDataInMessage : InMessage
    {
        public ApplyAllianceDataInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Team_ApplyAllianceData_ARG_int32_allianceId__;

            mResponse = new __RPC_Team_ApplyAllianceData_RET_AllianceData__();
            mResponse.ReturnValue = new AllianceData();
        }


        public __RPC_Team_ApplyAllianceData_ARG_int32_allianceId__ Request { get; private set; }

        private __RPC_Team_ApplyAllianceData_RET_AllianceData__ mResponse;
        public AllianceData Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public ApplyAllianceDataInMessage Clone()
        { 
            return new ApplyAllianceDataInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class ApplyAllianceDataByServerIdInMessage : InMessage
    {
        public ApplyAllianceDataByServerIdInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Team_ApplyAllianceDataByServerId_ARG_int32_serverId_int32_type__;

            mResponse = new __RPC_Team_ApplyAllianceDataByServerId_RET_AllianceData__();
            mResponse.ReturnValue = new AllianceData();
        }


        public __RPC_Team_ApplyAllianceDataByServerId_ARG_int32_serverId_int32_type__ Request { get; private set; }

        private __RPC_Team_ApplyAllianceDataByServerId_RET_AllianceData__ mResponse;
        public AllianceData Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public ApplyAllianceDataByServerIdInMessage Clone()
        { 
            return new ApplyAllianceDataByServerIdInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class ChangeAllianceNoticeInMessage : InMessage
    {
        public ChangeAllianceNoticeInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Team_ChangeAllianceNotice_ARG_int32_allianceId_string_Content__;

            mResponse = new __RPC_Team_ChangeAllianceNotice_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Team_ChangeAllianceNotice_ARG_int32_allianceId_string_Content__ Request { get; private set; }

        private __RPC_Team_ChangeAllianceNotice_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public ChangeAllianceNoticeInMessage Clone()
        { 
            return new ChangeAllianceNoticeInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class GetServerAllianceInMessage : InMessage
    {
        public GetServerAllianceInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Team_GetServerAlliance_ARG_int32_serverId__;

            mResponse = new __RPC_Team_GetServerAlliance_RET_AllianceSimpleDataList__();
            mResponse.ReturnValue = new AllianceSimpleDataList();
        }


        public __RPC_Team_GetServerAlliance_ARG_int32_serverId__ Request { get; private set; }

        private __RPC_Team_GetServerAlliance_RET_AllianceSimpleDataList__ mResponse;
        public AllianceSimpleDataList Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public GetServerAllianceInMessage Clone()
        { 
            return new GetServerAllianceInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class ChangeJurisdictionInMessage : InMessage
    {
        public ChangeJurisdictionInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Team_ChangeJurisdiction_ARG_int32_allianceId_uint64_guid_int32_type__;

            mResponse = new __RPC_Team_ChangeJurisdiction_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Team_ChangeJurisdiction_ARG_int32_allianceId_uint64_guid_int32_type__ Request { get; private set; }

        private __RPC_Team_ChangeJurisdiction_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public ChangeJurisdictionInMessage Clone()
        { 
            return new ChangeJurisdictionInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class ChangeAllianceAutoJoinInMessage : InMessage
    {
        public ChangeAllianceAutoJoinInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Team_ChangeAllianceAutoJoin_ARG_int32_allianceId_int32_value__;

            mResponse = new __RPC_Team_ChangeAllianceAutoJoin_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Team_ChangeAllianceAutoJoin_ARG_int32_allianceId_int32_value__ Request { get; private set; }

        private __RPC_Team_ChangeAllianceAutoJoin_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public ChangeAllianceAutoJoinInMessage Clone()
        { 
            return new ChangeAllianceAutoJoinInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class AllianceAgreeApplyListInMessage : InMessage
    {
        public AllianceAgreeApplyListInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Team_AllianceAgreeApplyList_ARG_int32_allianceId_int32_type_Uint64Array_guids__;
            if (Request.Guids == null) throw new ArgumentNullException("Guids is null.");

            mResponse = new __RPC_Team_AllianceAgreeApplyList_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Team_AllianceAgreeApplyList_ARG_int32_allianceId_int32_type_Uint64Array_guids__ Request { get; private set; }

        private __RPC_Team_AllianceAgreeApplyList_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public AllianceAgreeApplyListInMessage Clone()
        { 
            return new AllianceAgreeApplyListInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class GetAllianceCharacterDataInMessage : InMessage
    {
        public GetAllianceCharacterDataInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Team_GetAllianceCharacterData_ARG_int32_serverId_uint64_guid_int32_level__;

            mResponse = new __RPC_Team_GetAllianceCharacterData_RET_AllianceCharacterLogicData__();
            mResponse.ReturnValue = new AllianceCharacterLogicData();
        }


        public __RPC_Team_GetAllianceCharacterData_ARG_int32_serverId_uint64_guid_int32_level__ Request { get; private set; }

        private __RPC_Team_GetAllianceCharacterData_RET_AllianceCharacterLogicData__ mResponse;
        public AllianceCharacterLogicData Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public GetAllianceCharacterDataInMessage Clone()
        { 
            return new GetAllianceCharacterDataInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SSGetTeamDataInMessage : InMessage
    {
        public SSGetTeamDataInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Team_SSGetTeamData_ARG_uint64_guid__;

            mResponse = new __RPC_Team_SSGetTeamData_RET_MsgTeamState__();
            mResponse.ReturnValue = new MsgTeamState();
        }


        public __RPC_Team_SSGetTeamData_ARG_uint64_guid__ Request { get; private set; }

        private __RPC_Team_SSGetTeamData_RET_MsgTeamState__ mResponse;
        public MsgTeamState Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public SSGetTeamDataInMessage Clone()
        { 
            return new SSGetTeamDataInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SSGetAllianceDataInMessage : InMessage
    {
        public SSGetAllianceDataInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Team_SSGetAllianceData_ARG_int32_serverId__;

            mResponse = new __RPC_Team_SSGetAllianceData_RET_AllianceDataToScene__();
            mResponse.ReturnValue = new AllianceDataToScene();
        }


        public __RPC_Team_SSGetAllianceData_ARG_int32_serverId__ Request { get; private set; }

        private __RPC_Team_SSGetAllianceData_RET_AllianceDataToScene__ mResponse;
        public AllianceDataToScene Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public SSGetAllianceDataInMessage Clone()
        { 
            return new SSGetAllianceDataInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class Logic2TeamDonationAllianceItemInMessage : InMessage
    {
        public Logic2TeamDonationAllianceItemInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Team_Logic2TeamDonationAllianceItem_ARG_int32_serverId_int32_type_string_name__;

            mResponse = new __RPC_Team_Logic2TeamDonationAllianceItem_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Team_Logic2TeamDonationAllianceItem_ARG_int32_serverId_int32_type_string_name__ Request { get; private set; }

        private __RPC_Team_Logic2TeamDonationAllianceItem_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public Logic2TeamDonationAllianceItemInMessage Clone()
        { 
            return new Logic2TeamDonationAllianceItemInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SSGetAllianceNameInMessage : InMessage
    {
        public SSGetAllianceNameInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Team_SSGetAllianceName_ARG_int32_allianceId__;

            mResponse = new __RPC_Team_SSGetAllianceName_RET_string__();
            mResponse.ReturnValue = string.Empty;
        }


        public __RPC_Team_SSGetAllianceName_ARG_int32_allianceId__ Request { get; private set; }

        private __RPC_Team_SSGetAllianceName_RET_string__ mResponse;
        public string Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public SSGetAllianceNameInMessage Clone()
        { 
            return new SSGetAllianceNameInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SSGetAllianceInMessage : InMessage
    {
        public SSGetAllianceInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Team_SSGetAlliance_ARG_int32_serverId_int32_startIndex_int32_EndIndex_string_name__;

            mResponse = new __RPC_Team_SSGetAlliance_RET_ServerAllianceInfo__();
            mResponse.ReturnValue = new ServerAllianceInfo();
        }


        public __RPC_Team_SSGetAlliance_ARG_int32_serverId_int32_startIndex_int32_EndIndex_string_name__ Request { get; private set; }

        private __RPC_Team_SSGetAlliance_RET_ServerAllianceInfo__ mResponse;
        public ServerAllianceInfo Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public SSGetAllianceInMessage Clone()
        { 
            return new SSGetAllianceInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class GMChangeJurisdictionInMessage : InMessage
    {
        public GMChangeJurisdictionInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Team_GMChangeJurisdiction_ARG_int32_serverId_int32_allianceId_uint64_guid_int32_type__;

            mResponse = new __RPC_Team_GMChangeJurisdiction_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Team_GMChangeJurisdiction_ARG_int32_serverId_int32_allianceId_uint64_guid_int32_type__ Request { get; private set; }

        private __RPC_Team_GMChangeJurisdiction_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public GMChangeJurisdictionInMessage Clone()
        { 
            return new GMChangeJurisdictionInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class GMChangeAllianceNoticeInMessage : InMessage
    {
        public GMChangeAllianceNoticeInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Team_GMChangeAllianceNotice_ARG_int32_serverId_int32_allianceId_string_Content__;

            mResponse = new __RPC_Team_GMChangeAllianceNotice_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Team_GMChangeAllianceNotice_ARG_int32_serverId_int32_allianceId_string_Content__ Request { get; private set; }

        private __RPC_Team_GMChangeAllianceNotice_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public GMChangeAllianceNoticeInMessage Clone()
        { 
            return new GMChangeAllianceNoticeInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class GMDelAllicanceInMessage : InMessage
    {
        public GMDelAllicanceInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Team_GMDelAllicance_ARG_int32_allianceId__;

            mResponse = new __RPC_Team_GMDelAllicance_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Team_GMDelAllicance_ARG_int32_allianceId__ Request { get; private set; }

        private __RPC_Team_GMDelAllicance_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public GMDelAllicanceInMessage Clone()
        { 
            return new GMDelAllicanceInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class ApplyAllianceMissionDataInMessage : InMessage
    {
        public ApplyAllianceMissionDataInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Team_ApplyAllianceMissionData_ARG_int32_allianceId__;

            mResponse = new __RPC_Team_ApplyAllianceMissionData_RET_AllianceMissionData__();
            mResponse.ReturnValue = new AllianceMissionData();
        }


        public __RPC_Team_ApplyAllianceMissionData_ARG_int32_allianceId__ Request { get; private set; }

        private __RPC_Team_ApplyAllianceMissionData_RET_AllianceMissionData__ mResponse;
        public AllianceMissionData Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public ApplyAllianceMissionDataInMessage Clone()
        { 
            return new ApplyAllianceMissionDataInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class UpgradeAllianceLevelInMessage : InMessage
    {
        public UpgradeAllianceLevelInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Team_UpgradeAllianceLevel_ARG_int32_allianceId__;

            mResponse = new __RPC_Team_UpgradeAllianceLevel_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Team_UpgradeAllianceLevel_ARG_int32_allianceId__ Request { get; private set; }

        private __RPC_Team_UpgradeAllianceLevel_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public UpgradeAllianceLevelInMessage Clone()
        { 
            return new UpgradeAllianceLevelInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class BroadcastExchangeItemInMessage : InMessage
    {
        public BroadcastExchangeItemInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Team_BroadcastExchangeItem_ARG_uint64_characterId_string_characterName_ItemBaseData_item_int32_needCount_int32_ContinueMinutes__;
            if (Request.Item == null) throw new ArgumentNullException("Item is null.");

            mResponse = new __RPC_Team_BroadcastExchangeItem_RET_int64__();
            mResponse.ReturnValue = new long();
        }


        public __RPC_Team_BroadcastExchangeItem_ARG_uint64_characterId_string_characterName_ItemBaseData_item_int32_needCount_int32_ContinueMinutes__ Request { get; private set; }

        private __RPC_Team_BroadcastExchangeItem_RET_int64__ mResponse;
        public long Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public BroadcastExchangeItemInMessage Clone()
        { 
            return new BroadcastExchangeItemInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class GetExchangeItemInMessage : InMessage
    {
        public GetExchangeItemInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Team_GetExchangeItem_ARG_uint64_characterId_int32_level_int32_count_int32_type__;

            mResponse = new __RPC_Team_GetExchangeItem_RET_StoreBroadcastList__();
            mResponse.ReturnValue = new StoreBroadcastList();
        }


        public __RPC_Team_GetExchangeItem_ARG_uint64_characterId_int32_level_int32_count_int32_type__ Request { get; private set; }

        private __RPC_Team_GetExchangeItem_RET_StoreBroadcastList__ mResponse;
        public StoreBroadcastList Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public GetExchangeItemInMessage Clone()
        { 
            return new GetExchangeItemInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class CancelExchangeItemInMessage : InMessage
    {
        public CancelExchangeItemInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Team_CancelExchangeItem_ARG_uint64_characterId_int64_itemGuid__;

        }


        public __RPC_Team_CancelExchangeItem_ARG_uint64_characterId_int64_itemGuid__ Request { get; private set; }

        public CancelExchangeItemInMessage Clone()
        { 
            return new CancelExchangeItemInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class SSApplyGroupShopItemsInMessage : InMessage
    {
        public SSApplyGroupShopItemsInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Team_SSApplyGroupShopItems_ARG_Int32Array_types_Int64ArrayList_items_int32_profession__;
            if (Request.Types == null) throw new ArgumentNullException("Types is null.");
            if (Request.Items == null) throw new ArgumentNullException("Items is null.");

            mResponse = new __RPC_Team_SSApplyGroupShopItems_RET_GroupShopItemAllForServer__();
            mResponse.ReturnValue = new GroupShopItemAllForServer();
        }


        public __RPC_Team_SSApplyGroupShopItems_ARG_Int32Array_types_Int64ArrayList_items_int32_profession__ Request { get; private set; }

        private __RPC_Team_SSApplyGroupShopItems_RET_GroupShopItemAllForServer__ mResponse;
        public GroupShopItemAllForServer Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public SSApplyGroupShopItemsInMessage Clone()
        { 
            return new SSApplyGroupShopItemsInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SSBuyGroupShopItemInMessage : InMessage
    {
        public SSBuyGroupShopItemInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Team_SSBuyGroupShopItem_ARG_int64_guid_int32_count__;

            mResponse = new __RPC_Team_SSBuyGroupShopItem_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Team_SSBuyGroupShopItem_ARG_int64_guid_int32_count__ Request { get; private set; }

        private __RPC_Team_SSBuyGroupShopItem_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public SSBuyGroupShopItemInMessage Clone()
        { 
            return new SSBuyGroupShopItemInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SSGetBuyedGroupShopItemsInMessage : InMessage
    {
        public SSGetBuyedGroupShopItemsInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Team_SSGetBuyedGroupShopItems_ARG_Int64Array_buyed__;
            if (Request.Buyed == null) throw new ArgumentNullException("Buyed is null.");

            mResponse = new __RPC_Team_SSGetBuyedGroupShopItems_RET_GroupShopItemAll__();
            mResponse.ReturnValue = new GroupShopItemAll();
        }


        public __RPC_Team_SSGetBuyedGroupShopItems_ARG_Int64Array_buyed__ Request { get; private set; }

        private __RPC_Team_SSGetBuyedGroupShopItems_RET_GroupShopItemAll__ mResponse;
        public GroupShopItemAll Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public SSGetBuyedGroupShopItemsInMessage Clone()
        { 
            return new SSGetBuyedGroupShopItemsInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SSGetGroupShopHistoryInMessage : InMessage
    {
        public SSGetGroupShopHistoryInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Team_SSGetGroupShopHistory_ARG_Int64Array_buyed_Int64Array_history__;
            if (Request.Buyed == null) throw new ArgumentNullException("Buyed is null.");
            if (Request.History == null) throw new ArgumentNullException("History is null.");

            mResponse = new __RPC_Team_SSGetGroupShopHistory_RET_GroupShopItemAllForServer__();
            mResponse.ReturnValue = new GroupShopItemAllForServer();
        }


        public __RPC_Team_SSGetGroupShopHistory_ARG_Int64Array_buyed_Int64Array_history__ Request { get; private set; }

        private __RPC_Team_SSGetGroupShopHistory_RET_GroupShopItemAllForServer__ mResponse;
        public GroupShopItemAllForServer Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public SSGetGroupShopHistoryInMessage Clone()
        { 
            return new SSGetGroupShopHistoryInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class ApplyAllianceEnjoyListInMessage : InMessage
    {
        public ApplyAllianceEnjoyListInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Team_ApplyAllianceEnjoyList_ARG_int32_allianceId__;

            mResponse = new __RPC_Team_ApplyAllianceEnjoyList_RET_AllianceEnjoyData__();
            mResponse.ReturnValue = new AllianceEnjoyData();
        }


        public __RPC_Team_ApplyAllianceEnjoyList_ARG_int32_allianceId__ Request { get; private set; }

        private __RPC_Team_ApplyAllianceEnjoyList_RET_AllianceEnjoyData__ mResponse;
        public AllianceEnjoyData Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public ApplyAllianceEnjoyListInMessage Clone()
        { 
            return new ApplyAllianceEnjoyListInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class ApplyAllianceDonationListInMessage : InMessage
    {
        public ApplyAllianceDonationListInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Team_ApplyAllianceDonationList_ARG_int32_allianceId__;

            mResponse = new __RPC_Team_ApplyAllianceDonationList_RET_AllianceDonationData__();
            mResponse.ReturnValue = new AllianceDonationData();
        }


        public __RPC_Team_ApplyAllianceDonationList_ARG_int32_allianceId__ Request { get; private set; }

        private __RPC_Team_ApplyAllianceDonationList_RET_AllianceDonationData__ mResponse;
        public AllianceDonationData Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public ApplyAllianceDonationListInMessage Clone()
        { 
            return new ApplyAllianceDonationListInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SSCharacterEnterBattleInMessage : InMessage
    {
        public SSCharacterEnterBattleInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Team_SSCharacterEnterBattle_ARG_int32_fubenId_uint64_sceneGuid_uint64_characterId__;

        }


        public __RPC_Team_SSCharacterEnterBattle_ARG_int32_fubenId_uint64_sceneGuid_uint64_characterId__ Request { get; private set; }

        public SSCharacterEnterBattleInMessage Clone()
        { 
            return new SSCharacterEnterBattleInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class SSCharacterLeaveBattleInMessage : InMessage
    {
        public SSCharacterLeaveBattleInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Team_SSCharacterLeaveBattle_ARG_int32_fubenId_uint64_sceneGuid_uint64_characterId__;

        }


        public __RPC_Team_SSCharacterLeaveBattle_ARG_int32_fubenId_uint64_sceneGuid_uint64_characterId__ Request { get; private set; }

        public SSCharacterLeaveBattleInMessage Clone()
        { 
            return new SSCharacterLeaveBattleInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class SSBattleEndInMessage : InMessage
    {
        public SSBattleEndInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Team_SSBattleEnd_ARG_uint64_sceneGuid__;

        }


        public __RPC_Team_SSBattleEnd_ARG_uint64_sceneGuid__ Request { get; private set; }

        public SSBattleEndInMessage Clone()
        { 
            return new SSBattleEndInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class SSGetTeamCountInMessage : InMessage
    {
        public SSGetTeamCountInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Team_SSGetTeamCount_ARG_Uint64Array_teamIds__;
            if (Request.TeamIds == null) throw new ArgumentNullException("TeamIds is null.");

            mResponse = new __RPC_Team_SSGetTeamCount_RET_Int32Array__();
            mResponse.ReturnValue = new Int32Array();
        }


        public __RPC_Team_SSGetTeamCount_ARG_Uint64Array_teamIds__ Request { get; private set; }

        private __RPC_Team_SSGetTeamCount_RET_Int32Array__ mResponse;
        public Int32Array Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public SSGetTeamCountInMessage Clone()
        { 
            return new SSGetTeamCountInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SSGetTeamSceneDataInMessage : InMessage
    {
        public SSGetTeamSceneDataInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Team_SSGetTeamSceneData_ARG_uint64_characterId__;

            mResponse = new __RPC_Team_SSGetTeamSceneData_RET_ObjSceneDataList__();
            mResponse.ReturnValue = new ObjSceneDataList();
        }


        public __RPC_Team_SSGetTeamSceneData_ARG_uint64_characterId__ Request { get; private set; }

        private __RPC_Team_SSGetTeamSceneData_RET_ObjSceneDataList__ mResponse;
        public ObjSceneDataList Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public SSGetTeamSceneDataInMessage Clone()
        { 
            return new SSGetTeamSceneDataInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SSGetTeamCharactersInMessage : InMessage
    {
        public SSGetTeamCharactersInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Team_SSGetTeamCharacters_ARG_uint64_characterId__;

            mResponse = new __RPC_Team_SSGetTeamCharacters_RET_Uint64Array__();
            mResponse.ReturnValue = new Uint64Array();
        }


        public __RPC_Team_SSGetTeamCharacters_ARG_uint64_characterId__ Request { get; private set; }

        private __RPC_Team_SSGetTeamCharacters_RET_Uint64Array__ mResponse;
        public Uint64Array Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public SSGetTeamCharactersInMessage Clone()
        { 
            return new SSGetTeamCharactersInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SSNotifyPlayerChangeSceneInMessage : InMessage
    {
        public SSNotifyPlayerChangeSceneInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Team_SSNotifyPlayerChangeScene_ARG_int32_serverId_uint64_guid_int32_sceneId_int32_level_int32_fightPoint__;

        }


        public __RPC_Team_SSNotifyPlayerChangeScene_ARG_int32_serverId_uint64_guid_int32_sceneId_int32_level_int32_fightPoint__ Request { get; private set; }

        public SSNotifyPlayerChangeSceneInMessage Clone()
        { 
            return new SSNotifyPlayerChangeSceneInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class ReadyToEnterInMessage : InMessage
    {
        public ReadyToEnterInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Team_ReadyToEnter_ARG_int32_placeholder__;

            mResponse = new __RPC_Team_ReadyToEnter_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Team_ReadyToEnter_ARG_int32_placeholder__ Request { get; private set; }

        private __RPC_Team_ReadyToEnter_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public ReadyToEnterInMessage Clone()
        { 
            return new ReadyToEnterInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class UpdateServerInMessage : InMessage
    {
        public UpdateServerInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Team_UpdateServer_ARG_int32_placeholder__;

        }


        public __RPC_Team_UpdateServer_ARG_int32_placeholder__ Request { get; private set; }

        public UpdateServerInMessage Clone()
        { 
            return new UpdateServerInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class ApplyAllianceWarOccupantDataInMessage : InMessage
    {
        public ApplyAllianceWarOccupantDataInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Team_ApplyAllianceWarOccupantData_ARG_int32_serverId__;

            mResponse = new __RPC_Team_ApplyAllianceWarOccupantData_RET_AllianceWarOccupantData__();
            mResponse.ReturnValue = new AllianceWarOccupantData();
        }


        public __RPC_Team_ApplyAllianceWarOccupantData_ARG_int32_serverId__ Request { get; private set; }

        private __RPC_Team_ApplyAllianceWarOccupantData_RET_AllianceWarOccupantData__ mResponse;
        public AllianceWarOccupantData Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public ApplyAllianceWarOccupantDataInMessage Clone()
        { 
            return new ApplyAllianceWarOccupantDataInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class ApplyAllianceWarChallengerDataInMessage : InMessage
    {
        public ApplyAllianceWarChallengerDataInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Team_ApplyAllianceWarChallengerData_ARG_int32_serverId__;

            mResponse = new __RPC_Team_ApplyAllianceWarChallengerData_RET_AllianceWarChallengerData__();
            mResponse.ReturnValue = new AllianceWarChallengerData();
        }


        public __RPC_Team_ApplyAllianceWarChallengerData_ARG_int32_serverId__ Request { get; private set; }

        private __RPC_Team_ApplyAllianceWarChallengerData_RET_AllianceWarChallengerData__ mResponse;
        public AllianceWarChallengerData Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public ApplyAllianceWarChallengerDataInMessage Clone()
        { 
            return new ApplyAllianceWarChallengerDataInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class ApplyAllianceWarDataInMessage : InMessage
    {
        public ApplyAllianceWarDataInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Team_ApplyAllianceWarData_ARG_int32_serverId__;

            mResponse = new __RPC_Team_ApplyAllianceWarData_RET_AllianceWarData__();
            mResponse.ReturnValue = new AllianceWarData();
        }


        public __RPC_Team_ApplyAllianceWarData_ARG_int32_serverId__ Request { get; private set; }

        private __RPC_Team_ApplyAllianceWarData_RET_AllianceWarData__ mResponse;
        public AllianceWarData Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public ApplyAllianceWarDataInMessage Clone()
        { 
            return new ApplyAllianceWarDataInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class BidAllianceWarInMessage : InMessage
    {
        public BidAllianceWarInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Team_BidAllianceWar_ARG_int32_price__;

            mResponse = new __RPC_Team_BidAllianceWar_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Team_BidAllianceWar_ARG_int32_price__ Request { get; private set; }

        private __RPC_Team_BidAllianceWar_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public BidAllianceWarInMessage Clone()
        { 
            return new BidAllianceWarInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class EnterAllianceWarInMessage : InMessage
    {
        public EnterAllianceWarInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Team_EnterAllianceWar_ARG_int32_placeholder__;

            mResponse = new __RPC_Team_EnterAllianceWar_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Team_EnterAllianceWar_ARG_int32_placeholder__ Request { get; private set; }

        private __RPC_Team_EnterAllianceWar_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public EnterAllianceWarInMessage Clone()
        { 
            return new EnterAllianceWarInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class NotifyAllianceWarResultInMessage : InMessage
    {
        public NotifyAllianceWarResultInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Team_NotifyAllianceWarResult_ARG_AllianceWarResult_result__;
            if (Request.Result == null) throw new ArgumentNullException("Result is null.");

            mResponse = new __RPC_Team_NotifyAllianceWarResult_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Team_NotifyAllianceWarResult_ARG_AllianceWarResult_result__ Request { get; private set; }

        private __RPC_Team_NotifyAllianceWarResult_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public NotifyAllianceWarResultInMessage Clone()
        { 
            return new NotifyAllianceWarResultInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class QueryAllianceWarInfoInMessage : InMessage
    {
        public QueryAllianceWarInfoInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Team_QueryAllianceWarInfo_ARG_int32_placeholder__;

            mResponse = new __RPC_Team_QueryAllianceWarInfo_RET_AllianceWarInfos__();
            mResponse.ReturnValue = new AllianceWarInfos();
        }


        public __RPC_Team_QueryAllianceWarInfo_ARG_int32_placeholder__ Request { get; private set; }

        private __RPC_Team_QueryAllianceWarInfo_RET_AllianceWarInfos__ mResponse;
        public AllianceWarInfos Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public QueryAllianceWarInfoInMessage Clone()
        { 
            return new QueryAllianceWarInfoInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SSOnItemAuctionInMessage : InMessage
    {
        public SSOnItemAuctionInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Team_SSOnItemAuction_ARG_int32_serverId_uint64_characterId_string_characterName_ItemBaseData_item_int32_needType_int32_needCount_int64_itemGuid__;
            if (Request.Item == null) throw new ArgumentNullException("Item is null.");

            mResponse = new __RPC_Team_SSOnItemAuction_RET_int64__();
            mResponse.ReturnValue = new long();
        }


        public __RPC_Team_SSOnItemAuction_ARG_int32_serverId_uint64_characterId_string_characterName_ItemBaseData_item_int32_needType_int32_needCount_int64_itemGuid__ Request { get; private set; }

        private __RPC_Team_SSOnItemAuction_RET_int64__ mResponse;
        public long Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public SSOnItemAuctionInMessage Clone()
        { 
            return new SSOnItemAuctionInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SSDownItemAuctionInMessage : InMessage
    {
        public SSDownItemAuctionInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Team_SSDownItemAuction_ARG_int32_serverId_uint64_characterId_int64_itemGuid__;

        }


        public __RPC_Team_SSDownItemAuction_ARG_int32_serverId_uint64_characterId_int64_itemGuid__ Request { get; private set; }

        public SSDownItemAuctionInMessage Clone()
        { 
            return new SSDownItemAuctionInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class CSSelectItemAuctionInMessage : InMessage
    {
        public CSSelectItemAuctionInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Team_CSSelectItemAuction_ARG_int32_serverId_int32_type__;

            mResponse = new __RPC_Team_CSSelectItemAuction_RET_AuctionItemList__();
            mResponse.ReturnValue = new AuctionItemList();
        }


        public __RPC_Team_CSSelectItemAuction_ARG_int32_serverId_int32_type__ Request { get; private set; }

        private __RPC_Team_CSSelectItemAuction_RET_AuctionItemList__ mResponse;
        public AuctionItemList Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public CSSelectItemAuctionInMessage Clone()
        { 
            return new CSSelectItemAuctionInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SSSelectItemAuctionInMessage : InMessage
    {
        public SSSelectItemAuctionInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Team_SSSelectItemAuction_ARG_int32_serverId_uint64_characterId_int64_itemManagerId__;

            mResponse = new __RPC_Team_SSSelectItemAuction_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Team_SSSelectItemAuction_ARG_int32_serverId_uint64_characterId_int64_itemManagerId__ Request { get; private set; }

        private __RPC_Team_SSSelectItemAuction_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public SSSelectItemAuctionInMessage Clone()
        { 
            return new SSSelectItemAuctionInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class CSEnrollUnionBattleInMessage : InMessage
    {
        public CSEnrollUnionBattleInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Team_CSEnrollUnionBattle_ARG_int32_allianceId_uint64_characterId__;

            mResponse = new __RPC_Team_CSEnrollUnionBattle_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Team_CSEnrollUnionBattle_ARG_int32_allianceId_uint64_characterId__ Request { get; private set; }

        private __RPC_Team_CSEnrollUnionBattle_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public CSEnrollUnionBattleInMessage Clone()
        { 
            return new CSEnrollUnionBattleInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class CSEnterUnionBattleInMessage : InMessage
    {
        public CSEnterUnionBattleInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Team_CSEnterUnionBattle_ARG_int32_allianceId_uint64_characterId__;

            mResponse = new __RPC_Team_CSEnterUnionBattle_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Team_CSEnterUnionBattle_ARG_int32_allianceId_uint64_characterId__ Request { get; private set; }

        private __RPC_Team_CSEnterUnionBattle_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public CSEnterUnionBattleInMessage Clone()
        { 
            return new CSEnterUnionBattleInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class CSGetUnionBattleInfoInMessage : InMessage
    {
        public CSGetUnionBattleInfoInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Team_CSGetUnionBattleInfo_ARG_int32_allianceId__;

            mResponse = new __RPC_Team_CSGetUnionBattleInfo_RET_MsgUnionBattleInfo__();
            mResponse.ReturnValue = new MsgUnionBattleInfo();
        }


        public __RPC_Team_CSGetUnionBattleInfo_ARG_int32_allianceId__ Request { get; private set; }

        private __RPC_Team_CSGetUnionBattleInfo_RET_MsgUnionBattleInfo__ mResponse;
        public MsgUnionBattleInfo Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public CSGetUnionBattleInfoInMessage Clone()
        { 
            return new CSGetUnionBattleInfoInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class CSGetUnionBattleMathInfoInMessage : InMessage
    {
        public CSGetUnionBattleMathInfoInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Team_CSGetUnionBattleMathInfo_ARG_int32_placeholder__;

            mResponse = new __RPC_Team_CSGetUnionBattleMathInfo_RET_MsgUnionBattleMathInfo__();
            mResponse.ReturnValue = new MsgUnionBattleMathInfo();
        }


        public __RPC_Team_CSGetUnionBattleMathInfo_ARG_int32_placeholder__ Request { get; private set; }

        private __RPC_Team_CSGetUnionBattleMathInfo_RET_MsgUnionBattleMathInfo__ mResponse;
        public MsgUnionBattleMathInfo Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public CSGetUnionBattleMathInfoInMessage Clone()
        { 
            return new CSGetUnionBattleMathInfoInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SBCleanClientCharacterDataInMessage : InMessage
    {
        public SBCleanClientCharacterDataInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Team_SBCleanClientCharacterData_ARG_uint64_clientId_uint64_characterId__;

        }


        public __RPC_Team_SBCleanClientCharacterData_ARG_uint64_clientId_uint64_characterId__ Request { get; private set; }

        public SBCleanClientCharacterDataInMessage Clone()
        { 
            return new SBCleanClientCharacterDataInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class SSNotifyCharacterOnConnetInMessage : InMessage
    {
        public SSNotifyCharacterOnConnetInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Team_SSNotifyCharacterOnConnet_ARG_uint64_clientId_uint64_characterId__;

            mResponse = new __RPC_Team_SSNotifyCharacterOnConnet_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Team_SSNotifyCharacterOnConnet_ARG_uint64_clientId_uint64_characterId__ Request { get; private set; }

        private __RPC_Team_SSNotifyCharacterOnConnet_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public SSNotifyCharacterOnConnetInMessage Clone()
        { 
            return new SSNotifyCharacterOnConnetInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class BSNotifyCharacterOnLostInMessage : InMessage
    {
        public BSNotifyCharacterOnLostInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Team_BSNotifyCharacterOnLost_ARG_uint64_clientId_uint64_characterId__;

        }


        public __RPC_Team_BSNotifyCharacterOnLost_ARG_uint64_clientId_uint64_characterId__ Request { get; private set; }

        public BSNotifyCharacterOnLostInMessage Clone()
        { 
            return new BSNotifyCharacterOnLostInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class AutoMatchBeginInMessage : InMessage
    {
        public AutoMatchBeginInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Team_AutoMatchBegin_ARG_int32_isHaveTeam_int32_type_int32_targetID__;

        }


        public __RPC_Team_AutoMatchBegin_ARG_int32_isHaveTeam_int32_type_int32_targetID__ Request { get; private set; }

        public AutoMatchBeginInMessage Clone()
        { 
            return new AutoMatchBeginInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class AutoMatchCancelInMessage : InMessage
    {
        public AutoMatchCancelInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Team_AutoMatchCancel_ARG_int32_match__;

        }


        public __RPC_Team_AutoMatchCancel_ARG_int32_match__ Request { get; private set; }

        public AutoMatchCancelInMessage Clone()
        { 
            return new AutoMatchCancelInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class SSGetCharacterTeamFlagInMessage : InMessage
    {
        public SSGetCharacterTeamFlagInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Team_SSGetCharacterTeamFlag_ARG_uint64_characterId_bool_flag__;

        }


        public __RPC_Team_SSGetCharacterTeamFlag_ARG_uint64_characterId_bool_flag__ Request { get; private set; }

        public SSGetCharacterTeamFlagInMessage Clone()
        { 
            return new SSGetCharacterTeamFlagInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class ChangetTeamTargetInMessage : InMessage
    {
        public ChangetTeamTargetInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Team_ChangetTeamTarget_ARG_int32_type_int32_targetID_int32_levelMini_int32_levelMax_int32_readTableId__;

        }


        public __RPC_Team_ChangetTeamTarget_ARG_int32_type_int32_targetID_int32_levelMini_int32_levelMax_int32_readTableId__ Request { get; private set; }

        public ChangetTeamTargetInMessage Clone()
        { 
            return new ChangetTeamTargetInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class SearchTeamListInMessage : InMessage
    {
        public SearchTeamListInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Team_SearchTeamList_ARG_int32_groupType_int32_targetID_int32_level__;

            mResponse = new __RPC_Team_SearchTeamList_RET_TeamSearchItemList__();
            mResponse.ReturnValue = new TeamSearchItemList();
        }


        public __RPC_Team_SearchTeamList_ARG_int32_groupType_int32_targetID_int32_level__ Request { get; private set; }

        private __RPC_Team_SearchTeamList_RET_TeamSearchItemList__ mResponse;
        public TeamSearchItemList Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public SearchTeamListInMessage Clone()
        { 
            return new SearchTeamListInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class TeamSearchApplyListInMessage : InMessage
    {
        public TeamSearchApplyListInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Team_TeamSearchApplyList_ARG_uint64_characterId__;

            mResponse = new __RPC_Team_TeamSearchApplyList_RET_TeamSearchItemList__();
            mResponse.ReturnValue = new TeamSearchItemList();
        }


        public __RPC_Team_TeamSearchApplyList_ARG_uint64_characterId__ Request { get; private set; }

        private __RPC_Team_TeamSearchApplyList_RET_TeamSearchItemList__ mResponse;
        public TeamSearchItemList Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public TeamSearchApplyListInMessage Clone()
        { 
            return new TeamSearchApplyListInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class TeamApplyListClearInMessage : InMessage
    {
        public TeamApplyListClearInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Team_TeamApplyListClear_ARG_uint64_characterId__;

        }


        public __RPC_Team_TeamApplyListClear_ARG_uint64_characterId__ Request { get; private set; }

        public TeamApplyListClearInMessage Clone()
        { 
            return new TeamApplyListClearInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class SSAllianceDepotDonateInMessage : InMessage
    {
        public SSAllianceDepotDonateInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Team_SSAllianceDepotDonate_ARG_int32_serverId_uint64_characterId_string_characterName_ItemBaseData_item__;
            if (Request.Item == null) throw new ArgumentNullException("Item is null.");

            mResponse = new __RPC_Team_SSAllianceDepotDonate_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Team_SSAllianceDepotDonate_ARG_int32_serverId_uint64_characterId_string_characterName_ItemBaseData_item__ Request { get; private set; }

        private __RPC_Team_SSAllianceDepotDonate_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public SSAllianceDepotDonateInMessage Clone()
        { 
            return new SSAllianceDepotDonateInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class ApplyAllianceDepotLogListInMessage : InMessage
    {
        public ApplyAllianceDepotLogListInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Team_ApplyAllianceDepotLogList_ARG_int32_allianceId__;

            mResponse = new __RPC_Team_ApplyAllianceDepotLogList_RET_AllianceDepotLogData__();
            mResponse.ReturnValue = new AllianceDepotLogData();
        }


        public __RPC_Team_ApplyAllianceDepotLogList_ARG_int32_allianceId__ Request { get; private set; }

        private __RPC_Team_ApplyAllianceDepotLogList_RET_AllianceDepotLogData__ mResponse;
        public AllianceDepotLogData Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public ApplyAllianceDepotLogListInMessage Clone()
        { 
            return new ApplyAllianceDepotLogListInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class BattleUnionDepotArrangeInMessage : InMessage
    {
        public BattleUnionDepotArrangeInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Team_BattleUnionDepotArrange_ARG_int32_allianceId__;

            mResponse = new __RPC_Team_BattleUnionDepotArrange_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Team_BattleUnionDepotArrange_ARG_int32_allianceId__ Request { get; private set; }

        private __RPC_Team_BattleUnionDepotArrange_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public BattleUnionDepotArrangeInMessage Clone()
        { 
            return new BattleUnionDepotArrangeInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SSAllianceDepotTakeOutInMessage : InMessage
    {
        public SSAllianceDepotTakeOutInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Team_SSAllianceDepotTakeOut_ARG_int32_serverId_uint64_characterId_string_characterName_int32_bagIndex_int32_itemId__;

            mResponse = new __RPC_Team_SSAllianceDepotTakeOut_RET_ItemBaseData__();
            mResponse.ReturnValue = new ItemBaseData();
        }


        public __RPC_Team_SSAllianceDepotTakeOut_ARG_int32_serverId_uint64_characterId_string_characterName_int32_bagIndex_int32_itemId__ Request { get; private set; }

        private __RPC_Team_SSAllianceDepotTakeOut_RET_ItemBaseData__ mResponse;
        public ItemBaseData Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public SSAllianceDepotTakeOutInMessage Clone()
        { 
            return new SSAllianceDepotTakeOutInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class ApplyAllianceDepotDataInMessage : InMessage
    {
        public ApplyAllianceDepotDataInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Team_ApplyAllianceDepotData_ARG_int32_allianceId__;

            mResponse = new __RPC_Team_ApplyAllianceDepotData_RET_DBAllianceDepotDataOne__();
            mResponse.ReturnValue = new DBAllianceDepotDataOne();
        }


        public __RPC_Team_ApplyAllianceDepotData_ARG_int32_allianceId__ Request { get; private set; }

        private __RPC_Team_ApplyAllianceDepotData_RET_DBAllianceDepotDataOne__ mResponse;
        public DBAllianceDepotDataOne Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public ApplyAllianceDepotDataInMessage Clone()
        { 
            return new ApplyAllianceDepotDataInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class BattleUnionDepotClearUpInMessage : InMessage
    {
        public BattleUnionDepotClearUpInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Team_BattleUnionDepotClearUp_ARG_int32_allianceId_ClearUpInfo_info__;
            if (Request.Info == null) throw new ArgumentNullException("Info is null.");

            mResponse = new __RPC_Team_BattleUnionDepotClearUp_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Team_BattleUnionDepotClearUp_ARG_int32_allianceId_ClearUpInfo_info__ Request { get; private set; }

        private __RPC_Team_BattleUnionDepotClearUp_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public BattleUnionDepotClearUpInMessage Clone()
        { 
            return new BattleUnionDepotClearUpInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class BattleUnionRemoveDepotItemInMessage : InMessage
    {
        public BattleUnionRemoveDepotItemInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Team_BattleUnionRemoveDepotItem_ARG_int32_allianceId_int32_itemId_int32_bagIndex__;

            mResponse = new __RPC_Team_BattleUnionRemoveDepotItem_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Team_BattleUnionRemoveDepotItem_ARG_int32_allianceId_int32_itemId_int32_bagIndex__ Request { get; private set; }

        private __RPC_Team_BattleUnionRemoveDepotItem_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public BattleUnionRemoveDepotItemInMessage Clone()
        { 
            return new BattleUnionRemoveDepotItemInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class GMCommandInMessage : InMessage
    {
        public GMCommandInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Team_GMCommand_ARG_StringArray_commonds__;
            if (Request.Commonds == null) throw new ArgumentNullException("Commonds is null.");

            mResponse = new __RPC_Team_GMCommand_RET_Int32Array__();
            mResponse.ReturnValue = new Int32Array();
        }


        public __RPC_Team_GMCommand_ARG_StringArray_commonds__ Request { get; private set; }

        private __RPC_Team_GMCommand_RET_Int32Array__ mResponse;
        public Int32Array Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public GMCommandInMessage Clone()
        { 
            return new GMCommandInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class PlayerHoldLodeInMessage : InMessage
    {
        public PlayerHoldLodeInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Team_PlayerHoldLode_ARG_int32_serverId_int32_allianceId_int32_sceneId__;

            mResponse = new __RPC_Team_PlayerHoldLode_RET_MsgSceneLode__();
            mResponse.ReturnValue = new MsgSceneLode();
        }


        public __RPC_Team_PlayerHoldLode_ARG_int32_serverId_int32_allianceId_int32_sceneId__ Request { get; private set; }

        private __RPC_Team_PlayerHoldLode_RET_MsgSceneLode__ mResponse;
        public MsgSceneLode Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public PlayerHoldLodeInMessage Clone()
        { 
            return new PlayerHoldLodeInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class PlayerCollectLodeInMessage : InMessage
    {
        public PlayerCollectLodeInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Team_PlayerCollectLode_ARG_int32_serverId_uint64_characterId_int32_allianceId_int32_sceneId_int32_LodeId_int32_addScore_FieldRankBaseData_baseData_int32_meritPoint__;
            if (Request.BaseData == null) throw new ArgumentNullException("BaseData is null.");

            mResponse = new __RPC_Team_PlayerCollectLode_RET_MsgSceneLode__();
            mResponse.ReturnValue = new MsgSceneLode();
        }


        public __RPC_Team_PlayerCollectLode_ARG_int32_serverId_uint64_characterId_int32_allianceId_int32_sceneId_int32_LodeId_int32_addScore_FieldRankBaseData_baseData_int32_meritPoint__ Request { get; private set; }

        private __RPC_Team_PlayerCollectLode_RET_MsgSceneLode__ mResponse;
        public MsgSceneLode Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public PlayerCollectLodeInMessage Clone()
        { 
            return new PlayerCollectLodeInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class ApplyHoldLodeInMessage : InMessage
    {
        public ApplyHoldLodeInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Team_ApplyHoldLode_ARG_int32_serverId_int32_sceneId__;

            mResponse = new __RPC_Team_ApplyHoldLode_RET_MsgSceneLode__();
            mResponse.ReturnValue = new MsgSceneLode();
        }


        public __RPC_Team_ApplyHoldLode_ARG_int32_serverId_int32_sceneId__ Request { get; private set; }

        private __RPC_Team_ApplyHoldLode_RET_MsgSceneLode__ mResponse;
        public MsgSceneLode Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public ApplyHoldLodeInMessage Clone()
        { 
            return new ApplyHoldLodeInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class ClientApplyHoldLodeInMessage : InMessage
    {
        public ClientApplyHoldLodeInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Team_ClientApplyHoldLode_ARG_int32_serverId__;

            mResponse = new __RPC_Team_ClientApplyHoldLode_RET_MsgSceneLodeList__();
            mResponse.ReturnValue = new MsgSceneLodeList();
        }


        public __RPC_Team_ClientApplyHoldLode_ARG_int32_serverId__ Request { get; private set; }

        private __RPC_Team_ClientApplyHoldLode_RET_MsgSceneLodeList__ mResponse;
        public MsgSceneLodeList Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public ClientApplyHoldLodeInMessage Clone()
        { 
            return new ClientApplyHoldLodeInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class ClientApplyActiveInfoInMessage : InMessage
    {
        public ClientApplyActiveInfoInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Team_ClientApplyActiveInfo_ARG_int32_serverId_int32_allianceId__;

            mResponse = new __RPC_Team_ClientApplyActiveInfo_RET_DBActiveTask__();
            mResponse.ReturnValue = new DBActiveTask();
        }


        public __RPC_Team_ClientApplyActiveInfo_ARG_int32_serverId_int32_allianceId__ Request { get; private set; }

        private __RPC_Team_ClientApplyActiveInfo_RET_DBActiveTask__ mResponse;
        public DBActiveTask Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public ClientApplyActiveInfoInMessage Clone()
        { 
            return new ClientApplyActiveInfoInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SSApplyFieldActivityRewardInMessage : InMessage
    {
        public SSApplyFieldActivityRewardInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Team_SSApplyFieldActivityReward_ARG_int32_serverId_int32_allianceId_uint64_characterId_int32_missionId_int32_score_int32_addScore_FieldRankBaseData_data__;
            if (Request.Data == null) throw new ArgumentNullException("Data is null.");

            mResponse = new __RPC_Team_SSApplyFieldActivityReward_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Team_SSApplyFieldActivityReward_ARG_int32_serverId_int32_allianceId_uint64_characterId_int32_missionId_int32_score_int32_addScore_FieldRankBaseData_data__ Request { get; private set; }

        private __RPC_Team_SSApplyFieldActivityReward_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public SSApplyFieldActivityRewardInMessage Clone()
        { 
            return new SSApplyFieldActivityRewardInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SSSyncTeamMemberLevelChangeInMessage : InMessage
    {
        public SSSyncTeamMemberLevelChangeInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Team_SSSyncTeamMemberLevelChange_ARG_int32_serverId_uint64_characterId_uint64_teamId_int32_reborn_int32_level__;

        }


        public __RPC_Team_SSSyncTeamMemberLevelChange_ARG_int32_serverId_uint64_characterId_uint64_teamId_int32_reborn_int32_level__ Request { get; private set; }

        public SSSyncTeamMemberLevelChangeInMessage Clone()
        { 
            return new SSSyncTeamMemberLevelChangeInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class SSAddAllianceContributionInMessage : InMessage
    {
        public SSAddAllianceContributionInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Team_SSAddAllianceContribution_ARG_int32_serverId_uint64_characterId_int32_allianceId_int32_Contribution__;

        }


        public __RPC_Team_SSAddAllianceContribution_ARG_int32_serverId_uint64_characterId_int32_allianceId_int32_Contribution__ Request { get; private set; }

        public SSAddAllianceContributionInMessage Clone()
        { 
            return new SSAddAllianceContributionInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class ClearAllianceApplyListInMessage : InMessage
    {
        public ClearAllianceApplyListInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Team_ClearAllianceApplyList_ARG_int32_allianceId_Uint64Array_guids__;
            if (Request.Guids == null) throw new ArgumentNullException("Guids is null.");

            mResponse = new __RPC_Team_ClearAllianceApplyList_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Team_ClearAllianceApplyList_ARG_int32_allianceId_Uint64Array_guids__ Request { get; private set; }

        private __RPC_Team_ClearAllianceApplyList_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public ClearAllianceApplyListInMessage Clone()
        { 
            return new ClearAllianceApplyListInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class NodifyModifyPlayerNameInMessage : InMessage
    {
        public NodifyModifyPlayerNameInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Team_NodifyModifyPlayerName_ARG_int32_serverId_uint64_characterId_uint64_teamId_string_modifyName__;

        }


        public __RPC_Team_NodifyModifyPlayerName_ARG_int32_serverId_uint64_characterId_uint64_teamId_string_modifyName__ Request { get; private set; }

        public NodifyModifyPlayerNameInMessage Clone()
        { 
            return new NodifyModifyPlayerNameInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class NodifyModifyAllianceMemberNameInMessage : InMessage
    {
        public NodifyModifyAllianceMemberNameInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Team_NodifyModifyAllianceMemberName_ARG_int32_serverId_uint64_characterId_int32_allianceId_string_modifyName__;

        }


        public __RPC_Team_NodifyModifyAllianceMemberName_ARG_int32_serverId_uint64_characterId_int32_allianceId_string_modifyName__ Request { get; private set; }

        public NodifyModifyAllianceMemberNameInMessage Clone()
        { 
            return new NodifyModifyAllianceMemberNameInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class SSLeaveTeamInMessage : InMessage
    {
        public SSLeaveTeamInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Team_SSLeaveTeam_ARG_int32_placeholder__;

        }


        public __RPC_Team_SSLeaveTeam_ARG_int32_placeholder__ Request { get; private set; }

        public SSLeaveTeamInMessage Clone()
        { 
            return new SSLeaveTeamInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public interface ITeamCharacterProxy
    {
        /// <summary>
        /// 组队接口
        /// </summary>
        IEnumerator TeamMessage(Coroutine coroutine, TeamCharacterProxy _this, TeamMessageInMessage msg);
        /// <summary>
        /// 获取组队信息
        /// </summary>
        IEnumerator ApplyTeam(Coroutine coroutine, TeamCharacterProxy _this, ApplyTeamInMessage msg);
        /// <summary>
        /// 接受聊天数据
        /// </summary>
        IEnumerator TeamChatMessage(Coroutine coroutine, TeamCharacterProxy _this, TeamChatMessageInMessage msg);
        /// <summary>
        /// 副本排队
        /// </summary>
        IEnumerator TeamDungeonLineUp(Coroutine coroutine, TeamCharacterProxy _this, TeamDungeonLineUpInMessage msg);
        /// <summary>
        /// 排队开始
        /// </summary>
        IEnumerator MatchingStart(Coroutine coroutine, TeamCharacterProxy _this, MatchingStartInMessage msg);
        /// <summary>
        /// 取消排队
        /// </summary>
        IEnumerator MatchingCancel(Coroutine coroutine, TeamCharacterProxy _this, MatchingCancelInMessage msg);
        /// <summary>
        /// 通知反馈
        /// </summary>
        IEnumerator MatchingBack(Coroutine coroutine, TeamCharacterProxy _this, MatchingBackInMessage msg);
        /// <summary>
        /// 请求排队信息
        /// </summary>
        IEnumerator ApplyQueueData(Coroutine coroutine, TeamCharacterProxy _this, ApplyQueueDataInMessage msg);
        /// <summary>
        /// 请求进入多人副本
        /// </summary>
        IEnumerator TeamEnterFuben(Coroutine coroutine, TeamCharacterProxy _this, TeamEnterFubenInMessage msg);
        /// <summary>
        /// 同意进入多人副本
        /// </summary>
        IEnumerator ResultTeamEnterFuben(Coroutine coroutine, TeamCharacterProxy _this, ResultTeamEnterFubenInMessage msg);
        /// <summary>
        /// GM命令
        /// </summary>
        IEnumerator GMTeam(Coroutine coroutine, TeamCharacterProxy _this, GMTeamInMessage msg);
        /// <summary>
        /// 获取战盟信息
        /// </summary>
        IEnumerator ApplyAllianceData(Coroutine coroutine, TeamCharacterProxy _this, ApplyAllianceDataInMessage msg);
        /// <summary>
        /// 获取战盟信息          type:  0 = 详细信息, 1 = 简单信息
        /// </summary>
        IEnumerator ApplyAllianceDataByServerId(Coroutine coroutine, TeamCharacterProxy _this, ApplyAllianceDataByServerIdInMessage msg);
        /// <summary>
        /// 修改战盟公告
        /// </summary>
        IEnumerator ChangeAllianceNotice(Coroutine coroutine, TeamCharacterProxy _this, ChangeAllianceNoticeInMessage msg);
        /// <summary>
        /// 获取服务器战盟信息
        /// </summary>
        IEnumerator GetServerAlliance(Coroutine coroutine, TeamCharacterProxy _this, GetServerAllianceInMessage msg);
        /// <summary>
        /// 修改角色权限
        /// </summary>
        IEnumerator ChangeJurisdiction(Coroutine coroutine, TeamCharacterProxy _this, ChangeJurisdictionInMessage msg);
        /// <summary>
        /// 修改战盟设置为是否自动同意申请
        /// </summary>
        IEnumerator ChangeAllianceAutoJoin(Coroutine coroutine, TeamCharacterProxy _this, ChangeAllianceAutoJoinInMessage msg);
        /// <summary>
        /// 批量同意的战盟申请
        /// </summary>
        IEnumerator AllianceAgreeApplyList(Coroutine coroutine, TeamCharacterProxy _this, AllianceAgreeApplyListInMessage msg);
        /// <summary>
        /// 请求战盟信息任务数据
        /// </summary>
        IEnumerator ApplyAllianceMissionData(Coroutine coroutine, TeamCharacterProxy _this, ApplyAllianceMissionDataInMessage msg);
        /// <summary>
        /// 升级战盟等级
        /// </summary>
        IEnumerator UpgradeAllianceLevel(Coroutine coroutine, TeamCharacterProxy _this, UpgradeAllianceLevelInMessage msg);
        /// <summary>
        /// 获取战盟信息申请列表
        /// </summary>
        IEnumerator ApplyAllianceEnjoyList(Coroutine coroutine, TeamCharacterProxy _this, ApplyAllianceEnjoyListInMessage msg);
        /// <summary>
        /// 获取战盟捐献记录
        /// </summary>
        IEnumerator ApplyAllianceDonationList(Coroutine coroutine, TeamCharacterProxy _this, ApplyAllianceDonationListInMessage msg);
        /// <summary>
        /// start of攻城战相关
        /// 请求城主信息
        /// </summary>
        IEnumerator ApplyAllianceWarOccupantData(Coroutine coroutine, TeamCharacterProxy _this, ApplyAllianceWarOccupantDataInMessage msg);
        /// <summary>
        /// 请求进攻方信息
        /// </summary>
        IEnumerator ApplyAllianceWarChallengerData(Coroutine coroutine, TeamCharacterProxy _this, ApplyAllianceWarChallengerDataInMessage msg);
        /// <summary>
        /// 请求攻城战数据
        /// </summary>
        IEnumerator ApplyAllianceWarData(Coroutine coroutine, TeamCharacterProxy _this, ApplyAllianceWarDataInMessage msg);
        /// <summary>
        /// 攻城战竞标
        /// </summary>
        IEnumerator BidAllianceWar(Coroutine coroutine, TeamCharacterProxy _this, BidAllianceWarInMessage msg);
        /// <summary>
        /// 请求进入攻城战战场
        /// </summary>
        IEnumerator EnterAllianceWar(Coroutine coroutine, TeamCharacterProxy _this, EnterAllianceWarInMessage msg);
        /// <summary>
        /// 拍卖行：查询道具
        /// </summary>
        IEnumerator CSSelectItemAuction(Coroutine coroutine, TeamCharacterProxy _this, CSSelectItemAuctionInMessage msg);
        /// <summary>
        ///  报名盟战
        /// </summary>
        IEnumerator CSEnrollUnionBattle(Coroutine coroutine, TeamCharacterProxy _this, CSEnrollUnionBattleInMessage msg);
        /// <summary>
        ///  进入盟战
        /// </summary>
        IEnumerator CSEnterUnionBattle(Coroutine coroutine, TeamCharacterProxy _this, CSEnterUnionBattleInMessage msg);
        /// <summary>
        ///  请求盟战信息
        /// </summary>
        IEnumerator CSGetUnionBattleInfo(Coroutine coroutine, TeamCharacterProxy _this, CSGetUnionBattleInfoInMessage msg);
        /// <summary>
        ///  盟战比赛信息
        /// </summary>
        IEnumerator CSGetUnionBattleMathInfo(Coroutine coroutine, TeamCharacterProxy _this, CSGetUnionBattleMathInfoInMessage msg);
        /// <summary>
        /// end of攻城战相关
        /// 队伍：自动匹配  开启自动匹配
        /// </summary>
        IEnumerator AutoMatchBegin(Coroutine coroutine, TeamCharacterProxy _this, AutoMatchBeginInMessage msg);
        /// <summary>
        /// 队伍：自动匹配  取消自动匹配
        /// </summary>
        IEnumerator AutoMatchCancel(Coroutine coroutine, TeamCharacterProxy _this, AutoMatchCancelInMessage msg);
        /// <summary>
        /// 队伍：自动匹配  相关结束
        /// 队伍：更改队伍目标
        /// </summary>
        IEnumerator ChangetTeamTarget(Coroutine coroutine, TeamCharacterProxy _this, ChangetTeamTargetInMessage msg);
        /// <summary>
        /// 队伍：申请入队
        /// CS void						RequestJoinTeam(int32 teamId)=7511;
        /// 队伍：搜寻队伍界面，拉去队伍相关列表
        /// </summary>
        IEnumerator SearchTeamList(Coroutine coroutine, TeamCharacterProxy _this, SearchTeamListInMessage msg);
        /// <summary>
        /// 队伍：搜寻队伍界面，拉取玩家申请列表
        /// </summary>
        IEnumerator TeamSearchApplyList(Coroutine coroutine, TeamCharacterProxy _this, TeamSearchApplyListInMessage msg);
        /// <summary>
        /// 队伍：清空申请列表
        /// </summary>
        IEnumerator TeamApplyListClear(Coroutine coroutine, TeamCharacterProxy _this, TeamApplyListClearInMessage msg);
        /// <summary>
        /// 获取战盟仓库记录
        /// </summary>
        IEnumerator ApplyAllianceDepotLogList(Coroutine coroutine, TeamCharacterProxy _this, ApplyAllianceDepotLogListInMessage msg);
        /// <summary>
        /// 整理战盟仓库
        /// </summary>
        IEnumerator BattleUnionDepotArrange(Coroutine coroutine, TeamCharacterProxy _this, BattleUnionDepotArrangeInMessage msg);
        /// <summary>
        /// 获取战盟仓库数据
        /// </summary>
        IEnumerator ApplyAllianceDepotData(Coroutine coroutine, TeamCharacterProxy _this, ApplyAllianceDepotDataInMessage msg);
        /// <summary>
        /// 获取战盟仓库数据
        /// </summary>
        IEnumerator BattleUnionDepotClearUp(Coroutine coroutine, TeamCharacterProxy _this, BattleUnionDepotClearUpInMessage msg);
        /// <summary>
        /// 从战盟仓库清除某一物品
        /// </summary>
        IEnumerator BattleUnionRemoveDepotItem(Coroutine coroutine, TeamCharacterProxy _this, BattleUnionRemoveDepotItemInMessage msg);
        /// <summary>
        /// 请求矿脉信息
        /// </summary>
        IEnumerator ClientApplyHoldLode(Coroutine coroutine, TeamCharacterProxy _this, ClientApplyHoldLodeInMessage msg);
        /// <summary>
        /// 请求野外争夺活动信息
        /// </summary>
        IEnumerator ClientApplyActiveInfo(Coroutine coroutine, TeamCharacterProxy _this, ClientApplyActiveInfoInMessage msg);
        /// <summary>
        /// 清除战盟申请列表
        /// </summary>
        IEnumerator ClearAllianceApplyList(Coroutine coroutine, TeamCharacterProxy _this, ClearAllianceApplyListInMessage msg);
        IEnumerator OnConnected(Coroutine coroutine, TeamCharacterProxy _this, uint packId);
        IEnumerator OnLost(Coroutine coroutine, TeamCharacterProxy _this, uint packId);
        bool OnSyncRequested(TeamCharacterProxy _this, ulong characterId, uint syncId);
    }

    public class TeamCharacterProxy
    {
        public ulong CharacterId { get; private set; }
        public ulong ClientId { get; private set; }
        public TeamService Service { get; private set; }

        public TeamCharacterProxy(TeamService service, ulong characterId, ulong clientId)
        {
            CharacterId = characterId;
            ClientId = clientId;
            Service = service;
            mSyncCenter.ServiceType = ServiceType.Logic;
        }

        private DataSyncCenter mSyncCenter = new DataSyncCenter();
        public DataSyncCenter SyncCenter { get { return mSyncCenter; } }

        public void Sync()
        {
            Service.Sync(ClientId, mSyncCenter);
        }

        /// <summary>
        /// 组队信息通知
        /// </summary>
        public object NotifyTeamMessage(int type, ulong teamId, ulong characterId)
        {
            Service.NotifyTeamMessage(CharacterId, ClientId,type, teamId, characterId);
            return null;
        }
        /// <summary>
        /// 通知排队成功
        /// </summary>
        public object MatchingSuccess(int queueId)
        {
            Service.MatchingSuccess(CharacterId, ClientId,queueId);
            return null;
        }
        /// <summary>
        /// 通知排队移出
        /// </summary>
        public object NotifyMatchingData(QueueInfo queueInfo)
        {
            Service.NotifyMatchingData(CharacterId, ClientId,queueInfo);
            return null;
        }
        /// <summary>
        /// 匹配结果失败通知
        /// </summary>
        public object TeamServerMessage(int resultType, string args)
        {
            Service.TeamServerMessage(CharacterId, ClientId,resultType, args);
            return null;
        }
        /// <summary>
        /// 请求提示
        /// </summary>
        public object SyncTeamEnterFuben(int fubenId)
        {
            Service.SyncTeamEnterFuben(CharacterId, ClientId,fubenId);
            return null;
        }
        /// <summary>
        /// 队员希望邀请
        /// </summary>
        public object MemberWantInvite(int type, string memberName, int memberJob, int memberLevel, string toName, ulong toId)
        {
            Service.MemberWantInvite(CharacterId, ClientId,type, memberName, memberJob, memberLevel, toName, toId);
            return null;
        }
        /// <summary>
        /// 战盟信息通知 			type：0=name1邀请您加入name2的战盟
        /// </summary>
        public object SyncAllianceMessage(int type, string name1, int allianceId, string name2)
        {
            Service.SyncAllianceMessage(CharacterId, ClientId,type, name1, allianceId, name2);
            return null;
        }
        /// <summary>
        /// 通知玩家的排队状态
        /// </summary>
        public object SendMatchingMessage(int NowCount)
        {
            Service.SendMatchingMessage(CharacterId, ClientId,NowCount);
            return null;
        }
        /// <summary>
        /// 升级Buff
        /// CS int32  				UpgradeAllianceBuff(int32 allianceId,int32 buffId)=7077;
        /// 战盟信息通知 		type：0=name1邀请您加入name2的战盟 1=同意申请 2拒绝申请
        /// </summary>
        public object TeamSyncAllianceMessage(int type, string name1, int allianceId, string name2)
        {
            Service.TeamSyncAllianceMessage(CharacterId, ClientId,type, name1, allianceId, name2);
            return null;
        }
        /// <summary>
        /// 战盟信息改变  type = 0 说明战盟升级：param1等级 param2总资金
        /// </summary>
        public object ChangeAllianceData(int type, int param1, int param2)
        {
            Service.ChangeAllianceData(CharacterId, ClientId,type, param1, param2);
            return null;
        }
        /// <summary>
        /// 缓存许愿池的团购信息
        /// </summary>
        public object SendGroupMessage(StringArray contents)
        {
            Service.SendGroupMessage(CharacterId, ClientId,contents);
            return null;
        }
        /// <summary>
        /// 通知组队进入信息
        /// </summary>
        public object NotifyQueueMessage(TeamCharacterMessage tcm)
        {
            Service.NotifyQueueMessage(CharacterId, ClientId,tcm);
            return null;
        }
        /// <summary>
        /// 通知某人进入结果
        /// </summary>
        public object NotifyQueueResult(ulong characterId, int result)
        {
            Service.NotifyQueueResult(CharacterId, ClientId,characterId, result);
            return null;
        }
        /// <summary>
        /// 服务器主动推送城主信息
        /// </summary>
        public object NotifyAllianceWarOccupantData(uint __serverId__, AllianceWarOccupantData data)
        {
            Service.NotifyAllianceWarOccupantData(__serverId__, data);
            return null;
        }
        /// <summary>
        /// 服务器主动推送进攻方信息
        /// </summary>
        public object NotifyAllianceWarChallengerData(uint __serverId__, AllianceWarChallengerData data)
        {
            Service.NotifyAllianceWarChallengerData(__serverId__, data);
            return null;
        }
        /// <summary>
        /// 聊天广播
        /// </summary>
        public object SyncAllianceChatMessage(int chatType, ulong characterId, string characterName, ChatMessageContent content)
        {
            Service.SyncAllianceChatMessage(CharacterId, ClientId,chatType, characterId, characterName, content);
            return null;
        }
        /// <summary>
        /// 队伍：自动匹配  自动匹配结束，通知client
        /// </summary>
        public object AutoMatchEnd(int MathchState)
        {
            Service.AutoMatchEnd(CharacterId, ClientId,MathchState);
            return null;
        }
        /// <summary>
        /// 队伍：自动匹配  自动匹配 状态发生变化
        /// </summary>
        public object AutoMatchStateChange(int MathchState)
        {
            Service.AutoMatchStateChange(CharacterId, ClientId,MathchState);
            return null;
        }
        /// <summary>
        /// </summary>
        public object NotifyChangetTeamTarget(int type, int targetID, int levelMini, int levelMax, int readTableId)
        {
            Service.NotifyChangetTeamTarget(CharacterId, ClientId,type, targetID, levelMini, levelMax, readTableId);
            return null;
        }
        /// <summary>
        /// 队伍：同步队员sceneGuid
        /// </summary>
        public object NotifyTeamScenGuid(ulong characterId, ulong changeCharacterId, ulong sceneGuid)
        {
            Service.NotifyTeamScenGuid(CharacterId, ClientId,characterId, changeCharacterId, sceneGuid);
            return null;
        }
        /// <summary>
        /// </summary>
        public object TeamApplyListSync(ulong characterId, bool state)
        {
            Service.TeamApplyListSync(CharacterId, ClientId,characterId, state);
            return null;
        }
        /// <summary>
        /// </summary>
        public object SCSyncTeamMemberLevelChange(ulong characterId, ulong changeCharacterId, int reborn, int level)
        {
            Service.SCSyncTeamMemberLevelChange(CharacterId, ClientId,characterId, changeCharacterId, reborn, level);
            return null;
        }
        /// <summary>
        /// </summary>
        public object NoticeTeamMemberError(string msgInfo)
        {
            Service.NoticeTeamMemberError(CharacterId, ClientId,msgInfo);
            return null;
        }
        /// <summary>
        /// 通知全服，战旗活动结算
        /// </summary>
        public object NotifyFieldFinal(uint __serverId__, MsgWarFlagInfoList msg)
        {
            Service.NotifyFieldFinal(__serverId__, msg);
            return null;
        }
        /// <summary>
        /// </summary>
        public object SCNotifyAllianceActiveTask(DBActiveTask msg)
        {
            Service.SCNotifyAllianceActiveTask(CharacterId, ClientId,msg);
            return null;
        }
        /// <summary>
        /// </summary>
        public object SCNotifyPlayerExitAlliance(ulong exitplayerid, string name, bool bChange, ulong leaderId, string leaderName)
        {
            Service.SCNotifyPlayerExitAlliance(CharacterId, ClientId,exitplayerid, name, bChange, leaderId, leaderName);
            return null;
        }
        /// <summary>
        /// </summary>
        public object NodifyTeamMemberPlayerNameChange(ulong characterId, ulong changeCharacterId, string changeName)
        {
            Service.NodifyTeamMemberPlayerNameChange(CharacterId, ClientId,characterId, changeCharacterId, changeName);
            return null;
        }
        public object Wait(Coroutine coroutine, TimeSpan timeSpan)
        {
            return Service.Wait(coroutine, timeSpan);
        }
    }
}
