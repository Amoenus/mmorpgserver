// Generated by the rpc compiler.  DO NOT EDIT!
using System;
using System.Collections;
using System.IO;
using Scorpion;
using System.Collections.Generic;
using ProtoBuf;
using DataContract;

#pragma warning disable 0162,0108
namespace ActivityServerService
{

    public interface IActivityService
    {
        /// <summary>
        /// </summary>
        IEnumerator PrepareDataForEnterGame(Coroutine coroutine, ActivityService _this, PrepareDataForEnterGameInMessage msg);
        /// <summary>
        /// </summary>
        IEnumerator PrepareDataForCreateCharacter(Coroutine coroutine, ActivityService _this, PrepareDataForCreateCharacterInMessage msg);
        /// <summary>
        /// </summary>
        IEnumerator PrepareDataForCommonUse(Coroutine coroutine, ActivityService _this, PrepareDataForCommonUseInMessage msg);
        /// <summary>
        /// </summary>
        IEnumerator PrepareDataForLogout(Coroutine coroutine, ActivityService _this, PrepareDataForLogoutInMessage msg);
        /// <summary>
        /// 广播表格重载
        /// </summary>
        IEnumerator ServerGMCommand(Coroutine coroutine, ActivityService _this, ServerGMCommandInMessage msg);
        /// <summary>
        /// 检查客户端是否已经连接到对应服务器
        /// </summary>
        IEnumerator CheckConnected(Coroutine coroutine, ActivityService _this, CheckConnectedInMessage msg);
        /// <summary>
        /// 检查相应客户端连接是否已经断开
        /// </summary>
        IEnumerator CheckLost(Coroutine coroutine, ActivityService _this, CheckLostInMessage msg);
        /// <summary>
        /// 检查相应客户端连接是否已经断开
        /// </summary>
        IEnumerator QueryCreateMonsterData(Coroutine coroutine, ActivityService _this, QueryCreateMonsterDataInMessage msg);
        /// <summary>
        /// 通知Activity，某只怪物的伤害列表
        /// </summary>
        IEnumerator NotifyDamageList(Coroutine coroutine, ActivityService _this, NotifyDamageListInMessage msg);
        /// <summary>
        /// 查询服务器状态
        /// </summary>
        IEnumerator QueryStatus(Coroutine coroutine, ActivityService _this, QueryStatusInMessage msg);
        /// <summary>
        /// 查询服务器状态，是否可以进入
        /// </summary>
        IEnumerator ReadyToEnter(Coroutine coroutine, ActivityService _this, ReadyToEnterInMessage msg);
        /// <summary>
        /// 更新服务器
        /// </summary>
        IEnumerator UpdateServer(Coroutine coroutine, ActivityService _this, UpdateServerInMessage msg);
        /// <summary>
        /// 活动是否可以进入
        /// </summary>
        IEnumerator SSApplyActivityState(Coroutine coroutine, ActivityService _this, SSApplyActivityStateInMessage msg);
        /// <summary>
        /// 提升炮台血量
        /// </summary>
        IEnumerator SSApplyPromoteHP(Coroutine coroutine, ActivityService _this, SSApplyPromoteHPInMessage msg);
        /// <summary>
        /// 提升炮台技能等级
        /// </summary>
        IEnumerator SSApplyPromoteSkill(Coroutine coroutine, ActivityService _this, SSApplyPromoteSkillInMessage msg);
        /// <summary>
        /// 请求报名活动
        /// </summary>
        IEnumerator SSApplyJoinActivity(Coroutine coroutine, ActivityService _this, SSApplyJoinActivityInMessage msg);
        /// <summary>
        /// 同步灭世活动的数据
        /// </summary>
        IEnumerator SSSyncMieShiData(Coroutine coroutine, ActivityService _this, SSSyncMieShiDataInMessage msg);
        /// <summary>
        /// 获取炮台贡献百分比列表
        /// </summary>
        IEnumerator SSApplyContributeRate(Coroutine coroutine, ActivityService _this, SSApplyContributeRateInMessage msg);
        /// <summary>
        /// 保存活动的结果
        /// </summary>
        IEnumerator SSSaveActivityResult(Coroutine coroutine, ActivityService _this, SSSaveActivityResultInMessage msg);
        /// <summary>
        /// 获取活动状态列表
        /// </summary>
        IEnumerator SSApplyActiResultList(Coroutine coroutine, ActivityService _this, SSApplyActiResultListInMessage msg);
        /// <summary>
        /// 同步炮台的guid
        /// 返回值活动数据
        /// </summary>
        IEnumerator SSSetAndGetActivityData(Coroutine coroutine, ActivityService _this, SSSetAndGetActivityDataInMessage msg);
        /// <summary>
        /// 灭世活动全部玩家退出
        /// </summary>
        IEnumerator SyncActivityAllPlayerExit(Coroutine coroutine, ActivityService _this, SyncActivityAllPlayerExitInMessage msg);
        /// <summary>
        /// 古域战场同步死亡boss
        /// </summary>
        IEnumerator SSAcientBattleSceneRequest(Coroutine coroutine, ActivityService _this, SSAcientBattleSceneRequestInMessage msg);
        /// <summary>
        /// 请求灭世活动是否可进入
        /// </summary>
        IEnumerator SSApplyMieShiCanIn(Coroutine coroutine, ActivityService _this, SSApplyMieShiCanInInMessage msg);
        /// <summary>
        /// 同步灭世Boss宝箱可以领取
        /// </summary>
        IEnumerator SSSyncMieShiBoxCanPickUp(Coroutine coroutine, ActivityService _this, SSSyncMieShiBoxCanPickUpInMessage msg);
        /// <summary>
        /// 请求领取Boss宝箱
        /// </summary>
        IEnumerator SSApplyPickUpBox(Coroutine coroutine, ActivityService _this, SSApplyPickUpBoxInMessage msg);
        /// <summary>
        /// 请求领取奖励
        /// </summary>
        IEnumerator SSApplyPortraitAward(Coroutine coroutine, ActivityService _this, SSApplyPortraitAwardInMessage msg);
        /// <summary>
        /// 保存炮台被摧毁的数据
        /// </summary>
        IEnumerator SSSaveBatteryDestroy(Coroutine coroutine, ActivityService _this, SSSaveBatteryDestroyInMessage msg);
        /// <summary>
        ///  请求上次灭世结果
        /// </summary>
        IEnumerator SSApplyLastResult(Coroutine coroutine, ActivityService _this, SSApplyLastResultInMessage msg);
        /// <summary>
        /// 通知某个角色开始 链接各游戏服务器了
        /// </summary>
        IEnumerator SSNotifyCharacterOnConnet(Coroutine coroutine, ActivityService _this, SSNotifyCharacterOnConnetInMessage msg);
        /// <summary>
        /// 通知服务器玩家掉线了
        /// </summary>
        IEnumerator BSNotifyCharacterOnLost(Coroutine coroutine, ActivityService _this, BSNotifyCharacterOnLostInMessage msg);
        /// <summary>
        /// 请求灭世炮台提升数量
        /// </summary>
        IEnumerator SSAskMieshiTowerUpTimes(Coroutine coroutine, ActivityService _this, SSAskMieshiTowerUpTimesInMessage msg);
        /// <summary>
        /// 请求领取炮台升级奖励
        /// </summary>
        IEnumerator SSAskMieshiTowerReward(Coroutine coroutine, ActivityService _this, SSAskMieshiTowerRewardInMessage msg);
        /// <summary>
        /// 请求Boss之家Boss状态数据
        /// </summary>
        IEnumerator BossHomeSceneRequest(Coroutine coroutine, ActivityService _this, BossHomeSceneRequestInMessage msg);
        /// <summary>
        /// 请求珍宝商店数据
        /// </summary>
        IEnumerator SSGetTreasureShopItems(Coroutine coroutine, ActivityService _this, SSGetTreasureShopItemsInMessage msg);
        /// <summary>
        /// 请求珍宝商店物品数量
        /// </summary>
        IEnumerator SSGetTreasureShopItemCount(Coroutine coroutine, ActivityService _this, SSGetTreasureShopItemCountInMessage msg);
        /// <summary>
        /// 消耗珍宝商店物品
        /// </summary>
        IEnumerator SSConsumeTreasureShopItem(Coroutine coroutine, ActivityService _this, SSConsumeTreasureShopItemInMessage msg);
        /// <summary>
        /// 请求黑市商店数据
        /// </summary>
        IEnumerator SSGetBlackStoreItems(Coroutine coroutine, ActivityService _this, SSGetBlackStoreItemsInMessage msg);
        /// <summary>
        /// </summary>
        IEnumerator SSSyncChickenScore(Coroutine coroutine, ActivityService _this, SSSyncChickenScoreInMessage msg);
        IEnumerator OnServerStart(Coroutine coroutine, ActivityService _this);
        IEnumerator OnServerStop(Coroutine coroutine, ActivityService _this);
    }

    public abstract class ActivityService : ServerAgentBase
    {

        protected static IActivityService mImpl;
        public static IActivityCharacterProxy mProxyImpl;
        public void SetServiceImpl(IActivityService impl)
        {
            mImpl = impl;
        }
        public void SetProxyImpl(IActivityCharacterProxy proxyImpl)
        {
            mProxyImpl = proxyImpl;
        }
        public abstract ActivityCharacterProxy NewCharacterIn(ulong characterId, ulong clientId);
        public Dictionary<ulong, ActivityCharacterProxy> Proxys = new Dictionary<ulong, ActivityCharacterProxy>();
        protected override object GetRequestData(uint p, byte[] list)
        {
            switch(p)
            {
            case 4000:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Activity_PrepareDataForEnterGame_ARG_int32_serverId__>(ms);
                }
                break;
            case 4001:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Activity_PrepareDataForCreateCharacter_ARG_int32_type__>(ms);
                }
                break;
            case 4002:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Activity_PrepareDataForCommonUse_ARG_uint32_placeholder__>(ms);
                }
                break;
            case 4003:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Activity_PrepareDataForLogout_ARG_uint32_placeholder__>(ms);
                }
                break;
            case 4004:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Activity_ServerGMCommand_ARG_string_cmd_string_param__>(ms);
                }
                break;
            case 4030:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Activity_SBGetAllOnlineCharacterInServer_ARG_int32_serverId__>(ms);
                }
                break;
            case 4031:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Activity_CheckConnected_ARG_uint64_characterId__>(ms);
                }
                break;
            case 4032:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Activity_CheckLost_ARG_uint64_characterId__>(ms);
                }
                break;
            case 4033:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Activity_QueryCreateMonsterData_ARG_int32_serverId_int32_sceneId__>(ms);
                }
                break;
            case 4034:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Activity_NotifyDamageList_ARG_int32_serverId_uint64_sceneGuid_DamageList_list__>(ms);
                }
                break;
            case 4035:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Activity_QueryStatus_ARG_uint32_placeholder__>(ms);
                }
                break;
            case 4040:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Activity_QueryBrokerStatus_ARG_uint32_placeholder__>(ms);
                }
                break;
            case 4041:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Activity_ReadyToEnter_ARG_int32_placeholder__>(ms);
                }
                break;
            case 4042:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Activity_UpdateServer_ARG_int32_placeholder__>(ms);
                }
                break;
            case 4043:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Activity_SSApplyActivityState_ARG_int32_activityId_int32_serverId__>(ms);
                }
                break;
            case 4044:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Activity_ApplyActivityState_ARG_int32_serverId__>(ms);
                }
                break;
            case 4045:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Activity_NotifyActivityState_ARG_int32_activityId_int32_state__>(ms);
                }
                break;
            case 4046:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Activity_ApplyOrderSerial_ARG_ApplyOrderMessage_msg__>(ms);
                }
                break;
            case 4047:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Activity_NotifyTableChange_ARG_int32_flag__>(ms);
                }
                break;
            case 4100:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Activity_ApplyMieShiData_ARG_int32_serverId__>(ms);
                }
                break;
            case 4099:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Activity_ApplyMieshiHeroLogData_ARG_int32_serverId__>(ms);
                }
                break;
            case 4101:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Activity_ApplyBatteryData_ARG_int32_serverId_int32_activityId__>(ms);
                }
                break;
            case 4102:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Activity_SSApplyPromoteHP_ARG_int32_serverId_int32_activityId_int32_batteryId_int32_promoteType_uint64_characterId_string_name__>(ms);
                }
                break;
            case 4103:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Activity_SSApplyPromoteSkill_ARG_int32_serverId_int32_activityId_int32_batteryId_int32_promoteType_uint64_characterId_string_name__>(ms);
                }
                break;
            case 4104:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Activity_ApplyContriRankingData_ARG_int32_serverId_int32_activityId__>(ms);
                }
                break;
            case 4105:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Activity_ApplyPointRankingData_ARG_int32_serverId_int32_activityId__>(ms);
                }
                break;
            case 4106:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Activity_SSApplyJoinActivity_ARG_int32_serverId_int32_activityId__>(ms);
                }
                break;
            case 4107:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Activity_NotifyBatteryData_ARG_int32_activityId_ActivityBatteryOne_battery__>(ms);
                }
                break;
            case 4108:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Activity_NotifyMieShiActivityState_ARG_int32_activityId_int32_state__>(ms);
                }
                break;
            case 4115:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Activity_NotifyMieShiActivityInfo_ARG_CommonActivityData_msg__>(ms);
                }
                break;
            case 4109:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Activity_NotifyPlayerCanIn_ARG_int32_fubenId_int64_canInEndTime__>(ms);
                }
                break;
            case 4110:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Activity_SSSyncMieShiData_ARG_int32_serverId_int32_activityId_MieShiSceneData_list__>(ms);
                }
                break;
            case 4111:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Activity_SSApplyContributeRate_ARG_int32_serverId_int32_activityId__>(ms);
                }
                break;
            case 4112:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Activity_SSSaveActivityResult_ARG_int32_serverId_int32_activityId_int32_result__>(ms);
                }
                break;
            case 4113:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Activity_SSApplyActiResultList_ARG_int32_serverId__>(ms);
                }
                break;
            case 4114:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Activity_SSSetAndGetActivityData_ARG_uint64_sceneGuid_int32_serverId_int32_activityId_MieShiBatteryGuid_guidList__>(ms);
                }
                break;
            case 4116:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Activity_SyncActivityAllPlayerExit_ARG_int32_serverId_int32_activityId__>(ms);
                }
                break;
            case 4117:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Activity_SSAcientBattleSceneRequest_ARG_int32_serverId_int32_sceneid_int32_npcId_int32_isDie__>(ms);
                }
                break;
            case 4118:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Activity_ApplyAcientBattle_ARG_int32_serverId__>(ms);
                }
                break;
            case 4015:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Activity_SSApplyMieShiCanIn_ARG_int32_serverId_int32_activityId__>(ms);
                }
                break;
            case 4016:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Activity_SSSyncMieShiBoxCanPickUp_ARG_int32_serverId_int32_activityId_int32_npcId__>(ms);
                }
                break;
            case 4017:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Activity_SSApplyPickUpBox_ARG_int32_serverId_int32_activityId_int32_npcId__>(ms);
                }
                break;
            case 4018:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Activity_ApplyPortraitData_ARG_int32_serverId__>(ms);
                }
                break;
            case 4019:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Activity_SSApplyPortraitAward_ARG_int32_serverId__>(ms);
                }
                break;
            case 4020:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Activity_SSSaveBatteryDestroy_ARG_int32_serverId_int32_activityId_uint64_batteryGuid__>(ms);
                }
                break;
            case 4021:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Activity_SSApplyLastResult_ARG_int32_serverId__>(ms);
                }
                break;
            case 4500:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Activity_SBCleanClientCharacterData_ARG_uint64_clientId_uint64_characterId__>(ms);
                }
                break;
            case 4501:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Activity_SSNotifyCharacterOnConnet_ARG_uint64_clientId_uint64_characterId__>(ms);
                }
                break;
            case 4503:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Activity_BSNotifyCharacterOnLost_ARG_uint64_clientId_uint64_characterId__>(ms);
                }
                break;
            case 4022:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Activity_SSAskMieshiTowerUpTimes_ARG_int32_serverId_int32_activityId_uint64_characterId__>(ms);
                }
                break;
            case 4023:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Activity_SSAskMieshiTowerReward_ARG_int32_serverId_int32_activityId_uint64_characterId_int32_idx__>(ms);
                }
                break;
            case 4024:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Activity_BossHomeSceneRequest_ARG_int32_serverId_int32_sceneid_int32_npcId_int32_isDie__>(ms);
                }
                break;
            case 4025:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Activity_ApplyBossHome_ARG_int32_serverId__>(ms);
                }
                break;
            case 4026:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Activity_SSGetTreasureShopItems_ARG_int32_serverId__>(ms);
                }
                break;
            case 4027:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Activity_SSGetTreasureShopItemCount_ARG_int32_serverId_int32_storeId__>(ms);
                }
                break;
            case 4028:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Activity_SSConsumeTreasureShopItem_ARG_int32_serverId_int32_storeId_int32_consumeCount__>(ms);
                }
                break;
            case 4029:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Activity_SSGetBlackStoreItems_ARG_int32_serverId__>(ms);
                }
                break;
            case 4505:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Activity_SSSyncChickenScore_ARG_ChickenRankData_rankData__>(ms);
                }
                break;
            case 4506:
                using (var ms = new MemoryStream(list, false))
                {
                    return Serializer.Deserialize<__RPC_Activity_ApplyChickenRankData_ARG_uint64_characterId__>(ms);
                }
                break;
            default:
                break;
            }

            return null;
        }

        public override IEnumerator OnClientConnected(Coroutine coroutine, string target, ulong clientId, ulong characterId, uint packId)
        {
            if (target != "client")
            {
                return null;
            }

            var proxy = NewCharacterIn(characterId, clientId);
            if (proxy != null)
            {
                Proxys[characterId] = proxy;
                return mProxyImpl.OnConnected(coroutine, proxy, packId);
            }
            return null;
        }
        public override IEnumerator OnClientLost(Coroutine coroutine, string target, ulong clientId, ulong characterId, uint packId)
        {
            if (target != "client")
            {
                yield break;
            }
            ActivityCharacterProxy proxy = null;
            if (Proxys.TryGetValue(characterId, out proxy))
            {
                var co = CoroutineFactory.NewSubroutine(mProxyImpl.OnLost, coroutine, proxy, packId);
                if (co.MoveNext())
                {
                    yield return co;
                }
                Proxys.Remove(characterId);
            }
        }
        public void CharacterId2ClientId(IEnumerable<ulong> ids, List<ulong> known, List<ulong> unknown)
        {
            foreach (var id in ids)
            {
                ActivityCharacterProxy proxy;
                if (Proxys.TryGetValue(id, out proxy))
                {
                    known.Add(((ActivityCharacterProxy)proxy).ClientId);
                }
                else
                {
                    unknown.Add(id);
                }
            }
        }
        /// <summary>
        /// 获取活动状态
        /// </summary>
        public IEnumerator ApplyActivityState(Coroutine coroutine, ApplyActivityStateInMessage msg)
        {
            ActivityCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.ApplyActivityState(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 通知全服，某个活动的状态
        /// </summary>
        public object NotifyActivityState(uint __serverId__, int activityId, int state)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 4045;
            desc.PacketId = __serverId__;

            var __data__ = new __RPC_Activity_NotifyActivityState_ARG_int32_activityId_int32_state__();
            __data__.ActivityId=activityId;
            __data__.State=state;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            desc.Type = (int)MessageType.SCServer;
            desc.ServiceType = (int) ServiceType.Activity;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// 请求订单号，生成订单号并存到数据库等待支付结果
        /// </summary>
        public IEnumerator ApplyOrderSerial(Coroutine coroutine, ApplyOrderSerialInMessage msg)
        {
            ActivityCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.ApplyOrderSerial(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 通知所有在线客户端某些表格刷新了
        /// </summary>
        public object NotifyTableChange(int flag)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 4047;
            desc.PacketId = 0;

            var __data__ = new __RPC_Activity_NotifyTableChange_ARG_int32_flag__();
            __data__.Flag=flag;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            desc.Type = (int)MessageType.SCAll;
            desc.ServiceType = (int) ServiceType.Activity;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// 请求灭世活动数据
        /// </summary>
        public IEnumerator ApplyMieShiData(Coroutine coroutine, ApplyMieShiDataInMessage msg)
        {
            ActivityCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.ApplyMieShiData(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// </summary>
        public IEnumerator ApplyMieshiHeroLogData(Coroutine coroutine, ApplyMieshiHeroLogDataInMessage msg)
        {
            ActivityCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.ApplyMieshiHeroLogData(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 请求炮台信息
        /// </summary>
        public IEnumerator ApplyBatteryData(Coroutine coroutine, ApplyBatteryDataInMessage msg)
        {
            ActivityCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.ApplyBatteryData(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 请求贡献排行榜
        /// </summary>
        public IEnumerator ApplyContriRankingData(Coroutine coroutine, ApplyContriRankingDataInMessage msg)
        {
            ActivityCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.ApplyContriRankingData(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 请求积分排行榜
        /// </summary>
        public IEnumerator ApplyPointRankingData(Coroutine coroutine, ApplyPointRankingDataInMessage msg)
        {
            ActivityCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.ApplyPointRankingData(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 通知全服，某个活动某个炮台的数据
        /// </summary>
        public object NotifyBatteryData(uint __serverId__, int activityId, ActivityBatteryOne battery)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 4107;
            desc.PacketId = __serverId__;

            var __data__ = new __RPC_Activity_NotifyBatteryData_ARG_int32_activityId_ActivityBatteryOne_battery__();
            __data__.ActivityId=activityId;
            __data__.Battery=battery;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            desc.Type = (int)MessageType.SCServer;
            desc.ServiceType = (int) ServiceType.Activity;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// 通知全服灭世活动的状态
        /// </summary>
        public object NotifyMieShiActivityState(uint __serverId__, int activityId, int state)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 4108;
            desc.PacketId = __serverId__;

            var __data__ = new __RPC_Activity_NotifyMieShiActivityState_ARG_int32_activityId_int32_state__();
            __data__.ActivityId=activityId;
            __data__.State=state;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            desc.Type = (int)MessageType.SCServer;
            desc.ServiceType = (int) ServiceType.Activity;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// </summary>
        public object NotifyMieShiActivityInfo(uint __serverId__, CommonActivityData msg)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 4115;
            desc.PacketId = __serverId__;

            var __data__ = new __RPC_Activity_NotifyMieShiActivityInfo_ARG_CommonActivityData_msg__();
            __data__.Msg=msg;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            desc.Type = (int)MessageType.SCServer;
            desc.ServiceType = (int) ServiceType.Activity;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// 通知客户端某个炮台数据更新
        /// SC ActivityBatteryOne         NotifyBatteryDataOne(int32 activityId, ActivityBatteryOne battery) = 4108;
        /// 通知报名的玩家可以进入
        /// </summary>
        public object NotifyPlayerCanIn(IEnumerable<ulong> __characterIds__, int fubenId, long canInEndTime)
        {
            var desc = new ServiceDesc();
            desc.FuncId = 4109;
            desc.PacketId = 0;

            var __data__ = new __RPC_Activity_NotifyPlayerCanIn_ARG_int32_fubenId_int64_canInEndTime__();
            __data__.FubenId=fubenId;
            __data__.CanInEndTime=canInEndTime;

            var __s__ = MemoryStream;
            Serializer.Serialize(__s__, __data__);

            var routerDesc = new ServiceDesc();
            routerDesc.FuncId = 4109;
            CharacterId2ClientId(__characterIds__, desc.Routing, routerDesc.Routing);
            if(desc.Routing.Count == 0 && routerDesc.Routing.Count == 0)
                return null;
            if(routerDesc.Routing.Count > 0)
            {
                routerDesc.PacketId = 1;
                routerDesc.Type = (int)MessageType.SCList;
                routerDesc.ServiceType = (int) ServiceType.Activity;
                routerDesc.Data = __s__.ToArray();
                Send(routerDesc);
            }
            desc.Type = (int)MessageType.SCList;
            desc.ServiceType = (int) ServiceType.Activity;
            desc.Data = __s__.ToArray();
            Utility.FunctionCallLogger.Info("Func [{0}] Service [{1}] Type [{2}] called by server.", desc.FuncId, desc.ServiceType, desc.Type);
            Send(desc);

            return null;
        }
        /// <summary>
        /// 获取古域战场死亡数据
        /// </summary>
        public IEnumerator ApplyAcientBattle(Coroutine coroutine, ApplyAcientBattleInMessage msg)
        {
            ActivityCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.ApplyAcientBattle(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 请求雕像数据
        /// </summary>
        public IEnumerator ApplyPortraitData(Coroutine coroutine, ApplyPortraitDataInMessage msg)
        {
            ActivityCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.ApplyPortraitData(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// 获取Boss之家死亡数据
        /// </summary>
        public IEnumerator ApplyBossHome(Coroutine coroutine, ApplyBossHomeInMessage msg)
        {
            ActivityCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.ApplyBossHome(coroutine, proxy, msg);
            }
            return null;
        }
        /// <summary>
        /// </summary>
        public IEnumerator ApplyChickenRankData(Coroutine coroutine, ApplyChickenRankDataInMessage msg)
        {
            ActivityCharacterProxy proxy;
            if (Proxys.TryGetValue(msg.CharacterId, out proxy))
            {
                return mProxyImpl.ApplyChickenRankData(coroutine, proxy, msg);
            }
            return null;
        }

        protected override void DispatchMessage(MessageRecievedEvent evt)
        {
            switch (evt.Message.FuncId)
            {
                case 4000:
                {
                    var msg = new PrepareDataForEnterGameInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.PrepareDataForEnterGame(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 4001:
                {
                    var msg = new PrepareDataForCreateCharacterInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.PrepareDataForCreateCharacter(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 4002:
                {
                    var msg = new PrepareDataForCommonUseInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.PrepareDataForCommonUse(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 4003:
                {
                    var msg = new PrepareDataForLogoutInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.PrepareDataForLogout(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 4004:
                {
                    var msg = new ServerGMCommandInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.ServerGMCommand(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 4031:
                {
                    var msg = new CheckConnectedInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.CheckConnected(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 4032:
                {
                    var msg = new CheckLostInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.CheckLost(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 4033:
                {
                    var msg = new QueryCreateMonsterDataInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.QueryCreateMonsterData(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 4034:
                {
                    var msg = new NotifyDamageListInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.NotifyDamageList(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 4035:
                {
                    var msg = new QueryStatusInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.QueryStatus(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 4041:
                {
                    var msg = new ReadyToEnterInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.ReadyToEnter(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 4042:
                {
                    var msg = new UpdateServerInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.UpdateServer(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 4043:
                {
                    var msg = new SSApplyActivityStateInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.SSApplyActivityState(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 4044:
                {
                    var msg = new ApplyActivityStateInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => ApplyActivityState(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 4046:
                {
                    var msg = new ApplyOrderSerialInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => ApplyOrderSerial(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 4100:
                {
                    var msg = new ApplyMieShiDataInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => ApplyMieShiData(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 4099:
                {
                    var msg = new ApplyMieshiHeroLogDataInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => ApplyMieshiHeroLogData(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 4101:
                {
                    var msg = new ApplyBatteryDataInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => ApplyBatteryData(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 4102:
                {
                    var msg = new SSApplyPromoteHPInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.SSApplyPromoteHP(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 4103:
                {
                    var msg = new SSApplyPromoteSkillInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.SSApplyPromoteSkill(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 4104:
                {
                    var msg = new ApplyContriRankingDataInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => ApplyContriRankingData(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 4105:
                {
                    var msg = new ApplyPointRankingDataInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => ApplyPointRankingData(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 4106:
                {
                    var msg = new SSApplyJoinActivityInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.SSApplyJoinActivity(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 4110:
                {
                    var msg = new SSSyncMieShiDataInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.SSSyncMieShiData(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 4111:
                {
                    var msg = new SSApplyContributeRateInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.SSApplyContributeRate(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 4112:
                {
                    var msg = new SSSaveActivityResultInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.SSSaveActivityResult(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 4113:
                {
                    var msg = new SSApplyActiResultListInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.SSApplyActiResultList(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 4114:
                {
                    var msg = new SSSetAndGetActivityDataInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.SSSetAndGetActivityData(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 4116:
                {
                    var msg = new SyncActivityAllPlayerExitInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.SyncActivityAllPlayerExit(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 4117:
                {
                    var msg = new SSAcientBattleSceneRequestInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.SSAcientBattleSceneRequest(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 4118:
                {
                    var msg = new ApplyAcientBattleInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => ApplyAcientBattle(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 4015:
                {
                    var msg = new SSApplyMieShiCanInInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.SSApplyMieShiCanIn(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 4016:
                {
                    var msg = new SSSyncMieShiBoxCanPickUpInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.SSSyncMieShiBoxCanPickUp(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 4017:
                {
                    var msg = new SSApplyPickUpBoxInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.SSApplyPickUpBox(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 4018:
                {
                    var msg = new ApplyPortraitDataInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => ApplyPortraitData(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 4019:
                {
                    var msg = new SSApplyPortraitAwardInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.SSApplyPortraitAward(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 4020:
                {
                    var msg = new SSSaveBatteryDestroyInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.SSSaveBatteryDestroy(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 4021:
                {
                    var msg = new SSApplyLastResultInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.SSApplyLastResult(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 4501:
                {
                    var msg = new SSNotifyCharacterOnConnetInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.SSNotifyCharacterOnConnet(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 4503:
                {
                    var msg = new BSNotifyCharacterOnLostInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.BSNotifyCharacterOnLost(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 4022:
                {
                    var msg = new SSAskMieshiTowerUpTimesInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.SSAskMieshiTowerUpTimes(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 4023:
                {
                    var msg = new SSAskMieshiTowerRewardInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.SSAskMieshiTowerReward(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 4024:
                {
                    var msg = new BossHomeSceneRequestInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.BossHomeSceneRequest(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 4025:
                {
                    var msg = new ApplyBossHomeInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => ApplyBossHome(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 4026:
                {
                    var msg = new SSGetTreasureShopItemsInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.SSGetTreasureShopItems(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 4027:
                {
                    var msg = new SSGetTreasureShopItemCountInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.SSGetTreasureShopItemCount(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 4028:
                {
                    var msg = new SSConsumeTreasureShopItemInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.SSConsumeTreasureShopItem(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 4029:
                {
                    var msg = new SSGetBlackStoreItemsInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.SSGetBlackStoreItems(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 4505:
                {
                    var msg = new SSSyncChickenScoreInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => mImpl.SSSyncChickenScore(item, this, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                case 4506:
                {
                    var msg = new ApplyChickenRankDataInMessage(evt.Sender, evt.Message, evt.Data);
                    msg.Coroutine = new Coroutine(item => ApplyChickenRankData(item, msg));
                    msg.Coroutine.MoveNext();
                }
                    break;
                default:
                    break;
            }
        }
    }
    public class PrepareDataForEnterGameInMessage : InMessage
    {
        public PrepareDataForEnterGameInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Activity_PrepareDataForEnterGame_ARG_int32_serverId__;

            mResponse = new __RPC_Activity_PrepareDataForEnterGame_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Activity_PrepareDataForEnterGame_ARG_int32_serverId__ Request { get; private set; }

        private __RPC_Activity_PrepareDataForEnterGame_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public PrepareDataForEnterGameInMessage Clone()
        { 
            return new PrepareDataForEnterGameInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class PrepareDataForCreateCharacterInMessage : InMessage
    {
        public PrepareDataForCreateCharacterInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Activity_PrepareDataForCreateCharacter_ARG_int32_type__;

            mResponse = new __RPC_Activity_PrepareDataForCreateCharacter_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Activity_PrepareDataForCreateCharacter_ARG_int32_type__ Request { get; private set; }

        private __RPC_Activity_PrepareDataForCreateCharacter_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public PrepareDataForCreateCharacterInMessage Clone()
        { 
            return new PrepareDataForCreateCharacterInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class PrepareDataForCommonUseInMessage : InMessage
    {
        public PrepareDataForCommonUseInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Activity_PrepareDataForCommonUse_ARG_uint32_placeholder__;

            mResponse = new __RPC_Activity_PrepareDataForCommonUse_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Activity_PrepareDataForCommonUse_ARG_uint32_placeholder__ Request { get; private set; }

        private __RPC_Activity_PrepareDataForCommonUse_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public PrepareDataForCommonUseInMessage Clone()
        { 
            return new PrepareDataForCommonUseInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class PrepareDataForLogoutInMessage : InMessage
    {
        public PrepareDataForLogoutInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Activity_PrepareDataForLogout_ARG_uint32_placeholder__;

            mResponse = new __RPC_Activity_PrepareDataForLogout_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Activity_PrepareDataForLogout_ARG_uint32_placeholder__ Request { get; private set; }

        private __RPC_Activity_PrepareDataForLogout_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public PrepareDataForLogoutInMessage Clone()
        { 
            return new PrepareDataForLogoutInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class ServerGMCommandInMessage : InMessage
    {
        public ServerGMCommandInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Activity_ServerGMCommand_ARG_string_cmd_string_param__;

        }


        public __RPC_Activity_ServerGMCommand_ARG_string_cmd_string_param__ Request { get; private set; }

        public ServerGMCommandInMessage Clone()
        { 
            return new ServerGMCommandInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class SBGetAllOnlineCharacterInServerInMessage : InMessage
    {
        public SBGetAllOnlineCharacterInServerInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Activity_SBGetAllOnlineCharacterInServer_ARG_int32_serverId__;

            mResponse = new __RPC_Activity_SBGetAllOnlineCharacterInServer_RET_Uint64Array__();
            mResponse.ReturnValue = new Uint64Array();
        }


        public __RPC_Activity_SBGetAllOnlineCharacterInServer_ARG_int32_serverId__ Request { get; private set; }

        private __RPC_Activity_SBGetAllOnlineCharacterInServer_RET_Uint64Array__ mResponse;
        public Uint64Array Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public SBGetAllOnlineCharacterInServerInMessage Clone()
        { 
            return new SBGetAllOnlineCharacterInServerInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class CheckConnectedInMessage : InMessage
    {
        public CheckConnectedInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Activity_CheckConnected_ARG_uint64_characterId__;

            mResponse = new __RPC_Activity_CheckConnected_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Activity_CheckConnected_ARG_uint64_characterId__ Request { get; private set; }

        private __RPC_Activity_CheckConnected_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public CheckConnectedInMessage Clone()
        { 
            return new CheckConnectedInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class CheckLostInMessage : InMessage
    {
        public CheckLostInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Activity_CheckLost_ARG_uint64_characterId__;

            mResponse = new __RPC_Activity_CheckLost_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Activity_CheckLost_ARG_uint64_characterId__ Request { get; private set; }

        private __RPC_Activity_CheckLost_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public CheckLostInMessage Clone()
        { 
            return new CheckLostInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class QueryCreateMonsterDataInMessage : InMessage
    {
        public QueryCreateMonsterDataInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Activity_QueryCreateMonsterData_ARG_int32_serverId_int32_sceneId__;

            mResponse = new __RPC_Activity_QueryCreateMonsterData_RET_Int32Array__();
            mResponse.ReturnValue = new Int32Array();
        }


        public __RPC_Activity_QueryCreateMonsterData_ARG_int32_serverId_int32_sceneId__ Request { get; private set; }

        private __RPC_Activity_QueryCreateMonsterData_RET_Int32Array__ mResponse;
        public Int32Array Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public QueryCreateMonsterDataInMessage Clone()
        { 
            return new QueryCreateMonsterDataInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class NotifyDamageListInMessage : InMessage
    {
        public NotifyDamageListInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Activity_NotifyDamageList_ARG_int32_serverId_uint64_sceneGuid_DamageList_list__;
            if (Request.List == null) throw new ArgumentNullException("List is null.");

            mResponse = new __RPC_Activity_NotifyDamageList_RET_DamageListForServer__();
            mResponse.ReturnValue = new DamageListForServer();
        }


        public __RPC_Activity_NotifyDamageList_ARG_int32_serverId_uint64_sceneGuid_DamageList_list__ Request { get; private set; }

        private __RPC_Activity_NotifyDamageList_RET_DamageListForServer__ mResponse;
        public DamageListForServer Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public NotifyDamageListInMessage Clone()
        { 
            return new NotifyDamageListInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class QueryStatusInMessage : InMessage
    {
        public QueryStatusInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Activity_QueryStatus_ARG_uint32_placeholder__;

            mResponse = new __RPC_Activity_QueryStatus_RET_ActivityServerStatus__();
            mResponse.ReturnValue = new ActivityServerStatus();
        }


        public __RPC_Activity_QueryStatus_ARG_uint32_placeholder__ Request { get; private set; }

        private __RPC_Activity_QueryStatus_RET_ActivityServerStatus__ mResponse;
        public ActivityServerStatus Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public QueryStatusInMessage Clone()
        { 
            return new QueryStatusInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class QueryBrokerStatusInMessage : InMessage
    {
        public QueryBrokerStatusInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Activity_QueryBrokerStatus_ARG_uint32_placeholder__;

            mResponse = new __RPC_Activity_QueryBrokerStatus_RET_CommonBrokerStatus__();
            mResponse.ReturnValue = new CommonBrokerStatus();
        }


        public __RPC_Activity_QueryBrokerStatus_ARG_uint32_placeholder__ Request { get; private set; }

        private __RPC_Activity_QueryBrokerStatus_RET_CommonBrokerStatus__ mResponse;
        public CommonBrokerStatus Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public QueryBrokerStatusInMessage Clone()
        { 
            return new QueryBrokerStatusInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class ReadyToEnterInMessage : InMessage
    {
        public ReadyToEnterInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Activity_ReadyToEnter_ARG_int32_placeholder__;

            mResponse = new __RPC_Activity_ReadyToEnter_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Activity_ReadyToEnter_ARG_int32_placeholder__ Request { get; private set; }

        private __RPC_Activity_ReadyToEnter_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public ReadyToEnterInMessage Clone()
        { 
            return new ReadyToEnterInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class UpdateServerInMessage : InMessage
    {
        public UpdateServerInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Activity_UpdateServer_ARG_int32_placeholder__;

        }


        public __RPC_Activity_UpdateServer_ARG_int32_placeholder__ Request { get; private set; }

        public UpdateServerInMessage Clone()
        { 
            return new UpdateServerInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class SSApplyActivityStateInMessage : InMessage
    {
        public SSApplyActivityStateInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Activity_SSApplyActivityState_ARG_int32_activityId_int32_serverId__;

            mResponse = new __RPC_Activity_SSApplyActivityState_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Activity_SSApplyActivityState_ARG_int32_activityId_int32_serverId__ Request { get; private set; }

        private __RPC_Activity_SSApplyActivityState_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public SSApplyActivityStateInMessage Clone()
        { 
            return new SSApplyActivityStateInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class ApplyActivityStateInMessage : InMessage
    {
        public ApplyActivityStateInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Activity_ApplyActivityState_ARG_int32_serverId__;

            mResponse = new __RPC_Activity_ApplyActivityState_RET_Dict_int_int_Data__();
            mResponse.ReturnValue = new Dict_int_int_Data();
        }


        public __RPC_Activity_ApplyActivityState_ARG_int32_serverId__ Request { get; private set; }

        private __RPC_Activity_ApplyActivityState_RET_Dict_int_int_Data__ mResponse;
        public Dict_int_int_Data Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public ApplyActivityStateInMessage Clone()
        { 
            return new ApplyActivityStateInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class ApplyOrderSerialInMessage : InMessage
    {
        public ApplyOrderSerialInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Activity_ApplyOrderSerial_ARG_ApplyOrderMessage_msg__;
            if (Request.Msg == null) throw new ArgumentNullException("Msg is null.");

            mResponse = new __RPC_Activity_ApplyOrderSerial_RET_OrderSerialData__();
            mResponse.ReturnValue = new OrderSerialData();
        }


        public __RPC_Activity_ApplyOrderSerial_ARG_ApplyOrderMessage_msg__ Request { get; private set; }

        private __RPC_Activity_ApplyOrderSerial_RET_OrderSerialData__ mResponse;
        public OrderSerialData Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public ApplyOrderSerialInMessage Clone()
        { 
            return new ApplyOrderSerialInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class ApplyMieShiDataInMessage : InMessage
    {
        public ApplyMieShiDataInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Activity_ApplyMieShiData_ARG_int32_serverId__;

            mResponse = new __RPC_Activity_ApplyMieShiData_RET_CommonActivityData__();
            mResponse.ReturnValue = new CommonActivityData();
        }


        public __RPC_Activity_ApplyMieShiData_ARG_int32_serverId__ Request { get; private set; }

        private __RPC_Activity_ApplyMieShiData_RET_CommonActivityData__ mResponse;
        public CommonActivityData Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public ApplyMieShiDataInMessage Clone()
        { 
            return new ApplyMieShiDataInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class ApplyMieshiHeroLogDataInMessage : InMessage
    {
        public ApplyMieshiHeroLogDataInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Activity_ApplyMieshiHeroLogData_ARG_int32_serverId__;

            mResponse = new __RPC_Activity_ApplyMieshiHeroLogData_RET_MieshiHeroLogList__();
            mResponse.ReturnValue = new MieshiHeroLogList();
        }


        public __RPC_Activity_ApplyMieshiHeroLogData_ARG_int32_serverId__ Request { get; private set; }

        private __RPC_Activity_ApplyMieshiHeroLogData_RET_MieshiHeroLogList__ mResponse;
        public MieshiHeroLogList Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public ApplyMieshiHeroLogDataInMessage Clone()
        { 
            return new ApplyMieshiHeroLogDataInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class ApplyBatteryDataInMessage : InMessage
    {
        public ApplyBatteryDataInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Activity_ApplyBatteryData_ARG_int32_serverId_int32_activityId__;

            mResponse = new __RPC_Activity_ApplyBatteryData_RET_BatteryDatas__();
            mResponse.ReturnValue = new BatteryDatas();
        }


        public __RPC_Activity_ApplyBatteryData_ARG_int32_serverId_int32_activityId__ Request { get; private set; }

        private __RPC_Activity_ApplyBatteryData_RET_BatteryDatas__ mResponse;
        public BatteryDatas Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public ApplyBatteryDataInMessage Clone()
        { 
            return new ApplyBatteryDataInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SSApplyPromoteHPInMessage : InMessage
    {
        public SSApplyPromoteHPInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Activity_SSApplyPromoteHP_ARG_int32_serverId_int32_activityId_int32_batteryId_int32_promoteType_uint64_characterId_string_name__;

            mResponse = new __RPC_Activity_SSApplyPromoteHP_RET_BatteryUpdateData__();
            mResponse.ReturnValue = new BatteryUpdateData();
        }


        public __RPC_Activity_SSApplyPromoteHP_ARG_int32_serverId_int32_activityId_int32_batteryId_int32_promoteType_uint64_characterId_string_name__ Request { get; private set; }

        private __RPC_Activity_SSApplyPromoteHP_RET_BatteryUpdateData__ mResponse;
        public BatteryUpdateData Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public SSApplyPromoteHPInMessage Clone()
        { 
            return new SSApplyPromoteHPInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SSApplyPromoteSkillInMessage : InMessage
    {
        public SSApplyPromoteSkillInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Activity_SSApplyPromoteSkill_ARG_int32_serverId_int32_activityId_int32_batteryId_int32_promoteType_uint64_characterId_string_name__;

            mResponse = new __RPC_Activity_SSApplyPromoteSkill_RET_BatteryUpdateData__();
            mResponse.ReturnValue = new BatteryUpdateData();
        }


        public __RPC_Activity_SSApplyPromoteSkill_ARG_int32_serverId_int32_activityId_int32_batteryId_int32_promoteType_uint64_characterId_string_name__ Request { get; private set; }

        private __RPC_Activity_SSApplyPromoteSkill_RET_BatteryUpdateData__ mResponse;
        public BatteryUpdateData Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public SSApplyPromoteSkillInMessage Clone()
        { 
            return new SSApplyPromoteSkillInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class ApplyContriRankingDataInMessage : InMessage
    {
        public ApplyContriRankingDataInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Activity_ApplyContriRankingData_ARG_int32_serverId_int32_activityId__;

            mResponse = new __RPC_Activity_ApplyContriRankingData_RET_ContriRankingData__();
            mResponse.ReturnValue = new ContriRankingData();
        }


        public __RPC_Activity_ApplyContriRankingData_ARG_int32_serverId_int32_activityId__ Request { get; private set; }

        private __RPC_Activity_ApplyContriRankingData_RET_ContriRankingData__ mResponse;
        public ContriRankingData Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public ApplyContriRankingDataInMessage Clone()
        { 
            return new ApplyContriRankingDataInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class ApplyPointRankingDataInMessage : InMessage
    {
        public ApplyPointRankingDataInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Activity_ApplyPointRankingData_ARG_int32_serverId_int32_activityId__;

            mResponse = new __RPC_Activity_ApplyPointRankingData_RET_PointRankingData__();
            mResponse.ReturnValue = new PointRankingData();
        }


        public __RPC_Activity_ApplyPointRankingData_ARG_int32_serverId_int32_activityId__ Request { get; private set; }

        private __RPC_Activity_ApplyPointRankingData_RET_PointRankingData__ mResponse;
        public PointRankingData Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public ApplyPointRankingDataInMessage Clone()
        { 
            return new ApplyPointRankingDataInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SSApplyJoinActivityInMessage : InMessage
    {
        public SSApplyJoinActivityInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Activity_SSApplyJoinActivity_ARG_int32_serverId_int32_activityId__;

            mResponse = new __RPC_Activity_SSApplyJoinActivity_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Activity_SSApplyJoinActivity_ARG_int32_serverId_int32_activityId__ Request { get; private set; }

        private __RPC_Activity_SSApplyJoinActivity_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public SSApplyJoinActivityInMessage Clone()
        { 
            return new SSApplyJoinActivityInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SSSyncMieShiDataInMessage : InMessage
    {
        public SSSyncMieShiDataInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Activity_SSSyncMieShiData_ARG_int32_serverId_int32_activityId_MieShiSceneData_list__;
            if (Request.List == null) throw new ArgumentNullException("List is null.");

            mResponse = new __RPC_Activity_SSSyncMieShiData_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Activity_SSSyncMieShiData_ARG_int32_serverId_int32_activityId_MieShiSceneData_list__ Request { get; private set; }

        private __RPC_Activity_SSSyncMieShiData_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public SSSyncMieShiDataInMessage Clone()
        { 
            return new SSSyncMieShiDataInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SSApplyContributeRateInMessage : InMessage
    {
        public SSApplyContributeRateInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Activity_SSApplyContributeRate_ARG_int32_serverId_int32_activityId__;

            mResponse = new __RPC_Activity_SSApplyContributeRate_RET_ContriRateList__();
            mResponse.ReturnValue = new ContriRateList();
        }


        public __RPC_Activity_SSApplyContributeRate_ARG_int32_serverId_int32_activityId__ Request { get; private set; }

        private __RPC_Activity_SSApplyContributeRate_RET_ContriRateList__ mResponse;
        public ContriRateList Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public SSApplyContributeRateInMessage Clone()
        { 
            return new SSApplyContributeRateInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SSSaveActivityResultInMessage : InMessage
    {
        public SSSaveActivityResultInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Activity_SSSaveActivityResult_ARG_int32_serverId_int32_activityId_int32_result__;

            mResponse = new __RPC_Activity_SSSaveActivityResult_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Activity_SSSaveActivityResult_ARG_int32_serverId_int32_activityId_int32_result__ Request { get; private set; }

        private __RPC_Activity_SSSaveActivityResult_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public SSSaveActivityResultInMessage Clone()
        { 
            return new SSSaveActivityResultInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SSApplyActiResultListInMessage : InMessage
    {
        public SSApplyActiResultListInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Activity_SSApplyActiResultList_ARG_int32_serverId__;

            mResponse = new __RPC_Activity_SSApplyActiResultList_RET_MieShiActivityResultList__();
            mResponse.ReturnValue = new MieShiActivityResultList();
        }


        public __RPC_Activity_SSApplyActiResultList_ARG_int32_serverId__ Request { get; private set; }

        private __RPC_Activity_SSApplyActiResultList_RET_MieShiActivityResultList__ mResponse;
        public MieShiActivityResultList Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public SSApplyActiResultListInMessage Clone()
        { 
            return new SSApplyActiResultListInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SSSetAndGetActivityDataInMessage : InMessage
    {
        public SSSetAndGetActivityDataInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Activity_SSSetAndGetActivityData_ARG_uint64_sceneGuid_int32_serverId_int32_activityId_MieShiBatteryGuid_guidList__;
            if (Request.GuidList == null) throw new ArgumentNullException("GuidList is null.");

            mResponse = new __RPC_Activity_SSSetAndGetActivityData_RET_CommonActivityInfo__();
            mResponse.ReturnValue = new CommonActivityInfo();
        }


        public __RPC_Activity_SSSetAndGetActivityData_ARG_uint64_sceneGuid_int32_serverId_int32_activityId_MieShiBatteryGuid_guidList__ Request { get; private set; }

        private __RPC_Activity_SSSetAndGetActivityData_RET_CommonActivityInfo__ mResponse;
        public CommonActivityInfo Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public SSSetAndGetActivityDataInMessage Clone()
        { 
            return new SSSetAndGetActivityDataInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SyncActivityAllPlayerExitInMessage : InMessage
    {
        public SyncActivityAllPlayerExitInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Activity_SyncActivityAllPlayerExit_ARG_int32_serverId_int32_activityId__;

        }


        public __RPC_Activity_SyncActivityAllPlayerExit_ARG_int32_serverId_int32_activityId__ Request { get; private set; }

        public SyncActivityAllPlayerExitInMessage Clone()
        { 
            return new SyncActivityAllPlayerExitInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class SSAcientBattleSceneRequestInMessage : InMessage
    {
        public SSAcientBattleSceneRequestInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Activity_SSAcientBattleSceneRequest_ARG_int32_serverId_int32_sceneid_int32_npcId_int32_isDie__;

            mResponse = new __RPC_Activity_SSAcientBattleSceneRequest_RET_Dict_int_int_Data__();
            mResponse.ReturnValue = new Dict_int_int_Data();
        }


        public __RPC_Activity_SSAcientBattleSceneRequest_ARG_int32_serverId_int32_sceneid_int32_npcId_int32_isDie__ Request { get; private set; }

        private __RPC_Activity_SSAcientBattleSceneRequest_RET_Dict_int_int_Data__ mResponse;
        public Dict_int_int_Data Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public SSAcientBattleSceneRequestInMessage Clone()
        { 
            return new SSAcientBattleSceneRequestInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class ApplyAcientBattleInMessage : InMessage
    {
        public ApplyAcientBattleInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Activity_ApplyAcientBattle_ARG_int32_serverId__;

            mResponse = new __RPC_Activity_ApplyAcientBattle_RET_Dict_int_int_Data__();
            mResponse.ReturnValue = new Dict_int_int_Data();
        }


        public __RPC_Activity_ApplyAcientBattle_ARG_int32_serverId__ Request { get; private set; }

        private __RPC_Activity_ApplyAcientBattle_RET_Dict_int_int_Data__ mResponse;
        public Dict_int_int_Data Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public ApplyAcientBattleInMessage Clone()
        { 
            return new ApplyAcientBattleInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SSApplyMieShiCanInInMessage : InMessage
    {
        public SSApplyMieShiCanInInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Activity_SSApplyMieShiCanIn_ARG_int32_serverId_int32_activityId__;

            mResponse = new __RPC_Activity_SSApplyMieShiCanIn_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Activity_SSApplyMieShiCanIn_ARG_int32_serverId_int32_activityId__ Request { get; private set; }

        private __RPC_Activity_SSApplyMieShiCanIn_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public SSApplyMieShiCanInInMessage Clone()
        { 
            return new SSApplyMieShiCanInInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SSSyncMieShiBoxCanPickUpInMessage : InMessage
    {
        public SSSyncMieShiBoxCanPickUpInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Activity_SSSyncMieShiBoxCanPickUp_ARG_int32_serverId_int32_activityId_int32_npcId__;

            mResponse = new __RPC_Activity_SSSyncMieShiBoxCanPickUp_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Activity_SSSyncMieShiBoxCanPickUp_ARG_int32_serverId_int32_activityId_int32_npcId__ Request { get; private set; }

        private __RPC_Activity_SSSyncMieShiBoxCanPickUp_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public SSSyncMieShiBoxCanPickUpInMessage Clone()
        { 
            return new SSSyncMieShiBoxCanPickUpInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SSApplyPickUpBoxInMessage : InMessage
    {
        public SSApplyPickUpBoxInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Activity_SSApplyPickUpBox_ARG_int32_serverId_int32_activityId_int32_npcId__;

            mResponse = new __RPC_Activity_SSApplyPickUpBox_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Activity_SSApplyPickUpBox_ARG_int32_serverId_int32_activityId_int32_npcId__ Request { get; private set; }

        private __RPC_Activity_SSApplyPickUpBox_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public SSApplyPickUpBoxInMessage Clone()
        { 
            return new SSApplyPickUpBoxInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class ApplyPortraitDataInMessage : InMessage
    {
        public ApplyPortraitDataInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Activity_ApplyPortraitData_ARG_int32_serverId__;

            mResponse = new __RPC_Activity_ApplyPortraitData_RET_PlayerInfoMsg__();
            mResponse.ReturnValue = new PlayerInfoMsg();
        }


        public __RPC_Activity_ApplyPortraitData_ARG_int32_serverId__ Request { get; private set; }

        private __RPC_Activity_ApplyPortraitData_RET_PlayerInfoMsg__ mResponse;
        public PlayerInfoMsg Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public ApplyPortraitDataInMessage Clone()
        { 
            return new ApplyPortraitDataInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SSApplyPortraitAwardInMessage : InMessage
    {
        public SSApplyPortraitAwardInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Activity_SSApplyPortraitAward_ARG_int32_serverId__;

            mResponse = new __RPC_Activity_SSApplyPortraitAward_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Activity_SSApplyPortraitAward_ARG_int32_serverId__ Request { get; private set; }

        private __RPC_Activity_SSApplyPortraitAward_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public SSApplyPortraitAwardInMessage Clone()
        { 
            return new SSApplyPortraitAwardInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SSSaveBatteryDestroyInMessage : InMessage
    {
        public SSSaveBatteryDestroyInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Activity_SSSaveBatteryDestroy_ARG_int32_serverId_int32_activityId_uint64_batteryGuid__;

            mResponse = new __RPC_Activity_SSSaveBatteryDestroy_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Activity_SSSaveBatteryDestroy_ARG_int32_serverId_int32_activityId_uint64_batteryGuid__ Request { get; private set; }

        private __RPC_Activity_SSSaveBatteryDestroy_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public SSSaveBatteryDestroyInMessage Clone()
        { 
            return new SSSaveBatteryDestroyInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SSApplyLastResultInMessage : InMessage
    {
        public SSApplyLastResultInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Activity_SSApplyLastResult_ARG_int32_serverId__;

            mResponse = new __RPC_Activity_SSApplyLastResult_RET_MieshiLastResult__();
            mResponse.ReturnValue = new MieshiLastResult();
        }


        public __RPC_Activity_SSApplyLastResult_ARG_int32_serverId__ Request { get; private set; }

        private __RPC_Activity_SSApplyLastResult_RET_MieshiLastResult__ mResponse;
        public MieshiLastResult Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public SSApplyLastResultInMessage Clone()
        { 
            return new SSApplyLastResultInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SBCleanClientCharacterDataInMessage : InMessage
    {
        public SBCleanClientCharacterDataInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Activity_SBCleanClientCharacterData_ARG_uint64_clientId_uint64_characterId__;

        }


        public __RPC_Activity_SBCleanClientCharacterData_ARG_uint64_clientId_uint64_characterId__ Request { get; private set; }

        public SBCleanClientCharacterDataInMessage Clone()
        { 
            return new SBCleanClientCharacterDataInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class SSNotifyCharacterOnConnetInMessage : InMessage
    {
        public SSNotifyCharacterOnConnetInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Activity_SSNotifyCharacterOnConnet_ARG_uint64_clientId_uint64_characterId__;

            mResponse = new __RPC_Activity_SSNotifyCharacterOnConnet_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Activity_SSNotifyCharacterOnConnet_ARG_uint64_clientId_uint64_characterId__ Request { get; private set; }

        private __RPC_Activity_SSNotifyCharacterOnConnet_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public SSNotifyCharacterOnConnetInMessage Clone()
        { 
            return new SSNotifyCharacterOnConnetInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class BSNotifyCharacterOnLostInMessage : InMessage
    {
        public BSNotifyCharacterOnLostInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Activity_BSNotifyCharacterOnLost_ARG_uint64_clientId_uint64_characterId__;

        }


        public __RPC_Activity_BSNotifyCharacterOnLost_ARG_uint64_clientId_uint64_characterId__ Request { get; private set; }

        public BSNotifyCharacterOnLostInMessage Clone()
        { 
            return new BSNotifyCharacterOnLostInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class SSAskMieshiTowerUpTimesInMessage : InMessage
    {
        public SSAskMieshiTowerUpTimesInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Activity_SSAskMieshiTowerUpTimes_ARG_int32_serverId_int32_activityId_uint64_characterId__;

            mResponse = new __RPC_Activity_SSAskMieshiTowerUpTimes_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Activity_SSAskMieshiTowerUpTimes_ARG_int32_serverId_int32_activityId_uint64_characterId__ Request { get; private set; }

        private __RPC_Activity_SSAskMieshiTowerUpTimes_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public SSAskMieshiTowerUpTimesInMessage Clone()
        { 
            return new SSAskMieshiTowerUpTimesInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SSAskMieshiTowerRewardInMessage : InMessage
    {
        public SSAskMieshiTowerRewardInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Activity_SSAskMieshiTowerReward_ARG_int32_serverId_int32_activityId_uint64_characterId_int32_idx__;

            mResponse = new __RPC_Activity_SSAskMieshiTowerReward_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Activity_SSAskMieshiTowerReward_ARG_int32_serverId_int32_activityId_uint64_characterId_int32_idx__ Request { get; private set; }

        private __RPC_Activity_SSAskMieshiTowerReward_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public SSAskMieshiTowerRewardInMessage Clone()
        { 
            return new SSAskMieshiTowerRewardInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class BossHomeSceneRequestInMessage : InMessage
    {
        public BossHomeSceneRequestInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Activity_BossHomeSceneRequest_ARG_int32_serverId_int32_sceneid_int32_npcId_int32_isDie__;

            mResponse = new __RPC_Activity_BossHomeSceneRequest_RET_Dict_int_int_Data__();
            mResponse.ReturnValue = new Dict_int_int_Data();
        }


        public __RPC_Activity_BossHomeSceneRequest_ARG_int32_serverId_int32_sceneid_int32_npcId_int32_isDie__ Request { get; private set; }

        private __RPC_Activity_BossHomeSceneRequest_RET_Dict_int_int_Data__ mResponse;
        public Dict_int_int_Data Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public BossHomeSceneRequestInMessage Clone()
        { 
            return new BossHomeSceneRequestInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class ApplyBossHomeInMessage : InMessage
    {
        public ApplyBossHomeInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Activity_ApplyBossHome_ARG_int32_serverId__;

            mResponse = new __RPC_Activity_ApplyBossHome_RET_Dict_int_int_Data__();
            mResponse.ReturnValue = new Dict_int_int_Data();
        }


        public __RPC_Activity_ApplyBossHome_ARG_int32_serverId__ Request { get; private set; }

        private __RPC_Activity_ApplyBossHome_RET_Dict_int_int_Data__ mResponse;
        public Dict_int_int_Data Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public ApplyBossHomeInMessage Clone()
        { 
            return new ApplyBossHomeInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SSGetTreasureShopItemsInMessage : InMessage
    {
        public SSGetTreasureShopItemsInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Activity_SSGetTreasureShopItems_ARG_int32_serverId__;

            mResponse = new __RPC_Activity_SSGetTreasureShopItems_RET_StoneItems__();
            mResponse.ReturnValue = new StoneItems();
        }


        public __RPC_Activity_SSGetTreasureShopItems_ARG_int32_serverId__ Request { get; private set; }

        private __RPC_Activity_SSGetTreasureShopItems_RET_StoneItems__ mResponse;
        public StoneItems Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public SSGetTreasureShopItemsInMessage Clone()
        { 
            return new SSGetTreasureShopItemsInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SSGetTreasureShopItemCountInMessage : InMessage
    {
        public SSGetTreasureShopItemCountInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Activity_SSGetTreasureShopItemCount_ARG_int32_serverId_int32_storeId__;

            mResponse = new __RPC_Activity_SSGetTreasureShopItemCount_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Activity_SSGetTreasureShopItemCount_ARG_int32_serverId_int32_storeId__ Request { get; private set; }

        private __RPC_Activity_SSGetTreasureShopItemCount_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public SSGetTreasureShopItemCountInMessage Clone()
        { 
            return new SSGetTreasureShopItemCountInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SSConsumeTreasureShopItemInMessage : InMessage
    {
        public SSConsumeTreasureShopItemInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Activity_SSConsumeTreasureShopItem_ARG_int32_serverId_int32_storeId_int32_consumeCount__;

            mResponse = new __RPC_Activity_SSConsumeTreasureShopItem_RET_int32__();
            mResponse.ReturnValue = new int();
        }


        public __RPC_Activity_SSConsumeTreasureShopItem_ARG_int32_serverId_int32_storeId_int32_consumeCount__ Request { get; private set; }

        private __RPC_Activity_SSConsumeTreasureShopItem_RET_int32__ mResponse;
        public int Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public SSConsumeTreasureShopItemInMessage Clone()
        { 
            return new SSConsumeTreasureShopItemInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SSGetBlackStoreItemsInMessage : InMessage
    {
        public SSGetBlackStoreItemsInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Activity_SSGetBlackStoreItems_ARG_int32_serverId__;

            mResponse = new __RPC_Activity_SSGetBlackStoreItems_RET_StoneItems__();
            mResponse.ReturnValue = new StoneItems();
        }


        public __RPC_Activity_SSGetBlackStoreItems_ARG_int32_serverId__ Request { get; private set; }

        private __RPC_Activity_SSGetBlackStoreItems_RET_StoneItems__ mResponse;
        public StoneItems Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public SSGetBlackStoreItemsInMessage Clone()
        { 
            return new SSGetBlackStoreItemsInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public class SSSyncChickenScoreInMessage : InMessage
    {
        public SSSyncChickenScoreInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Activity_SSSyncChickenScore_ARG_ChickenRankData_rankData__;
            if (Request.RankData == null) throw new ArgumentNullException("RankData is null.");

        }


        public __RPC_Activity_SSSyncChickenScore_ARG_ChickenRankData_rankData__ Request { get; private set; }

        public SSSyncChickenScoreInMessage Clone()
        { 
            return new SSSyncChickenScoreInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            throw new Exception("Can not reply a function has void return type.");
        }
    }

    public class ApplyChickenRankDataInMessage : InMessage
    {
        public ApplyChickenRankDataInMessage(object sender, ServiceDesc msg, object data)
            : base((ServerClient)sender, msg, data)
        {
            Request = data as __RPC_Activity_ApplyChickenRankData_ARG_uint64_characterId__;

            mResponse = new __RPC_Activity_ApplyChickenRankData_RET_ChickenRankData__();
            mResponse.ReturnValue = new ChickenRankData();
        }


        public __RPC_Activity_ApplyChickenRankData_ARG_uint64_characterId__ Request { get; private set; }

        private __RPC_Activity_ApplyChickenRankData_RET_ChickenRankData__ mResponse;
        public ChickenRankData Response { get { return mResponse.ReturnValue; } set { mResponse.ReturnValue = value; } }
        public ApplyChickenRankDataInMessage Clone()
        { 
            return new ApplyChickenRankDataInMessage(mSender, ServiceDesc.ShallowClone(mMessage), mData);
        }

        protected override byte[] Serialize(MemoryStream s)
        {
            Serializer.Serialize(s, mResponse);
            return s.ToArray();
        }
    }

    public interface IActivityCharacterProxy
    {
        /// <summary>
        /// 获取活动状态
        /// </summary>
        IEnumerator ApplyActivityState(Coroutine coroutine, ActivityCharacterProxy _this, ApplyActivityStateInMessage msg);
        /// <summary>
        /// 请求订单号，生成订单号并存到数据库等待支付结果
        /// </summary>
        IEnumerator ApplyOrderSerial(Coroutine coroutine, ActivityCharacterProxy _this, ApplyOrderSerialInMessage msg);
        /// <summary>
        /// 请求灭世活动数据
        /// </summary>
        IEnumerator ApplyMieShiData(Coroutine coroutine, ActivityCharacterProxy _this, ApplyMieShiDataInMessage msg);
        /// <summary>
        /// </summary>
        IEnumerator ApplyMieshiHeroLogData(Coroutine coroutine, ActivityCharacterProxy _this, ApplyMieshiHeroLogDataInMessage msg);
        /// <summary>
        /// 请求炮台信息
        /// </summary>
        IEnumerator ApplyBatteryData(Coroutine coroutine, ActivityCharacterProxy _this, ApplyBatteryDataInMessage msg);
        /// <summary>
        /// 请求贡献排行榜
        /// </summary>
        IEnumerator ApplyContriRankingData(Coroutine coroutine, ActivityCharacterProxy _this, ApplyContriRankingDataInMessage msg);
        /// <summary>
        /// 请求积分排行榜
        /// </summary>
        IEnumerator ApplyPointRankingData(Coroutine coroutine, ActivityCharacterProxy _this, ApplyPointRankingDataInMessage msg);
        /// <summary>
        /// 获取古域战场死亡数据
        /// </summary>
        IEnumerator ApplyAcientBattle(Coroutine coroutine, ActivityCharacterProxy _this, ApplyAcientBattleInMessage msg);
        /// <summary>
        /// 请求雕像数据
        /// </summary>
        IEnumerator ApplyPortraitData(Coroutine coroutine, ActivityCharacterProxy _this, ApplyPortraitDataInMessage msg);
        /// <summary>
        /// 获取Boss之家死亡数据
        /// </summary>
        IEnumerator ApplyBossHome(Coroutine coroutine, ActivityCharacterProxy _this, ApplyBossHomeInMessage msg);
        /// <summary>
        /// </summary>
        IEnumerator ApplyChickenRankData(Coroutine coroutine, ActivityCharacterProxy _this, ApplyChickenRankDataInMessage msg);
        IEnumerator OnConnected(Coroutine coroutine, ActivityCharacterProxy _this, uint packId);
        IEnumerator OnLost(Coroutine coroutine, ActivityCharacterProxy _this, uint packId);
        bool OnSyncRequested(ActivityCharacterProxy _this, ulong characterId, uint syncId);
    }

    public class ActivityCharacterProxy
    {
        public ulong CharacterId { get; private set; }
        public ulong ClientId { get; private set; }
        public ActivityService Service { get; private set; }

        public ActivityCharacterProxy(ActivityService service, ulong characterId, ulong clientId)
        {
            CharacterId = characterId;
            ClientId = clientId;
            Service = service;
            mSyncCenter.ServiceType = ServiceType.Logic;
        }

        private DataSyncCenter mSyncCenter = new DataSyncCenter();
        public DataSyncCenter SyncCenter { get { return mSyncCenter; } }

        public void Sync()
        {
            Service.Sync(ClientId, mSyncCenter);
        }

        /// <summary>
        /// 通知全服，某个活动的状态
        /// </summary>
        public object NotifyActivityState(uint __serverId__, int activityId, int state)
        {
            Service.NotifyActivityState(__serverId__, activityId, state);
            return null;
        }
        /// <summary>
        /// 通知所有在线客户端某些表格刷新了
        /// </summary>
        public object NotifyTableChange(int flag)
        {
            Service.NotifyTableChange(flag);
            return null;
        }
        /// <summary>
        /// 通知全服，某个活动某个炮台的数据
        /// </summary>
        public object NotifyBatteryData(uint __serverId__, int activityId, ActivityBatteryOne battery)
        {
            Service.NotifyBatteryData(__serverId__, activityId, battery);
            return null;
        }
        /// <summary>
        /// 通知全服灭世活动的状态
        /// </summary>
        public object NotifyMieShiActivityState(uint __serverId__, int activityId, int state)
        {
            Service.NotifyMieShiActivityState(__serverId__, activityId, state);
            return null;
        }
        /// <summary>
        /// </summary>
        public object NotifyMieShiActivityInfo(uint __serverId__, CommonActivityData msg)
        {
            Service.NotifyMieShiActivityInfo(__serverId__, msg);
            return null;
        }
        /// <summary>
        /// 通知客户端某个炮台数据更新
        /// SC ActivityBatteryOne         NotifyBatteryDataOne(int32 activityId, ActivityBatteryOne battery) = 4108;
        /// 通知报名的玩家可以进入
        /// </summary>
        public object NotifyPlayerCanIn(IEnumerable<ulong> __characterIds__, int fubenId, long canInEndTime)
        {
            Service.NotifyPlayerCanIn(__characterIds__, fubenId, canInEndTime);
            return null;
        }
        public object Wait(Coroutine coroutine, TimeSpan timeSpan)
        {
            return Service.Wait(coroutine, timeSpan);
        }
    }
}
